// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Mumble.pb.h"
// @@protoc_insertion_point(imports)

@implementation MPMumbleRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MPMumbleRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MPVersion ()
@property UInt32 version;
@property (strong) NSString* release;
@property (strong) NSString* os;
@property (strong) NSString* osVersion;
@end

@implementation MPVersion

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasRelease {
  return !!hasRelease_;
}
- (void) setHasRelease:(BOOL) _value_ {
  hasRelease_ = !!_value_;
}
@synthesize release;
- (BOOL) hasOs {
  return !!hasOs_;
}
- (void) setHasOs:(BOOL) _value_ {
  hasOs_ = !!_value_;
}
@synthesize os;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) _value_ {
  hasOsVersion_ = !!_value_;
}
@synthesize osVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.version = 0;
    self.release = @"";
    self.os = @"";
    self.osVersion = @"";
  }
  return self;
}
static MPVersion* defaultMPVersionInstance = nil;
+ (void) initialize {
  if (self == [MPVersion class]) {
    defaultMPVersionInstance = [[MPVersion alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPVersionInstance;
}
- (instancetype) defaultInstance {
  return defaultMPVersionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeUInt32:1 value:self.version];
  }
  if (self.hasRelease) {
    [output writeString:2 value:self.release];
  }
  if (self.hasOs) {
    [output writeString:3 value:self.os];
  }
  if (self.hasOsVersion) {
    [output writeString:4 value:self.osVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVersion) {
    size_ += computeUInt32Size(1, self.version);
  }
  if (self.hasRelease) {
    size_ += computeStringSize(2, self.release);
  }
  if (self.hasOs) {
    size_ += computeStringSize(3, self.os);
  }
  if (self.hasOsVersion) {
    size_ += computeStringSize(4, self.osVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPVersion*) parseFromData:(NSData*) data {
  return (MPVersion*)[[[MPVersion builder] mergeFromData:data] build];
}
+ (MPVersion*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVersion*)[[[MPVersion builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPVersion*) parseFromInputStream:(NSInputStream*) input {
  return (MPVersion*)[[[MPVersion builder] mergeFromInputStream:input] build];
}
+ (MPVersion*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVersion*)[[[MPVersion builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVersion*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPVersion*)[[[MPVersion builder] mergeFromCodedInputStream:input] build];
}
+ (MPVersion*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVersion*)[[[MPVersion builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVersionBuilder*) builder {
  return [[MPVersionBuilder alloc] init];
}
+ (MPVersionBuilder*) builderWithPrototype:(MPVersion*) prototype {
  return [[MPVersion builder] mergeFrom:prototype];
}
- (MPVersionBuilder*) builder {
  return [MPVersion builder];
}
- (MPVersionBuilder*) toBuilder {
  return [MPVersion builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  if (self.hasRelease) {
    [output appendFormat:@"%@%@: %@\n", indent, @"release", self.release];
  }
  if (self.hasOs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"os", self.os];
  }
  if (self.hasOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osVersion", self.osVersion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.version] forKey: @"version"];
  }
  if (self.hasRelease) {
    [dictionary setObject: self.release forKey: @"release"];
  }
  if (self.hasOs) {
    [dictionary setObject: self.os forKey: @"os"];
  }
  if (self.hasOsVersion) {
    [dictionary setObject: self.osVersion forKey: @"osVersion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPVersion class]]) {
    return NO;
  }
  MPVersion *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasRelease == otherMessage.hasRelease &&
      (!self.hasRelease || [self.release isEqual:otherMessage.release]) &&
      self.hasOs == otherMessage.hasOs &&
      (!self.hasOs || [self.os isEqual:otherMessage.os]) &&
      self.hasOsVersion == otherMessage.hasOsVersion &&
      (!self.hasOsVersion || [self.osVersion isEqual:otherMessage.osVersion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  if (self.hasRelease) {
    hashCode = hashCode * 31 + [self.release hash];
  }
  if (self.hasOs) {
    hashCode = hashCode * 31 + [self.os hash];
  }
  if (self.hasOsVersion) {
    hashCode = hashCode * 31 + [self.osVersion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPVersionBuilder()
@property (strong) MPVersion* resultVersion;
@end

@implementation MPVersionBuilder
@synthesize resultVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultVersion = [[MPVersion alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultVersion;
}
- (MPVersionBuilder*) clear {
  self.resultVersion = [[MPVersion alloc] init];
  return self;
}
- (MPVersionBuilder*) clone {
  return [MPVersion builderWithPrototype:resultVersion];
}
- (MPVersion*) defaultInstance {
  return [MPVersion defaultInstance];
}
- (MPVersion*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPVersion*) buildPartial {
  MPVersion* returnMe = resultVersion;
  self.resultVersion = nil;
  return returnMe;
}
- (MPVersionBuilder*) mergeFrom:(MPVersion*) other {
  if (other == [MPVersion defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasRelease) {
    [self setRelease:other.release];
  }
  if (other.hasOs) {
    [self setOs:other.os];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPVersionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPVersionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVersion:[input readUInt32]];
        break;
      }
      case 18: {
        [self setRelease:[input readString]];
        break;
      }
      case 26: {
        [self setOs:[input readString]];
        break;
      }
      case 34: {
        [self setOsVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return resultVersion.hasVersion;
}
- (UInt32) version {
  return resultVersion.version;
}
- (MPVersionBuilder*) setVersion:(UInt32) value {
  resultVersion.hasVersion = YES;
  resultVersion.version = value;
  return self;
}
- (MPVersionBuilder*) clearVersion {
  resultVersion.hasVersion = NO;
  resultVersion.version = 0;
  return self;
}
- (BOOL) hasRelease {
  return resultVersion.hasRelease;
}
- (NSString*) release {
  return resultVersion.release;
}
- (MPVersionBuilder*) setRelease:(NSString*) value {
  resultVersion.hasRelease = YES;
  resultVersion.release = value;
  return self;
}
- (MPVersionBuilder*) clearRelease {
  resultVersion.hasRelease = NO;
  resultVersion.release = @"";
  return self;
}
- (BOOL) hasOs {
  return resultVersion.hasOs;
}
- (NSString*) os {
  return resultVersion.os;
}
- (MPVersionBuilder*) setOs:(NSString*) value {
  resultVersion.hasOs = YES;
  resultVersion.os = value;
  return self;
}
- (MPVersionBuilder*) clearOs {
  resultVersion.hasOs = NO;
  resultVersion.os = @"";
  return self;
}
- (BOOL) hasOsVersion {
  return resultVersion.hasOsVersion;
}
- (NSString*) osVersion {
  return resultVersion.osVersion;
}
- (MPVersionBuilder*) setOsVersion:(NSString*) value {
  resultVersion.hasOsVersion = YES;
  resultVersion.osVersion = value;
  return self;
}
- (MPVersionBuilder*) clearOsVersion {
  resultVersion.hasOsVersion = NO;
  resultVersion.osVersion = @"";
  return self;
}
@end

@interface MPUDPTunnel ()
@property (strong) NSData* packet;
@end

@implementation MPUDPTunnel

- (BOOL) hasPacket {
  return !!hasPacket_;
}
- (void) setHasPacket:(BOOL) _value_ {
  hasPacket_ = !!_value_;
}
@synthesize packet;
- (instancetype) init {
  if ((self = [super init])) {
    self.packet = [NSData data];
  }
  return self;
}
static MPUDPTunnel* defaultMPUDPTunnelInstance = nil;
+ (void) initialize {
  if (self == [MPUDPTunnel class]) {
    defaultMPUDPTunnelInstance = [[MPUDPTunnel alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPUDPTunnelInstance;
}
- (instancetype) defaultInstance {
  return defaultMPUDPTunnelInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPacket) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPacket) {
    [output writeData:1 value:self.packet];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPacket) {
    size_ += computeDataSize(1, self.packet);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPUDPTunnel*) parseFromData:(NSData*) data {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromData:data] build];
}
+ (MPUDPTunnel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUDPTunnel*) parseFromInputStream:(NSInputStream*) input {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromInputStream:input] build];
}
+ (MPUDPTunnel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUDPTunnel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromCodedInputStream:input] build];
}
+ (MPUDPTunnel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUDPTunnel*)[[[MPUDPTunnel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUDPTunnelBuilder*) builder {
  return [[MPUDPTunnelBuilder alloc] init];
}
+ (MPUDPTunnelBuilder*) builderWithPrototype:(MPUDPTunnel*) prototype {
  return [[MPUDPTunnel builder] mergeFrom:prototype];
}
- (MPUDPTunnelBuilder*) builder {
  return [MPUDPTunnel builder];
}
- (MPUDPTunnelBuilder*) toBuilder {
  return [MPUDPTunnel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPacket) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packet", self.packet];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPacket) {
    [dictionary setObject: self.packet forKey: @"packet"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUDPTunnel class]]) {
    return NO;
  }
  MPUDPTunnel *otherMessage = other;
  return
      self.hasPacket == otherMessage.hasPacket &&
      (!self.hasPacket || [self.packet isEqual:otherMessage.packet]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPacket) {
    hashCode = hashCode * 31 + [self.packet hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUDPTunnelBuilder()
@property (strong) MPUDPTunnel* resultUdptunnel;
@end

@implementation MPUDPTunnelBuilder
@synthesize resultUdptunnel;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUdptunnel = [[MPUDPTunnel alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUdptunnel;
}
- (MPUDPTunnelBuilder*) clear {
  self.resultUdptunnel = [[MPUDPTunnel alloc] init];
  return self;
}
- (MPUDPTunnelBuilder*) clone {
  return [MPUDPTunnel builderWithPrototype:resultUdptunnel];
}
- (MPUDPTunnel*) defaultInstance {
  return [MPUDPTunnel defaultInstance];
}
- (MPUDPTunnel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUDPTunnel*) buildPartial {
  MPUDPTunnel* returnMe = resultUdptunnel;
  self.resultUdptunnel = nil;
  return returnMe;
}
- (MPUDPTunnelBuilder*) mergeFrom:(MPUDPTunnel*) other {
  if (other == [MPUDPTunnel defaultInstance]) {
    return self;
  }
  if (other.hasPacket) {
    [self setPacket:other.packet];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUDPTunnelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUDPTunnelBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPacket:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasPacket {
  return resultUdptunnel.hasPacket;
}
- (NSData*) packet {
  return resultUdptunnel.packet;
}
- (MPUDPTunnelBuilder*) setPacket:(NSData*) value {
  resultUdptunnel.hasPacket = YES;
  resultUdptunnel.packet = value;
  return self;
}
- (MPUDPTunnelBuilder*) clearPacket {
  resultUdptunnel.hasPacket = NO;
  resultUdptunnel.packet = [NSData data];
  return self;
}
@end

@interface MPAuthenticate ()
@property (strong) NSString* username;
@property (strong) NSString* password;
@property (strong) NSMutableArray * tokensArray;
@property (strong) PBAppendableArray * celtVersionsArray;
@property BOOL opus;
@end

@implementation MPAuthenticate

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) _value_ {
  hasUsername_ = !!_value_;
}
@synthesize username;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
@synthesize tokensArray;
@dynamic tokens;
@synthesize celtVersionsArray;
@dynamic celtVersions;
- (BOOL) hasOpus {
  return !!hasOpus_;
}
- (void) setHasOpus:(BOOL) _value_ {
  hasOpus_ = !!_value_;
}
- (BOOL) opus {
  return !!opus_;
}
- (void) setOpus:(BOOL) _value_ {
  opus_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.username = @"";
    self.password = @"";
    self.opus = NO;
  }
  return self;
}
static MPAuthenticate* defaultMPAuthenticateInstance = nil;
+ (void) initialize {
  if (self == [MPAuthenticate class]) {
    defaultMPAuthenticateInstance = [[MPAuthenticate alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPAuthenticateInstance;
}
- (instancetype) defaultInstance {
  return defaultMPAuthenticateInstance;
}
- (NSArray *)tokens {
  return tokensArray;
}
- (NSString*)tokensAtIndex:(NSUInteger)index {
  return [tokensArray objectAtIndex:index];
}
- (PBArray *)celtVersions {
  return celtVersionsArray;
}
- (SInt32)celtVersionsAtIndex:(NSUInteger)index {
  return [celtVersionsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasPassword) {
    [output writeString:2 value:self.password];
  }
  [self.tokensArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:3 value:element];
  }];
  const NSUInteger celtVersionsArrayCount = self.celtVersionsArray.count;
  if (celtVersionsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.celtVersionsArray.data;
    for (NSUInteger i = 0; i < celtVersionsArrayCount; ++i) {
      [output writeInt32:4 value:values[i]];
    }
  }
  if (self.hasOpus) {
    [output writeBool:5 value:self.opus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUsername) {
    size_ += computeStringSize(1, self.username);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(2, self.password);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.tokensArray.count;
    [self.tokensArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.celtVersionsArray.count;
    const SInt32 *values = (const SInt32 *)self.celtVersionsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasOpus) {
    size_ += computeBoolSize(5, self.opus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPAuthenticate*) parseFromData:(NSData*) data {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromData:data] build];
}
+ (MPAuthenticate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPAuthenticate*) parseFromInputStream:(NSInputStream*) input {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromInputStream:input] build];
}
+ (MPAuthenticate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPAuthenticate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromCodedInputStream:input] build];
}
+ (MPAuthenticate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPAuthenticate*)[[[MPAuthenticate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPAuthenticateBuilder*) builder {
  return [[MPAuthenticateBuilder alloc] init];
}
+ (MPAuthenticateBuilder*) builderWithPrototype:(MPAuthenticate*) prototype {
  return [[MPAuthenticate builder] mergeFrom:prototype];
}
- (MPAuthenticateBuilder*) builder {
  return [MPAuthenticate builder];
}
- (MPAuthenticateBuilder*) toBuilder {
  return [MPAuthenticate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  [self.tokensArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tokens", obj];
  }];
  [self.celtVersionsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"celtVersions", obj];
  }];
  if (self.hasOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opus", [NSNumber numberWithBool:self.opus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUsername) {
    [dictionary setObject: self.username forKey: @"username"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  [dictionary setObject:self.tokens forKey: @"tokens"];
  NSMutableArray * celtVersionsArrayArray = [NSMutableArray new];
  NSUInteger celtVersionsArrayCount=self.celtVersionsArray.count;
  for(int i=0;i<celtVersionsArrayCount;i++){
    [celtVersionsArrayArray addObject: @([self.celtVersionsArray int32AtIndex:i])];
  }
  [dictionary setObject: celtVersionsArrayArray forKey: @"celtVersions"];
  if (self.hasOpus) {
    [dictionary setObject: [NSNumber numberWithBool:self.opus] forKey: @"opus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPAuthenticate class]]) {
    return NO;
  }
  MPAuthenticate *otherMessage = other;
  return
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      [self.tokensArray isEqualToArray:otherMessage.tokensArray] &&
      [self.celtVersionsArray isEqualToArray:otherMessage.celtVersionsArray] &&
      self.hasOpus == otherMessage.hasOpus &&
      (!self.hasOpus || self.opus == otherMessage.opus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  [self.tokensArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.celtVersionsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.opus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPAuthenticateBuilder()
@property (strong) MPAuthenticate* resultAuthenticate;
@end

@implementation MPAuthenticateBuilder
@synthesize resultAuthenticate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAuthenticate = [[MPAuthenticate alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAuthenticate;
}
- (MPAuthenticateBuilder*) clear {
  self.resultAuthenticate = [[MPAuthenticate alloc] init];
  return self;
}
- (MPAuthenticateBuilder*) clone {
  return [MPAuthenticate builderWithPrototype:resultAuthenticate];
}
- (MPAuthenticate*) defaultInstance {
  return [MPAuthenticate defaultInstance];
}
- (MPAuthenticate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPAuthenticate*) buildPartial {
  MPAuthenticate* returnMe = resultAuthenticate;
  self.resultAuthenticate = nil;
  return returnMe;
}
- (MPAuthenticateBuilder*) mergeFrom:(MPAuthenticate*) other {
  if (other == [MPAuthenticate defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.tokensArray.count > 0) {
    if (resultAuthenticate.tokensArray == nil) {
      resultAuthenticate.tokensArray = [[NSMutableArray alloc] initWithArray:other.tokensArray];
    } else {
      [resultAuthenticate.tokensArray addObjectsFromArray:other.tokensArray];
    }
  }
  if (other.celtVersionsArray.count > 0) {
    if (resultAuthenticate.celtVersionsArray == nil) {
      resultAuthenticate.celtVersionsArray = [other.celtVersionsArray copy];
    } else {
      [resultAuthenticate.celtVersionsArray appendArray:other.celtVersionsArray];
    }
  }
  if (other.hasOpus) {
    [self setOpus:other.opus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPAuthenticateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPAuthenticateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 18: {
        [self setPassword:[input readString]];
        break;
      }
      case 26: {
        [self addTokens:[input readString]];
        break;
      }
      case 32: {
        [self addCeltVersions:[input readInt32]];
        break;
      }
      case 40: {
        [self setOpus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return resultAuthenticate.hasUsername;
}
- (NSString*) username {
  return resultAuthenticate.username;
}
- (MPAuthenticateBuilder*) setUsername:(NSString*) value {
  resultAuthenticate.hasUsername = YES;
  resultAuthenticate.username = value;
  return self;
}
- (MPAuthenticateBuilder*) clearUsername {
  resultAuthenticate.hasUsername = NO;
  resultAuthenticate.username = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultAuthenticate.hasPassword;
}
- (NSString*) password {
  return resultAuthenticate.password;
}
- (MPAuthenticateBuilder*) setPassword:(NSString*) value {
  resultAuthenticate.hasPassword = YES;
  resultAuthenticate.password = value;
  return self;
}
- (MPAuthenticateBuilder*) clearPassword {
  resultAuthenticate.hasPassword = NO;
  resultAuthenticate.password = @"";
  return self;
}
- (NSMutableArray *)tokens {
  return resultAuthenticate.tokensArray;
}
- (NSString*)tokensAtIndex:(NSUInteger)index {
  return [resultAuthenticate tokensAtIndex:index];
}
- (MPAuthenticateBuilder *)addTokens:(NSString*)value {
  if (resultAuthenticate.tokensArray == nil) {
    resultAuthenticate.tokensArray = [[NSMutableArray alloc]init];
  }
  [resultAuthenticate.tokensArray addObject:value];
  return self;
}
- (MPAuthenticateBuilder *)setTokensArray:(NSArray *)array {
  resultAuthenticate.tokensArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (MPAuthenticateBuilder *)clearTokens {
  resultAuthenticate.tokensArray = nil;
  return self;
}
- (PBAppendableArray *)celtVersions {
  return resultAuthenticate.celtVersionsArray;
}
- (SInt32)celtVersionsAtIndex:(NSUInteger)index {
  return [resultAuthenticate celtVersionsAtIndex:index];
}
- (MPAuthenticateBuilder *)addCeltVersions:(SInt32)value {
  if (resultAuthenticate.celtVersionsArray == nil) {
    resultAuthenticate.celtVersionsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultAuthenticate.celtVersionsArray addInt32:value];
  return self;
}
- (MPAuthenticateBuilder *)setCeltVersionsArray:(NSArray *)array {
  resultAuthenticate.celtVersionsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (MPAuthenticateBuilder *)setCeltVersionsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultAuthenticate.celtVersionsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (MPAuthenticateBuilder *)clearCeltVersions {
  resultAuthenticate.celtVersionsArray = nil;
  return self;
}
- (BOOL) hasOpus {
  return resultAuthenticate.hasOpus;
}
- (BOOL) opus {
  return resultAuthenticate.opus;
}
- (MPAuthenticateBuilder*) setOpus:(BOOL) value {
  resultAuthenticate.hasOpus = YES;
  resultAuthenticate.opus = value;
  return self;
}
- (MPAuthenticateBuilder*) clearOpus {
  resultAuthenticate.hasOpus = NO;
  resultAuthenticate.opus = NO;
  return self;
}
@end

@interface MPPing ()
@property UInt64 timestamp;
@property UInt32 good;
@property UInt32 late;
@property UInt32 lost;
@property UInt32 resync;
@property UInt32 udpPackets;
@property UInt32 tcpPackets;
@property Float32 udpPingAvg;
@property Float32 udpPingVar;
@property Float32 tcpPingAvg;
@property Float32 tcpPingVar;
@end

@implementation MPPing

- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasGood {
  return !!hasGood_;
}
- (void) setHasGood:(BOOL) _value_ {
  hasGood_ = !!_value_;
}
@synthesize good;
- (BOOL) hasLate {
  return !!hasLate_;
}
- (void) setHasLate:(BOOL) _value_ {
  hasLate_ = !!_value_;
}
@synthesize late;
- (BOOL) hasLost {
  return !!hasLost_;
}
- (void) setHasLost:(BOOL) _value_ {
  hasLost_ = !!_value_;
}
@synthesize lost;
- (BOOL) hasResync {
  return !!hasResync_;
}
- (void) setHasResync:(BOOL) _value_ {
  hasResync_ = !!_value_;
}
@synthesize resync;
- (BOOL) hasUdpPackets {
  return !!hasUdpPackets_;
}
- (void) setHasUdpPackets:(BOOL) _value_ {
  hasUdpPackets_ = !!_value_;
}
@synthesize udpPackets;
- (BOOL) hasTcpPackets {
  return !!hasTcpPackets_;
}
- (void) setHasTcpPackets:(BOOL) _value_ {
  hasTcpPackets_ = !!_value_;
}
@synthesize tcpPackets;
- (BOOL) hasUdpPingAvg {
  return !!hasUdpPingAvg_;
}
- (void) setHasUdpPingAvg:(BOOL) _value_ {
  hasUdpPingAvg_ = !!_value_;
}
@synthesize udpPingAvg;
- (BOOL) hasUdpPingVar {
  return !!hasUdpPingVar_;
}
- (void) setHasUdpPingVar:(BOOL) _value_ {
  hasUdpPingVar_ = !!_value_;
}
@synthesize udpPingVar;
- (BOOL) hasTcpPingAvg {
  return !!hasTcpPingAvg_;
}
- (void) setHasTcpPingAvg:(BOOL) _value_ {
  hasTcpPingAvg_ = !!_value_;
}
@synthesize tcpPingAvg;
- (BOOL) hasTcpPingVar {
  return !!hasTcpPingVar_;
}
- (void) setHasTcpPingVar:(BOOL) _value_ {
  hasTcpPingVar_ = !!_value_;
}
@synthesize tcpPingVar;
- (instancetype) init {
  if ((self = [super init])) {
    self.timestamp = 0L;
    self.good = 0;
    self.late = 0;
    self.lost = 0;
    self.resync = 0;
    self.udpPackets = 0;
    self.tcpPackets = 0;
    self.udpPingAvg = 0;
    self.udpPingVar = 0;
    self.tcpPingAvg = 0;
    self.tcpPingVar = 0;
  }
  return self;
}
static MPPing* defaultMPPingInstance = nil;
+ (void) initialize {
  if (self == [MPPing class]) {
    defaultMPPingInstance = [[MPPing alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPPingInstance;
}
- (instancetype) defaultInstance {
  return defaultMPPingInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTimestamp) {
    [output writeUInt64:1 value:self.timestamp];
  }
  if (self.hasGood) {
    [output writeUInt32:2 value:self.good];
  }
  if (self.hasLate) {
    [output writeUInt32:3 value:self.late];
  }
  if (self.hasLost) {
    [output writeUInt32:4 value:self.lost];
  }
  if (self.hasResync) {
    [output writeUInt32:5 value:self.resync];
  }
  if (self.hasUdpPackets) {
    [output writeUInt32:6 value:self.udpPackets];
  }
  if (self.hasTcpPackets) {
    [output writeUInt32:7 value:self.tcpPackets];
  }
  if (self.hasUdpPingAvg) {
    [output writeFloat:8 value:self.udpPingAvg];
  }
  if (self.hasUdpPingVar) {
    [output writeFloat:9 value:self.udpPingVar];
  }
  if (self.hasTcpPingAvg) {
    [output writeFloat:10 value:self.tcpPingAvg];
  }
  if (self.hasTcpPingVar) {
    [output writeFloat:11 value:self.tcpPingVar];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTimestamp) {
    size_ += computeUInt64Size(1, self.timestamp);
  }
  if (self.hasGood) {
    size_ += computeUInt32Size(2, self.good);
  }
  if (self.hasLate) {
    size_ += computeUInt32Size(3, self.late);
  }
  if (self.hasLost) {
    size_ += computeUInt32Size(4, self.lost);
  }
  if (self.hasResync) {
    size_ += computeUInt32Size(5, self.resync);
  }
  if (self.hasUdpPackets) {
    size_ += computeUInt32Size(6, self.udpPackets);
  }
  if (self.hasTcpPackets) {
    size_ += computeUInt32Size(7, self.tcpPackets);
  }
  if (self.hasUdpPingAvg) {
    size_ += computeFloatSize(8, self.udpPingAvg);
  }
  if (self.hasUdpPingVar) {
    size_ += computeFloatSize(9, self.udpPingVar);
  }
  if (self.hasTcpPingAvg) {
    size_ += computeFloatSize(10, self.tcpPingAvg);
  }
  if (self.hasTcpPingVar) {
    size_ += computeFloatSize(11, self.tcpPingVar);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPPing*) parseFromData:(NSData*) data {
  return (MPPing*)[[[MPPing builder] mergeFromData:data] build];
}
+ (MPPing*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPing*)[[[MPPing builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPPing*) parseFromInputStream:(NSInputStream*) input {
  return (MPPing*)[[[MPPing builder] mergeFromInputStream:input] build];
}
+ (MPPing*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPing*)[[[MPPing builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPing*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPPing*)[[[MPPing builder] mergeFromCodedInputStream:input] build];
}
+ (MPPing*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPing*)[[[MPPing builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPingBuilder*) builder {
  return [[MPPingBuilder alloc] init];
}
+ (MPPingBuilder*) builderWithPrototype:(MPPing*) prototype {
  return [[MPPing builder] mergeFrom:prototype];
}
- (MPPingBuilder*) builder {
  return [MPPing builder];
}
- (MPPingBuilder*) toBuilder {
  return [MPPing builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasGood) {
    [output appendFormat:@"%@%@: %@\n", indent, @"good", [NSNumber numberWithInteger:self.good]];
  }
  if (self.hasLate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"late", [NSNumber numberWithInteger:self.late]];
  }
  if (self.hasLost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lost", [NSNumber numberWithInteger:self.lost]];
  }
  if (self.hasResync) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resync", [NSNumber numberWithInteger:self.resync]];
  }
  if (self.hasUdpPackets) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPackets", [NSNumber numberWithInteger:self.udpPackets]];
  }
  if (self.hasTcpPackets) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPackets", [NSNumber numberWithInteger:self.tcpPackets]];
  }
  if (self.hasUdpPingAvg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPingAvg", [NSNumber numberWithFloat:self.udpPingAvg]];
  }
  if (self.hasUdpPingVar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPingVar", [NSNumber numberWithFloat:self.udpPingVar]];
  }
  if (self.hasTcpPingAvg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPingAvg", [NSNumber numberWithFloat:self.tcpPingAvg]];
  }
  if (self.hasTcpPingVar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPingVar", [NSNumber numberWithFloat:self.tcpPingVar]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasGood) {
    [dictionary setObject: [NSNumber numberWithInteger:self.good] forKey: @"good"];
  }
  if (self.hasLate) {
    [dictionary setObject: [NSNumber numberWithInteger:self.late] forKey: @"late"];
  }
  if (self.hasLost) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lost] forKey: @"lost"];
  }
  if (self.hasResync) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resync] forKey: @"resync"];
  }
  if (self.hasUdpPackets) {
    [dictionary setObject: [NSNumber numberWithInteger:self.udpPackets] forKey: @"udpPackets"];
  }
  if (self.hasTcpPackets) {
    [dictionary setObject: [NSNumber numberWithInteger:self.tcpPackets] forKey: @"tcpPackets"];
  }
  if (self.hasUdpPingAvg) {
    [dictionary setObject: [NSNumber numberWithFloat:self.udpPingAvg] forKey: @"udpPingAvg"];
  }
  if (self.hasUdpPingVar) {
    [dictionary setObject: [NSNumber numberWithFloat:self.udpPingVar] forKey: @"udpPingVar"];
  }
  if (self.hasTcpPingAvg) {
    [dictionary setObject: [NSNumber numberWithFloat:self.tcpPingAvg] forKey: @"tcpPingAvg"];
  }
  if (self.hasTcpPingVar) {
    [dictionary setObject: [NSNumber numberWithFloat:self.tcpPingVar] forKey: @"tcpPingVar"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPPing class]]) {
    return NO;
  }
  MPPing *otherMessage = other;
  return
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasGood == otherMessage.hasGood &&
      (!self.hasGood || self.good == otherMessage.good) &&
      self.hasLate == otherMessage.hasLate &&
      (!self.hasLate || self.late == otherMessage.late) &&
      self.hasLost == otherMessage.hasLost &&
      (!self.hasLost || self.lost == otherMessage.lost) &&
      self.hasResync == otherMessage.hasResync &&
      (!self.hasResync || self.resync == otherMessage.resync) &&
      self.hasUdpPackets == otherMessage.hasUdpPackets &&
      (!self.hasUdpPackets || self.udpPackets == otherMessage.udpPackets) &&
      self.hasTcpPackets == otherMessage.hasTcpPackets &&
      (!self.hasTcpPackets || self.tcpPackets == otherMessage.tcpPackets) &&
      self.hasUdpPingAvg == otherMessage.hasUdpPingAvg &&
      (!self.hasUdpPingAvg || self.udpPingAvg == otherMessage.udpPingAvg) &&
      self.hasUdpPingVar == otherMessage.hasUdpPingVar &&
      (!self.hasUdpPingVar || self.udpPingVar == otherMessage.udpPingVar) &&
      self.hasTcpPingAvg == otherMessage.hasTcpPingAvg &&
      (!self.hasTcpPingAvg || self.tcpPingAvg == otherMessage.tcpPingAvg) &&
      self.hasTcpPingVar == otherMessage.hasTcpPingVar &&
      (!self.hasTcpPingVar || self.tcpPingVar == otherMessage.tcpPingVar) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasGood) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.good] hash];
  }
  if (self.hasLate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.late] hash];
  }
  if (self.hasLost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lost] hash];
  }
  if (self.hasResync) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resync] hash];
  }
  if (self.hasUdpPackets) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.udpPackets] hash];
  }
  if (self.hasTcpPackets) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tcpPackets] hash];
  }
  if (self.hasUdpPingAvg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.udpPingAvg] hash];
  }
  if (self.hasUdpPingVar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.udpPingVar] hash];
  }
  if (self.hasTcpPingAvg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.tcpPingAvg] hash];
  }
  if (self.hasTcpPingVar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.tcpPingVar] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPPingBuilder()
@property (strong) MPPing* resultPing;
@end

@implementation MPPingBuilder
@synthesize resultPing;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPing = [[MPPing alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPing;
}
- (MPPingBuilder*) clear {
  self.resultPing = [[MPPing alloc] init];
  return self;
}
- (MPPingBuilder*) clone {
  return [MPPing builderWithPrototype:resultPing];
}
- (MPPing*) defaultInstance {
  return [MPPing defaultInstance];
}
- (MPPing*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPPing*) buildPartial {
  MPPing* returnMe = resultPing;
  self.resultPing = nil;
  return returnMe;
}
- (MPPingBuilder*) mergeFrom:(MPPing*) other {
  if (other == [MPPing defaultInstance]) {
    return self;
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasGood) {
    [self setGood:other.good];
  }
  if (other.hasLate) {
    [self setLate:other.late];
  }
  if (other.hasLost) {
    [self setLost:other.lost];
  }
  if (other.hasResync) {
    [self setResync:other.resync];
  }
  if (other.hasUdpPackets) {
    [self setUdpPackets:other.udpPackets];
  }
  if (other.hasTcpPackets) {
    [self setTcpPackets:other.tcpPackets];
  }
  if (other.hasUdpPingAvg) {
    [self setUdpPingAvg:other.udpPingAvg];
  }
  if (other.hasUdpPingVar) {
    [self setUdpPingVar:other.udpPingVar];
  }
  if (other.hasTcpPingAvg) {
    [self setTcpPingAvg:other.tcpPingAvg];
  }
  if (other.hasTcpPingVar) {
    [self setTcpPingVar:other.tcpPingVar];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPPingBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPPingBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTimestamp:[input readUInt64]];
        break;
      }
      case 16: {
        [self setGood:[input readUInt32]];
        break;
      }
      case 24: {
        [self setLate:[input readUInt32]];
        break;
      }
      case 32: {
        [self setLost:[input readUInt32]];
        break;
      }
      case 40: {
        [self setResync:[input readUInt32]];
        break;
      }
      case 48: {
        [self setUdpPackets:[input readUInt32]];
        break;
      }
      case 56: {
        [self setTcpPackets:[input readUInt32]];
        break;
      }
      case 69: {
        [self setUdpPingAvg:[input readFloat]];
        break;
      }
      case 77: {
        [self setUdpPingVar:[input readFloat]];
        break;
      }
      case 85: {
        [self setTcpPingAvg:[input readFloat]];
        break;
      }
      case 93: {
        [self setTcpPingVar:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasTimestamp {
  return resultPing.hasTimestamp;
}
- (UInt64) timestamp {
  return resultPing.timestamp;
}
- (MPPingBuilder*) setTimestamp:(UInt64) value {
  resultPing.hasTimestamp = YES;
  resultPing.timestamp = value;
  return self;
}
- (MPPingBuilder*) clearTimestamp {
  resultPing.hasTimestamp = NO;
  resultPing.timestamp = 0L;
  return self;
}
- (BOOL) hasGood {
  return resultPing.hasGood;
}
- (UInt32) good {
  return resultPing.good;
}
- (MPPingBuilder*) setGood:(UInt32) value {
  resultPing.hasGood = YES;
  resultPing.good = value;
  return self;
}
- (MPPingBuilder*) clearGood {
  resultPing.hasGood = NO;
  resultPing.good = 0;
  return self;
}
- (BOOL) hasLate {
  return resultPing.hasLate;
}
- (UInt32) late {
  return resultPing.late;
}
- (MPPingBuilder*) setLate:(UInt32) value {
  resultPing.hasLate = YES;
  resultPing.late = value;
  return self;
}
- (MPPingBuilder*) clearLate {
  resultPing.hasLate = NO;
  resultPing.late = 0;
  return self;
}
- (BOOL) hasLost {
  return resultPing.hasLost;
}
- (UInt32) lost {
  return resultPing.lost;
}
- (MPPingBuilder*) setLost:(UInt32) value {
  resultPing.hasLost = YES;
  resultPing.lost = value;
  return self;
}
- (MPPingBuilder*) clearLost {
  resultPing.hasLost = NO;
  resultPing.lost = 0;
  return self;
}
- (BOOL) hasResync {
  return resultPing.hasResync;
}
- (UInt32) resync {
  return resultPing.resync;
}
- (MPPingBuilder*) setResync:(UInt32) value {
  resultPing.hasResync = YES;
  resultPing.resync = value;
  return self;
}
- (MPPingBuilder*) clearResync {
  resultPing.hasResync = NO;
  resultPing.resync = 0;
  return self;
}
- (BOOL) hasUdpPackets {
  return resultPing.hasUdpPackets;
}
- (UInt32) udpPackets {
  return resultPing.udpPackets;
}
- (MPPingBuilder*) setUdpPackets:(UInt32) value {
  resultPing.hasUdpPackets = YES;
  resultPing.udpPackets = value;
  return self;
}
- (MPPingBuilder*) clearUdpPackets {
  resultPing.hasUdpPackets = NO;
  resultPing.udpPackets = 0;
  return self;
}
- (BOOL) hasTcpPackets {
  return resultPing.hasTcpPackets;
}
- (UInt32) tcpPackets {
  return resultPing.tcpPackets;
}
- (MPPingBuilder*) setTcpPackets:(UInt32) value {
  resultPing.hasTcpPackets = YES;
  resultPing.tcpPackets = value;
  return self;
}
- (MPPingBuilder*) clearTcpPackets {
  resultPing.hasTcpPackets = NO;
  resultPing.tcpPackets = 0;
  return self;
}
- (BOOL) hasUdpPingAvg {
  return resultPing.hasUdpPingAvg;
}
- (Float32) udpPingAvg {
  return resultPing.udpPingAvg;
}
- (MPPingBuilder*) setUdpPingAvg:(Float32) value {
  resultPing.hasUdpPingAvg = YES;
  resultPing.udpPingAvg = value;
  return self;
}
- (MPPingBuilder*) clearUdpPingAvg {
  resultPing.hasUdpPingAvg = NO;
  resultPing.udpPingAvg = 0;
  return self;
}
- (BOOL) hasUdpPingVar {
  return resultPing.hasUdpPingVar;
}
- (Float32) udpPingVar {
  return resultPing.udpPingVar;
}
- (MPPingBuilder*) setUdpPingVar:(Float32) value {
  resultPing.hasUdpPingVar = YES;
  resultPing.udpPingVar = value;
  return self;
}
- (MPPingBuilder*) clearUdpPingVar {
  resultPing.hasUdpPingVar = NO;
  resultPing.udpPingVar = 0;
  return self;
}
- (BOOL) hasTcpPingAvg {
  return resultPing.hasTcpPingAvg;
}
- (Float32) tcpPingAvg {
  return resultPing.tcpPingAvg;
}
- (MPPingBuilder*) setTcpPingAvg:(Float32) value {
  resultPing.hasTcpPingAvg = YES;
  resultPing.tcpPingAvg = value;
  return self;
}
- (MPPingBuilder*) clearTcpPingAvg {
  resultPing.hasTcpPingAvg = NO;
  resultPing.tcpPingAvg = 0;
  return self;
}
- (BOOL) hasTcpPingVar {
  return resultPing.hasTcpPingVar;
}
- (Float32) tcpPingVar {
  return resultPing.tcpPingVar;
}
- (MPPingBuilder*) setTcpPingVar:(Float32) value {
  resultPing.hasTcpPingVar = YES;
  resultPing.tcpPingVar = value;
  return self;
}
- (MPPingBuilder*) clearTcpPingVar {
  resultPing.hasTcpPingVar = NO;
  resultPing.tcpPingVar = 0;
  return self;
}
@end

@interface MPReject ()
@property MPRejectRejectType type;
@property (strong) NSString* reason;
@end

@implementation MPReject

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = MPRejectRejectTypeNone;
    self.reason = @"";
  }
  return self;
}
static MPReject* defaultMPRejectInstance = nil;
+ (void) initialize {
  if (self == [MPReject class]) {
    defaultMPRejectInstance = [[MPReject alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPRejectInstance;
}
- (instancetype) defaultInstance {
  return defaultMPRejectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasReason) {
    [output writeString:2 value:self.reason];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasReason) {
    size_ += computeStringSize(2, self.reason);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPReject*) parseFromData:(NSData*) data {
  return (MPReject*)[[[MPReject builder] mergeFromData:data] build];
}
+ (MPReject*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPReject*)[[[MPReject builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPReject*) parseFromInputStream:(NSInputStream*) input {
  return (MPReject*)[[[MPReject builder] mergeFromInputStream:input] build];
}
+ (MPReject*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPReject*)[[[MPReject builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPReject*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPReject*)[[[MPReject builder] mergeFromCodedInputStream:input] build];
}
+ (MPReject*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPReject*)[[[MPReject builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPRejectBuilder*) builder {
  return [[MPRejectBuilder alloc] init];
}
+ (MPRejectBuilder*) builderWithPrototype:(MPReject*) prototype {
  return [[MPReject builder] mergeFrom:prototype];
}
- (MPRejectBuilder*) builder {
  return [MPReject builder];
}
- (MPRejectBuilder*) toBuilder {
  return [MPReject builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromMPRejectRejectType(self.type)];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPReject class]]) {
    return NO;
  }
  MPReject *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL MPRejectRejectTypeIsValidValue(MPRejectRejectType value) {
  switch (value) {
    case MPRejectRejectTypeNone:
    case MPRejectRejectTypeWrongVersion:
    case MPRejectRejectTypeInvalidUsername:
    case MPRejectRejectTypeWrongUserPw:
    case MPRejectRejectTypeWrongServerPw:
    case MPRejectRejectTypeUsernameInUse:
    case MPRejectRejectTypeServerFull:
    case MPRejectRejectTypeNoCertificate:
    case MPRejectRejectTypeAuthenticatorFail:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromMPRejectRejectType(MPRejectRejectType value) {
  switch (value) {
    case MPRejectRejectTypeNone:
      return @"MPRejectRejectTypeNone";
    case MPRejectRejectTypeWrongVersion:
      return @"MPRejectRejectTypeWrongVersion";
    case MPRejectRejectTypeInvalidUsername:
      return @"MPRejectRejectTypeInvalidUsername";
    case MPRejectRejectTypeWrongUserPw:
      return @"MPRejectRejectTypeWrongUserPw";
    case MPRejectRejectTypeWrongServerPw:
      return @"MPRejectRejectTypeWrongServerPw";
    case MPRejectRejectTypeUsernameInUse:
      return @"MPRejectRejectTypeUsernameInUse";
    case MPRejectRejectTypeServerFull:
      return @"MPRejectRejectTypeServerFull";
    case MPRejectRejectTypeNoCertificate:
      return @"MPRejectRejectTypeNoCertificate";
    case MPRejectRejectTypeAuthenticatorFail:
      return @"MPRejectRejectTypeAuthenticatorFail";
    default:
      return nil;
  }
}

@interface MPRejectBuilder()
@property (strong) MPReject* resultReject;
@end

@implementation MPRejectBuilder
@synthesize resultReject;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReject = [[MPReject alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReject;
}
- (MPRejectBuilder*) clear {
  self.resultReject = [[MPReject alloc] init];
  return self;
}
- (MPRejectBuilder*) clone {
  return [MPReject builderWithPrototype:resultReject];
}
- (MPReject*) defaultInstance {
  return [MPReject defaultInstance];
}
- (MPReject*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPReject*) buildPartial {
  MPReject* returnMe = resultReject;
  self.resultReject = nil;
  return returnMe;
}
- (MPRejectBuilder*) mergeFrom:(MPReject*) other {
  if (other == [MPReject defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPRejectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPRejectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        MPRejectRejectType value = (MPRejectRejectType)[input readEnum];
        if (MPRejectRejectTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setReason:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultReject.hasType;
}
- (MPRejectRejectType) type {
  return resultReject.type;
}
- (MPRejectBuilder*) setType:(MPRejectRejectType) value {
  resultReject.hasType = YES;
  resultReject.type = value;
  return self;
}
- (MPRejectBuilder*) clearType {
  resultReject.hasType = NO;
  resultReject.type = MPRejectRejectTypeNone;
  return self;
}
- (BOOL) hasReason {
  return resultReject.hasReason;
}
- (NSString*) reason {
  return resultReject.reason;
}
- (MPRejectBuilder*) setReason:(NSString*) value {
  resultReject.hasReason = YES;
  resultReject.reason = value;
  return self;
}
- (MPRejectBuilder*) clearReason {
  resultReject.hasReason = NO;
  resultReject.reason = @"";
  return self;
}
@end

@interface MPServerSync ()
@property UInt32 session;
@property UInt32 maxBandwidth;
@property (strong) NSString* welcomeText;
@property UInt64 permissions;
@end

@implementation MPServerSync

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) _value_ {
  hasSession_ = !!_value_;
}
@synthesize session;
- (BOOL) hasMaxBandwidth {
  return !!hasMaxBandwidth_;
}
- (void) setHasMaxBandwidth:(BOOL) _value_ {
  hasMaxBandwidth_ = !!_value_;
}
@synthesize maxBandwidth;
- (BOOL) hasWelcomeText {
  return !!hasWelcomeText_;
}
- (void) setHasWelcomeText:(BOOL) _value_ {
  hasWelcomeText_ = !!_value_;
}
@synthesize welcomeText;
- (BOOL) hasPermissions {
  return !!hasPermissions_;
}
- (void) setHasPermissions:(BOOL) _value_ {
  hasPermissions_ = !!_value_;
}
@synthesize permissions;
- (instancetype) init {
  if ((self = [super init])) {
    self.session = 0;
    self.maxBandwidth = 0;
    self.welcomeText = @"";
    self.permissions = 0L;
  }
  return self;
}
static MPServerSync* defaultMPServerSyncInstance = nil;
+ (void) initialize {
  if (self == [MPServerSync class]) {
    defaultMPServerSyncInstance = [[MPServerSync alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPServerSyncInstance;
}
- (instancetype) defaultInstance {
  return defaultMPServerSyncInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasMaxBandwidth) {
    [output writeUInt32:2 value:self.maxBandwidth];
  }
  if (self.hasWelcomeText) {
    [output writeString:3 value:self.welcomeText];
  }
  if (self.hasPermissions) {
    [output writeUInt64:4 value:self.permissions];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSession) {
    size_ += computeUInt32Size(1, self.session);
  }
  if (self.hasMaxBandwidth) {
    size_ += computeUInt32Size(2, self.maxBandwidth);
  }
  if (self.hasWelcomeText) {
    size_ += computeStringSize(3, self.welcomeText);
  }
  if (self.hasPermissions) {
    size_ += computeUInt64Size(4, self.permissions);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPServerSync*) parseFromData:(NSData*) data {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromData:data] build];
}
+ (MPServerSync*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPServerSync*) parseFromInputStream:(NSInputStream*) input {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromInputStream:input] build];
}
+ (MPServerSync*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPServerSync*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromCodedInputStream:input] build];
}
+ (MPServerSync*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerSync*)[[[MPServerSync builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPServerSyncBuilder*) builder {
  return [[MPServerSyncBuilder alloc] init];
}
+ (MPServerSyncBuilder*) builderWithPrototype:(MPServerSync*) prototype {
  return [[MPServerSync builder] mergeFrom:prototype];
}
- (MPServerSyncBuilder*) builder {
  return [MPServerSync builder];
}
- (MPServerSyncBuilder*) toBuilder {
  return [MPServerSync builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInteger:self.session]];
  }
  if (self.hasMaxBandwidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxBandwidth", [NSNumber numberWithInteger:self.maxBandwidth]];
  }
  if (self.hasWelcomeText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"welcomeText", self.welcomeText];
  }
  if (self.hasPermissions) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permissions", [NSNumber numberWithLongLong:self.permissions]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSession) {
    [dictionary setObject: [NSNumber numberWithInteger:self.session] forKey: @"session"];
  }
  if (self.hasMaxBandwidth) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxBandwidth] forKey: @"maxBandwidth"];
  }
  if (self.hasWelcomeText) {
    [dictionary setObject: self.welcomeText forKey: @"welcomeText"];
  }
  if (self.hasPermissions) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.permissions] forKey: @"permissions"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPServerSync class]]) {
    return NO;
  }
  MPServerSync *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasMaxBandwidth == otherMessage.hasMaxBandwidth &&
      (!self.hasMaxBandwidth || self.maxBandwidth == otherMessage.maxBandwidth) &&
      self.hasWelcomeText == otherMessage.hasWelcomeText &&
      (!self.hasWelcomeText || [self.welcomeText isEqual:otherMessage.welcomeText]) &&
      self.hasPermissions == otherMessage.hasPermissions &&
      (!self.hasPermissions || self.permissions == otherMessage.permissions) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.session] hash];
  }
  if (self.hasMaxBandwidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxBandwidth] hash];
  }
  if (self.hasWelcomeText) {
    hashCode = hashCode * 31 + [self.welcomeText hash];
  }
  if (self.hasPermissions) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.permissions] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPServerSyncBuilder()
@property (strong) MPServerSync* resultServerSync;
@end

@implementation MPServerSyncBuilder
@synthesize resultServerSync;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultServerSync = [[MPServerSync alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultServerSync;
}
- (MPServerSyncBuilder*) clear {
  self.resultServerSync = [[MPServerSync alloc] init];
  return self;
}
- (MPServerSyncBuilder*) clone {
  return [MPServerSync builderWithPrototype:resultServerSync];
}
- (MPServerSync*) defaultInstance {
  return [MPServerSync defaultInstance];
}
- (MPServerSync*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPServerSync*) buildPartial {
  MPServerSync* returnMe = resultServerSync;
  self.resultServerSync = nil;
  return returnMe;
}
- (MPServerSyncBuilder*) mergeFrom:(MPServerSync*) other {
  if (other == [MPServerSync defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasMaxBandwidth) {
    [self setMaxBandwidth:other.maxBandwidth];
  }
  if (other.hasWelcomeText) {
    [self setWelcomeText:other.welcomeText];
  }
  if (other.hasPermissions) {
    [self setPermissions:other.permissions];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPServerSyncBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPServerSyncBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setMaxBandwidth:[input readUInt32]];
        break;
      }
      case 26: {
        [self setWelcomeText:[input readString]];
        break;
      }
      case 32: {
        [self setPermissions:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return resultServerSync.hasSession;
}
- (UInt32) session {
  return resultServerSync.session;
}
- (MPServerSyncBuilder*) setSession:(UInt32) value {
  resultServerSync.hasSession = YES;
  resultServerSync.session = value;
  return self;
}
- (MPServerSyncBuilder*) clearSession {
  resultServerSync.hasSession = NO;
  resultServerSync.session = 0;
  return self;
}
- (BOOL) hasMaxBandwidth {
  return resultServerSync.hasMaxBandwidth;
}
- (UInt32) maxBandwidth {
  return resultServerSync.maxBandwidth;
}
- (MPServerSyncBuilder*) setMaxBandwidth:(UInt32) value {
  resultServerSync.hasMaxBandwidth = YES;
  resultServerSync.maxBandwidth = value;
  return self;
}
- (MPServerSyncBuilder*) clearMaxBandwidth {
  resultServerSync.hasMaxBandwidth = NO;
  resultServerSync.maxBandwidth = 0;
  return self;
}
- (BOOL) hasWelcomeText {
  return resultServerSync.hasWelcomeText;
}
- (NSString*) welcomeText {
  return resultServerSync.welcomeText;
}
- (MPServerSyncBuilder*) setWelcomeText:(NSString*) value {
  resultServerSync.hasWelcomeText = YES;
  resultServerSync.welcomeText = value;
  return self;
}
- (MPServerSyncBuilder*) clearWelcomeText {
  resultServerSync.hasWelcomeText = NO;
  resultServerSync.welcomeText = @"";
  return self;
}
- (BOOL) hasPermissions {
  return resultServerSync.hasPermissions;
}
- (UInt64) permissions {
  return resultServerSync.permissions;
}
- (MPServerSyncBuilder*) setPermissions:(UInt64) value {
  resultServerSync.hasPermissions = YES;
  resultServerSync.permissions = value;
  return self;
}
- (MPServerSyncBuilder*) clearPermissions {
  resultServerSync.hasPermissions = NO;
  resultServerSync.permissions = 0L;
  return self;
}
@end

@interface MPChannelRemove ()
@property UInt32 channelId;
@end

@implementation MPChannelRemove

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) _value_ {
  hasChannelId_ = !!_value_;
}
@synthesize channelId;
- (instancetype) init {
  if ((self = [super init])) {
    self.channelId = 0;
  }
  return self;
}
static MPChannelRemove* defaultMPChannelRemoveInstance = nil;
+ (void) initialize {
  if (self == [MPChannelRemove class]) {
    defaultMPChannelRemoveInstance = [[MPChannelRemove alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPChannelRemoveInstance;
}
- (instancetype) defaultInstance {
  return defaultMPChannelRemoveInstance;
}
- (BOOL) isInitialized {
  if (!self.hasChannelId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeUInt32:1 value:self.channelId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelId) {
    size_ += computeUInt32Size(1, self.channelId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPChannelRemove*) parseFromData:(NSData*) data {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromData:data] build];
}
+ (MPChannelRemove*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPChannelRemove*) parseFromInputStream:(NSInputStream*) input {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromInputStream:input] build];
}
+ (MPChannelRemove*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPChannelRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromCodedInputStream:input] build];
}
+ (MPChannelRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelRemove*)[[[MPChannelRemove builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPChannelRemoveBuilder*) builder {
  return [[MPChannelRemoveBuilder alloc] init];
}
+ (MPChannelRemoveBuilder*) builderWithPrototype:(MPChannelRemove*) prototype {
  return [[MPChannelRemove builder] mergeFrom:prototype];
}
- (MPChannelRemoveBuilder*) builder {
  return [MPChannelRemove builder];
}
- (MPChannelRemoveBuilder*) toBuilder {
  return [MPChannelRemove builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInteger:self.channelId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChannelId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.channelId] forKey: @"channelId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPChannelRemove class]]) {
    return NO;
  }
  MPChannelRemove *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.channelId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPChannelRemoveBuilder()
@property (strong) MPChannelRemove* resultChannelRemove;
@end

@implementation MPChannelRemoveBuilder
@synthesize resultChannelRemove;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChannelRemove = [[MPChannelRemove alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChannelRemove;
}
- (MPChannelRemoveBuilder*) clear {
  self.resultChannelRemove = [[MPChannelRemove alloc] init];
  return self;
}
- (MPChannelRemoveBuilder*) clone {
  return [MPChannelRemove builderWithPrototype:resultChannelRemove];
}
- (MPChannelRemove*) defaultInstance {
  return [MPChannelRemove defaultInstance];
}
- (MPChannelRemove*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPChannelRemove*) buildPartial {
  MPChannelRemove* returnMe = resultChannelRemove;
  self.resultChannelRemove = nil;
  return returnMe;
}
- (MPChannelRemoveBuilder*) mergeFrom:(MPChannelRemove*) other {
  if (other == [MPChannelRemove defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPChannelRemoveBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPChannelRemoveBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChannelId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return resultChannelRemove.hasChannelId;
}
- (UInt32) channelId {
  return resultChannelRemove.channelId;
}
- (MPChannelRemoveBuilder*) setChannelId:(UInt32) value {
  resultChannelRemove.hasChannelId = YES;
  resultChannelRemove.channelId = value;
  return self;
}
- (MPChannelRemoveBuilder*) clearChannelId {
  resultChannelRemove.hasChannelId = NO;
  resultChannelRemove.channelId = 0;
  return self;
}
@end

@interface MPChannelState ()
@property UInt32 channelId;
@property UInt32 parent;
@property (strong) NSString* name;
@property (strong) PBAppendableArray * linksArray;
@property (strong) NSString* pb_description;
@property (strong) PBAppendableArray * linksAddArray;
@property (strong) PBAppendableArray * linksRemoveArray;
@property BOOL temporary;
@property SInt32 position;
@property (strong) NSData* descriptionHash;
@property UInt32 maxUsers;
@property BOOL isEnterRestricted;
@property BOOL canEnter;
@end

@implementation MPChannelState

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) _value_ {
  hasChannelId_ = !!_value_;
}
@synthesize channelId;
- (BOOL) hasParent {
  return !!hasParent_;
}
- (void) setHasParent:(BOOL) _value_ {
  hasParent_ = !!_value_;
}
@synthesize parent;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
@synthesize linksArray;
@dynamic links;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) _value_ {
  hasDescription_ = !!_value_;
}
@synthesize pb_description;
@synthesize linksAddArray;
@dynamic linksAdd;
@synthesize linksRemoveArray;
@dynamic linksRemove;
- (BOOL) hasTemporary {
  return !!hasTemporary_;
}
- (void) setHasTemporary:(BOOL) _value_ {
  hasTemporary_ = !!_value_;
}
- (BOOL) temporary {
  return !!temporary_;
}
- (void) setTemporary:(BOOL) _value_ {
  temporary_ = !!_value_;
}
- (BOOL) hasPosition {
  return !!hasPosition_;
}
- (void) setHasPosition:(BOOL) _value_ {
  hasPosition_ = !!_value_;
}
@synthesize position;
- (BOOL) hasDescriptionHash {
  return !!hasDescriptionHash_;
}
- (void) setHasDescriptionHash:(BOOL) _value_ {
  hasDescriptionHash_ = !!_value_;
}
@synthesize descriptionHash;
- (BOOL) hasMaxUsers {
  return !!hasMaxUsers_;
}
- (void) setHasMaxUsers:(BOOL) _value_ {
  hasMaxUsers_ = !!_value_;
}
@synthesize maxUsers;
- (BOOL) hasIsEnterRestricted {
  return !!hasIsEnterRestricted_;
}
- (void) setHasIsEnterRestricted:(BOOL) _value_ {
  hasIsEnterRestricted_ = !!_value_;
}
- (BOOL) isEnterRestricted {
  return !!isEnterRestricted_;
}
- (void) setIsEnterRestricted:(BOOL) _value_ {
  isEnterRestricted_ = !!_value_;
}
- (BOOL) hasCanEnter {
  return !!hasCanEnter_;
}
- (void) setHasCanEnter:(BOOL) _value_ {
  hasCanEnter_ = !!_value_;
}
- (BOOL) canEnter {
  return !!canEnter_;
}
- (void) setCanEnter:(BOOL) _value_ {
  canEnter_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.channelId = 0;
    self.parent = 0;
    self.name = @"";
    self.pb_description = @"";
    self.temporary = NO;
    self.position = 0;
    self.descriptionHash = [NSData data];
    self.maxUsers = 0;
    self.isEnterRestricted = NO;
    self.canEnter = NO;
  }
  return self;
}
static MPChannelState* defaultMPChannelStateInstance = nil;
+ (void) initialize {
  if (self == [MPChannelState class]) {
    defaultMPChannelStateInstance = [[MPChannelState alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPChannelStateInstance;
}
- (instancetype) defaultInstance {
  return defaultMPChannelStateInstance;
}
- (PBArray *)links {
  return linksArray;
}
- (UInt32)linksAtIndex:(NSUInteger)index {
  return [linksArray uint32AtIndex:index];
}
- (PBArray *)linksAdd {
  return linksAddArray;
}
- (UInt32)linksAddAtIndex:(NSUInteger)index {
  return [linksAddArray uint32AtIndex:index];
}
- (PBArray *)linksRemove {
  return linksRemoveArray;
}
- (UInt32)linksRemoveAtIndex:(NSUInteger)index {
  return [linksRemoveArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeUInt32:1 value:self.channelId];
  }
  if (self.hasParent) {
    [output writeUInt32:2 value:self.parent];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  const NSUInteger linksArrayCount = self.linksArray.count;
  if (linksArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.linksArray.data;
    for (NSUInteger i = 0; i < linksArrayCount; ++i) {
      [output writeUInt32:4 value:values[i]];
    }
  }
  if (self.hasDescription) {
    [output writeString:5 value:self.pb_description];
  }
  const NSUInteger linksAddArrayCount = self.linksAddArray.count;
  if (linksAddArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.linksAddArray.data;
    for (NSUInteger i = 0; i < linksAddArrayCount; ++i) {
      [output writeUInt32:6 value:values[i]];
    }
  }
  const NSUInteger linksRemoveArrayCount = self.linksRemoveArray.count;
  if (linksRemoveArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.linksRemoveArray.data;
    for (NSUInteger i = 0; i < linksRemoveArrayCount; ++i) {
      [output writeUInt32:7 value:values[i]];
    }
  }
  if (self.hasTemporary) {
    [output writeBool:8 value:self.temporary];
  }
  if (self.hasPosition) {
    [output writeInt32:9 value:self.position];
  }
  if (self.hasDescriptionHash) {
    [output writeData:10 value:self.descriptionHash];
  }
  if (self.hasMaxUsers) {
    [output writeUInt32:11 value:self.maxUsers];
  }
  if (self.hasIsEnterRestricted) {
    [output writeBool:12 value:self.isEnterRestricted];
  }
  if (self.hasCanEnter) {
    [output writeBool:13 value:self.canEnter];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelId) {
    size_ += computeUInt32Size(1, self.channelId);
  }
  if (self.hasParent) {
    size_ += computeUInt32Size(2, self.parent);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.linksArray.count;
    const UInt32 *values = (const UInt32 *)self.linksArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(5, self.pb_description);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.linksAddArray.count;
    const UInt32 *values = (const UInt32 *)self.linksAddArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.linksRemoveArray.count;
    const UInt32 *values = (const UInt32 *)self.linksRemoveArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasTemporary) {
    size_ += computeBoolSize(8, self.temporary);
  }
  if (self.hasPosition) {
    size_ += computeInt32Size(9, self.position);
  }
  if (self.hasDescriptionHash) {
    size_ += computeDataSize(10, self.descriptionHash);
  }
  if (self.hasMaxUsers) {
    size_ += computeUInt32Size(11, self.maxUsers);
  }
  if (self.hasIsEnterRestricted) {
    size_ += computeBoolSize(12, self.isEnterRestricted);
  }
  if (self.hasCanEnter) {
    size_ += computeBoolSize(13, self.canEnter);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPChannelState*) parseFromData:(NSData*) data {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromData:data] build];
}
+ (MPChannelState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPChannelState*) parseFromInputStream:(NSInputStream*) input {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromInputStream:input] build];
}
+ (MPChannelState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPChannelState*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromCodedInputStream:input] build];
}
+ (MPChannelState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPChannelState*)[[[MPChannelState builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPChannelStateBuilder*) builder {
  return [[MPChannelStateBuilder alloc] init];
}
+ (MPChannelStateBuilder*) builderWithPrototype:(MPChannelState*) prototype {
  return [[MPChannelState builder] mergeFrom:prototype];
}
- (MPChannelStateBuilder*) builder {
  return [MPChannelState builder];
}
- (MPChannelStateBuilder*) toBuilder {
  return [MPChannelState builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInteger:self.channelId]];
  }
  if (self.hasParent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parent", [NSNumber numberWithInteger:self.parent]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.linksArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"links", obj];
  }];
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_description", self.pb_description];
  }
  [self.linksAddArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"linksAdd", obj];
  }];
  [self.linksRemoveArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"linksRemove", obj];
  }];
  if (self.hasTemporary) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temporary", [NSNumber numberWithBool:self.temporary]];
  }
  if (self.hasPosition) {
    [output appendFormat:@"%@%@: %@\n", indent, @"position", [NSNumber numberWithInteger:self.position]];
  }
  if (self.hasDescriptionHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"descriptionHash", self.descriptionHash];
  }
  if (self.hasMaxUsers) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxUsers", [NSNumber numberWithInteger:self.maxUsers]];
  }
  if (self.hasIsEnterRestricted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isEnterRestricted", [NSNumber numberWithBool:self.isEnterRestricted]];
  }
  if (self.hasCanEnter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canEnter", [NSNumber numberWithBool:self.canEnter]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChannelId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.channelId] forKey: @"channelId"];
  }
  if (self.hasParent) {
    [dictionary setObject: [NSNumber numberWithInteger:self.parent] forKey: @"parent"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  NSMutableArray * linksArrayArray = [NSMutableArray new];
  NSUInteger linksArrayCount=self.linksArray.count;
  for(int i=0;i<linksArrayCount;i++){
    [linksArrayArray addObject: @([self.linksArray uint32AtIndex:i])];
  }
  [dictionary setObject: linksArrayArray forKey: @"links"];
  if (self.hasDescription) {
    [dictionary setObject: self.pb_description forKey: @"pb_description"];
  }
  NSMutableArray * linksAddArrayArray = [NSMutableArray new];
  NSUInteger linksAddArrayCount=self.linksAddArray.count;
  for(int i=0;i<linksAddArrayCount;i++){
    [linksAddArrayArray addObject: @([self.linksAddArray uint32AtIndex:i])];
  }
  [dictionary setObject: linksAddArrayArray forKey: @"linksAdd"];
  NSMutableArray * linksRemoveArrayArray = [NSMutableArray new];
  NSUInteger linksRemoveArrayCount=self.linksRemoveArray.count;
  for(int i=0;i<linksRemoveArrayCount;i++){
    [linksRemoveArrayArray addObject: @([self.linksRemoveArray uint32AtIndex:i])];
  }
  [dictionary setObject: linksRemoveArrayArray forKey: @"linksRemove"];
  if (self.hasTemporary) {
    [dictionary setObject: [NSNumber numberWithBool:self.temporary] forKey: @"temporary"];
  }
  if (self.hasPosition) {
    [dictionary setObject: [NSNumber numberWithInteger:self.position] forKey: @"position"];
  }
  if (self.hasDescriptionHash) {
    [dictionary setObject: self.descriptionHash forKey: @"descriptionHash"];
  }
  if (self.hasMaxUsers) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxUsers] forKey: @"maxUsers"];
  }
  if (self.hasIsEnterRestricted) {
    [dictionary setObject: [NSNumber numberWithBool:self.isEnterRestricted] forKey: @"isEnterRestricted"];
  }
  if (self.hasCanEnter) {
    [dictionary setObject: [NSNumber numberWithBool:self.canEnter] forKey: @"canEnter"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPChannelState class]]) {
    return NO;
  }
  MPChannelState *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasParent == otherMessage.hasParent &&
      (!self.hasParent || self.parent == otherMessage.parent) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      [self.linksArray isEqualToArray:otherMessage.linksArray] &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.pb_description isEqual:otherMessage.pb_description]) &&
      [self.linksAddArray isEqualToArray:otherMessage.linksAddArray] &&
      [self.linksRemoveArray isEqualToArray:otherMessage.linksRemoveArray] &&
      self.hasTemporary == otherMessage.hasTemporary &&
      (!self.hasTemporary || self.temporary == otherMessage.temporary) &&
      self.hasPosition == otherMessage.hasPosition &&
      (!self.hasPosition || self.position == otherMessage.position) &&
      self.hasDescriptionHash == otherMessage.hasDescriptionHash &&
      (!self.hasDescriptionHash || [self.descriptionHash isEqual:otherMessage.descriptionHash]) &&
      self.hasMaxUsers == otherMessage.hasMaxUsers &&
      (!self.hasMaxUsers || self.maxUsers == otherMessage.maxUsers) &&
      self.hasIsEnterRestricted == otherMessage.hasIsEnterRestricted &&
      (!self.hasIsEnterRestricted || self.isEnterRestricted == otherMessage.isEnterRestricted) &&
      self.hasCanEnter == otherMessage.hasCanEnter &&
      (!self.hasCanEnter || self.canEnter == otherMessage.canEnter) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.channelId] hash];
  }
  if (self.hasParent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.parent] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  [self.linksArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.pb_description hash];
  }
  [self.linksAddArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.linksRemoveArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasTemporary) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.temporary] hash];
  }
  if (self.hasPosition) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.position] hash];
  }
  if (self.hasDescriptionHash) {
    hashCode = hashCode * 31 + [self.descriptionHash hash];
  }
  if (self.hasMaxUsers) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxUsers] hash];
  }
  if (self.hasIsEnterRestricted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isEnterRestricted] hash];
  }
  if (self.hasCanEnter) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.canEnter] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPChannelStateBuilder()
@property (strong) MPChannelState* resultChannelState;
@end

@implementation MPChannelStateBuilder
@synthesize resultChannelState;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChannelState = [[MPChannelState alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChannelState;
}
- (MPChannelStateBuilder*) clear {
  self.resultChannelState = [[MPChannelState alloc] init];
  return self;
}
- (MPChannelStateBuilder*) clone {
  return [MPChannelState builderWithPrototype:resultChannelState];
}
- (MPChannelState*) defaultInstance {
  return [MPChannelState defaultInstance];
}
- (MPChannelState*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPChannelState*) buildPartial {
  MPChannelState* returnMe = resultChannelState;
  self.resultChannelState = nil;
  return returnMe;
}
- (MPChannelStateBuilder*) mergeFrom:(MPChannelState*) other {
  if (other == [MPChannelState defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasParent) {
    [self setParent:other.parent];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.linksArray.count > 0) {
    if (resultChannelState.linksArray == nil) {
      resultChannelState.linksArray = [other.linksArray copy];
    } else {
      [resultChannelState.linksArray appendArray:other.linksArray];
    }
  }
  if (other.hasDescription) {
    [self setDescription:other.pb_description];
  }
  if (other.linksAddArray.count > 0) {
    if (resultChannelState.linksAddArray == nil) {
      resultChannelState.linksAddArray = [other.linksAddArray copy];
    } else {
      [resultChannelState.linksAddArray appendArray:other.linksAddArray];
    }
  }
  if (other.linksRemoveArray.count > 0) {
    if (resultChannelState.linksRemoveArray == nil) {
      resultChannelState.linksRemoveArray = [other.linksRemoveArray copy];
    } else {
      [resultChannelState.linksRemoveArray appendArray:other.linksRemoveArray];
    }
  }
  if (other.hasTemporary) {
    [self setTemporary:other.temporary];
  }
  if (other.hasPosition) {
    [self setPosition:other.position];
  }
  if (other.hasDescriptionHash) {
    [self setDescriptionHash:other.descriptionHash];
  }
  if (other.hasMaxUsers) {
    [self setMaxUsers:other.maxUsers];
  }
  if (other.hasIsEnterRestricted) {
    [self setIsEnterRestricted:other.isEnterRestricted];
  }
  if (other.hasCanEnter) {
    [self setCanEnter:other.canEnter];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPChannelStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPChannelStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setParent:[input readUInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self addLinks:[input readUInt32]];
        break;
      }
      case 42: {
        [self setDescription:[input readString]];
        break;
      }
      case 48: {
        [self addLinksAdd:[input readUInt32]];
        break;
      }
      case 56: {
        [self addLinksRemove:[input readUInt32]];
        break;
      }
      case 64: {
        [self setTemporary:[input readBool]];
        break;
      }
      case 72: {
        [self setPosition:[input readInt32]];
        break;
      }
      case 82: {
        [self setDescriptionHash:[input readData]];
        break;
      }
      case 88: {
        [self setMaxUsers:[input readUInt32]];
        break;
      }
      case 96: {
        [self setIsEnterRestricted:[input readBool]];
        break;
      }
      case 104: {
        [self setCanEnter:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return resultChannelState.hasChannelId;
}
- (UInt32) channelId {
  return resultChannelState.channelId;
}
- (MPChannelStateBuilder*) setChannelId:(UInt32) value {
  resultChannelState.hasChannelId = YES;
  resultChannelState.channelId = value;
  return self;
}
- (MPChannelStateBuilder*) clearChannelId {
  resultChannelState.hasChannelId = NO;
  resultChannelState.channelId = 0;
  return self;
}
- (BOOL) hasParent {
  return resultChannelState.hasParent;
}
- (UInt32) parent {
  return resultChannelState.parent;
}
- (MPChannelStateBuilder*) setParent:(UInt32) value {
  resultChannelState.hasParent = YES;
  resultChannelState.parent = value;
  return self;
}
- (MPChannelStateBuilder*) clearParent {
  resultChannelState.hasParent = NO;
  resultChannelState.parent = 0;
  return self;
}
- (BOOL) hasName {
  return resultChannelState.hasName;
}
- (NSString*) name {
  return resultChannelState.name;
}
- (MPChannelStateBuilder*) setName:(NSString*) value {
  resultChannelState.hasName = YES;
  resultChannelState.name = value;
  return self;
}
- (MPChannelStateBuilder*) clearName {
  resultChannelState.hasName = NO;
  resultChannelState.name = @"";
  return self;
}
- (PBAppendableArray *)links {
  return resultChannelState.linksArray;
}
- (UInt32)linksAtIndex:(NSUInteger)index {
  return [resultChannelState linksAtIndex:index];
}
- (MPChannelStateBuilder *)addLinks:(UInt32)value {
  if (resultChannelState.linksArray == nil) {
    resultChannelState.linksArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultChannelState.linksArray addUint32:value];
  return self;
}
- (MPChannelStateBuilder *)setLinksArray:(NSArray *)array {
  resultChannelState.linksArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelStateBuilder *)setLinksValues:(const UInt32 *)values count:(NSUInteger)count {
  resultChannelState.linksArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelStateBuilder *)clearLinks {
  resultChannelState.linksArray = nil;
  return self;
}
- (BOOL) hasDescription {
  return resultChannelState.hasDescription;
}
- (NSString*) pb_description {
  return resultChannelState.pb_description;
}
- (MPChannelStateBuilder*) setDescription:(NSString*) value {
  resultChannelState.hasDescription = YES;
  resultChannelState.pb_description = value;
  return self;
}
- (MPChannelStateBuilder*) clearDescription {
  resultChannelState.hasDescription = NO;
  resultChannelState.pb_description = @"";
  return self;
}
- (PBAppendableArray *)linksAdd {
  return resultChannelState.linksAddArray;
}
- (UInt32)linksAddAtIndex:(NSUInteger)index {
  return [resultChannelState linksAddAtIndex:index];
}
- (MPChannelStateBuilder *)addLinksAdd:(UInt32)value {
  if (resultChannelState.linksAddArray == nil) {
    resultChannelState.linksAddArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultChannelState.linksAddArray addUint32:value];
  return self;
}
- (MPChannelStateBuilder *)setLinksAddArray:(NSArray *)array {
  resultChannelState.linksAddArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelStateBuilder *)setLinksAddValues:(const UInt32 *)values count:(NSUInteger)count {
  resultChannelState.linksAddArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelStateBuilder *)clearLinksAdd {
  resultChannelState.linksAddArray = nil;
  return self;
}
- (PBAppendableArray *)linksRemove {
  return resultChannelState.linksRemoveArray;
}
- (UInt32)linksRemoveAtIndex:(NSUInteger)index {
  return [resultChannelState linksRemoveAtIndex:index];
}
- (MPChannelStateBuilder *)addLinksRemove:(UInt32)value {
  if (resultChannelState.linksRemoveArray == nil) {
    resultChannelState.linksRemoveArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultChannelState.linksRemoveArray addUint32:value];
  return self;
}
- (MPChannelStateBuilder *)setLinksRemoveArray:(NSArray *)array {
  resultChannelState.linksRemoveArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelStateBuilder *)setLinksRemoveValues:(const UInt32 *)values count:(NSUInteger)count {
  resultChannelState.linksRemoveArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPChannelStateBuilder *)clearLinksRemove {
  resultChannelState.linksRemoveArray = nil;
  return self;
}
- (BOOL) hasTemporary {
  return resultChannelState.hasTemporary;
}
- (BOOL) temporary {
  return resultChannelState.temporary;
}
- (MPChannelStateBuilder*) setTemporary:(BOOL) value {
  resultChannelState.hasTemporary = YES;
  resultChannelState.temporary = value;
  return self;
}
- (MPChannelStateBuilder*) clearTemporary {
  resultChannelState.hasTemporary = NO;
  resultChannelState.temporary = NO;
  return self;
}
- (BOOL) hasPosition {
  return resultChannelState.hasPosition;
}
- (SInt32) position {
  return resultChannelState.position;
}
- (MPChannelStateBuilder*) setPosition:(SInt32) value {
  resultChannelState.hasPosition = YES;
  resultChannelState.position = value;
  return self;
}
- (MPChannelStateBuilder*) clearPosition {
  resultChannelState.hasPosition = NO;
  resultChannelState.position = 0;
  return self;
}
- (BOOL) hasDescriptionHash {
  return resultChannelState.hasDescriptionHash;
}
- (NSData*) descriptionHash {
  return resultChannelState.descriptionHash;
}
- (MPChannelStateBuilder*) setDescriptionHash:(NSData*) value {
  resultChannelState.hasDescriptionHash = YES;
  resultChannelState.descriptionHash = value;
  return self;
}
- (MPChannelStateBuilder*) clearDescriptionHash {
  resultChannelState.hasDescriptionHash = NO;
  resultChannelState.descriptionHash = [NSData data];
  return self;
}
- (BOOL) hasMaxUsers {
  return resultChannelState.hasMaxUsers;
}
- (UInt32) maxUsers {
  return resultChannelState.maxUsers;
}
- (MPChannelStateBuilder*) setMaxUsers:(UInt32) value {
  resultChannelState.hasMaxUsers = YES;
  resultChannelState.maxUsers = value;
  return self;
}
- (MPChannelStateBuilder*) clearMaxUsers {
  resultChannelState.hasMaxUsers = NO;
  resultChannelState.maxUsers = 0;
  return self;
}
- (BOOL) hasIsEnterRestricted {
  return resultChannelState.hasIsEnterRestricted;
}
- (BOOL) isEnterRestricted {
  return resultChannelState.isEnterRestricted;
}
- (MPChannelStateBuilder*) setIsEnterRestricted:(BOOL) value {
  resultChannelState.hasIsEnterRestricted = YES;
  resultChannelState.isEnterRestricted = value;
  return self;
}
- (MPChannelStateBuilder*) clearIsEnterRestricted {
  resultChannelState.hasIsEnterRestricted = NO;
  resultChannelState.isEnterRestricted = NO;
  return self;
}
- (BOOL) hasCanEnter {
  return resultChannelState.hasCanEnter;
}
- (BOOL) canEnter {
  return resultChannelState.canEnter;
}
- (MPChannelStateBuilder*) setCanEnter:(BOOL) value {
  resultChannelState.hasCanEnter = YES;
  resultChannelState.canEnter = value;
  return self;
}
- (MPChannelStateBuilder*) clearCanEnter {
  resultChannelState.hasCanEnter = NO;
  resultChannelState.canEnter = NO;
  return self;
}
@end

@interface MPUserRemove ()
@property UInt32 session;
@property UInt32 actor;
@property (strong) NSString* reason;
@property BOOL ban;
@end

@implementation MPUserRemove

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) _value_ {
  hasSession_ = !!_value_;
}
@synthesize session;
- (BOOL) hasActor {
  return !!hasActor_;
}
- (void) setHasActor:(BOOL) _value_ {
  hasActor_ = !!_value_;
}
@synthesize actor;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (BOOL) hasBan {
  return !!hasBan_;
}
- (void) setHasBan:(BOOL) _value_ {
  hasBan_ = !!_value_;
}
- (BOOL) ban {
  return !!ban_;
}
- (void) setBan:(BOOL) _value_ {
  ban_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.session = 0;
    self.actor = 0;
    self.reason = @"";
    self.ban = NO;
  }
  return self;
}
static MPUserRemove* defaultMPUserRemoveInstance = nil;
+ (void) initialize {
  if (self == [MPUserRemove class]) {
    defaultMPUserRemoveInstance = [[MPUserRemove alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPUserRemoveInstance;
}
- (instancetype) defaultInstance {
  return defaultMPUserRemoveInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSession) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasActor) {
    [output writeUInt32:2 value:self.actor];
  }
  if (self.hasReason) {
    [output writeString:3 value:self.reason];
  }
  if (self.hasBan) {
    [output writeBool:4 value:self.ban];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSession) {
    size_ += computeUInt32Size(1, self.session);
  }
  if (self.hasActor) {
    size_ += computeUInt32Size(2, self.actor);
  }
  if (self.hasReason) {
    size_ += computeStringSize(3, self.reason);
  }
  if (self.hasBan) {
    size_ += computeBoolSize(4, self.ban);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPUserRemove*) parseFromData:(NSData*) data {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromData:data] build];
}
+ (MPUserRemove*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserRemove*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromInputStream:input] build];
}
+ (MPUserRemove*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserRemove*)[[[MPUserRemove builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserRemoveBuilder*) builder {
  return [[MPUserRemoveBuilder alloc] init];
}
+ (MPUserRemoveBuilder*) builderWithPrototype:(MPUserRemove*) prototype {
  return [[MPUserRemove builder] mergeFrom:prototype];
}
- (MPUserRemoveBuilder*) builder {
  return [MPUserRemove builder];
}
- (MPUserRemoveBuilder*) toBuilder {
  return [MPUserRemove builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInteger:self.session]];
  }
  if (self.hasActor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actor", [NSNumber numberWithInteger:self.actor]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasBan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ban", [NSNumber numberWithBool:self.ban]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSession) {
    [dictionary setObject: [NSNumber numberWithInteger:self.session] forKey: @"session"];
  }
  if (self.hasActor) {
    [dictionary setObject: [NSNumber numberWithInteger:self.actor] forKey: @"actor"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  if (self.hasBan) {
    [dictionary setObject: [NSNumber numberWithBool:self.ban] forKey: @"ban"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserRemove class]]) {
    return NO;
  }
  MPUserRemove *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasActor == otherMessage.hasActor &&
      (!self.hasActor || self.actor == otherMessage.actor) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasBan == otherMessage.hasBan &&
      (!self.hasBan || self.ban == otherMessage.ban) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.session] hash];
  }
  if (self.hasActor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.actor] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasBan) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.ban] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserRemoveBuilder()
@property (strong) MPUserRemove* resultUserRemove;
@end

@implementation MPUserRemoveBuilder
@synthesize resultUserRemove;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserRemove = [[MPUserRemove alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserRemove;
}
- (MPUserRemoveBuilder*) clear {
  self.resultUserRemove = [[MPUserRemove alloc] init];
  return self;
}
- (MPUserRemoveBuilder*) clone {
  return [MPUserRemove builderWithPrototype:resultUserRemove];
}
- (MPUserRemove*) defaultInstance {
  return [MPUserRemove defaultInstance];
}
- (MPUserRemove*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserRemove*) buildPartial {
  MPUserRemove* returnMe = resultUserRemove;
  self.resultUserRemove = nil;
  return returnMe;
}
- (MPUserRemoveBuilder*) mergeFrom:(MPUserRemove*) other {
  if (other == [MPUserRemove defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasActor) {
    [self setActor:other.actor];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasBan) {
    [self setBan:other.ban];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserRemoveBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserRemoveBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setActor:[input readUInt32]];
        break;
      }
      case 26: {
        [self setReason:[input readString]];
        break;
      }
      case 32: {
        [self setBan:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return resultUserRemove.hasSession;
}
- (UInt32) session {
  return resultUserRemove.session;
}
- (MPUserRemoveBuilder*) setSession:(UInt32) value {
  resultUserRemove.hasSession = YES;
  resultUserRemove.session = value;
  return self;
}
- (MPUserRemoveBuilder*) clearSession {
  resultUserRemove.hasSession = NO;
  resultUserRemove.session = 0;
  return self;
}
- (BOOL) hasActor {
  return resultUserRemove.hasActor;
}
- (UInt32) actor {
  return resultUserRemove.actor;
}
- (MPUserRemoveBuilder*) setActor:(UInt32) value {
  resultUserRemove.hasActor = YES;
  resultUserRemove.actor = value;
  return self;
}
- (MPUserRemoveBuilder*) clearActor {
  resultUserRemove.hasActor = NO;
  resultUserRemove.actor = 0;
  return self;
}
- (BOOL) hasReason {
  return resultUserRemove.hasReason;
}
- (NSString*) reason {
  return resultUserRemove.reason;
}
- (MPUserRemoveBuilder*) setReason:(NSString*) value {
  resultUserRemove.hasReason = YES;
  resultUserRemove.reason = value;
  return self;
}
- (MPUserRemoveBuilder*) clearReason {
  resultUserRemove.hasReason = NO;
  resultUserRemove.reason = @"";
  return self;
}
- (BOOL) hasBan {
  return resultUserRemove.hasBan;
}
- (BOOL) ban {
  return resultUserRemove.ban;
}
- (MPUserRemoveBuilder*) setBan:(BOOL) value {
  resultUserRemove.hasBan = YES;
  resultUserRemove.ban = value;
  return self;
}
- (MPUserRemoveBuilder*) clearBan {
  resultUserRemove.hasBan = NO;
  resultUserRemove.ban = NO;
  return self;
}
@end

@interface MPUserState ()
@property UInt32 session;
@property UInt32 actor;
@property (strong) NSString* name;
@property UInt32 userId;
@property UInt32 channelId;
@property BOOL mute;
@property BOOL deaf;
@property BOOL suppress;
@property BOOL selfMute;
@property BOOL selfDeaf;
@property (strong) NSData* texture;
@property (strong) NSData* pluginContext;
@property (strong) NSString* pluginIdentity;
@property (strong) NSString* comment;
@property (strong) NSString* pb_hash;
@property (strong) NSData* commentHash;
@property (strong) NSData* textureHash;
@property BOOL prioritySpeaker;
@property BOOL recording;
@property (strong) NSMutableArray * temporaryAccessTokensArray;
@property (strong) PBAppendableArray * listeningChannelAddArray;
@property (strong) PBAppendableArray * listeningChannelRemoveArray;
@end

@implementation MPUserState

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) _value_ {
  hasSession_ = !!_value_;
}
@synthesize session;
- (BOOL) hasActor {
  return !!hasActor_;
}
- (void) setHasActor:(BOOL) _value_ {
  hasActor_ = !!_value_;
}
@synthesize actor;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) _value_ {
  hasChannelId_ = !!_value_;
}
@synthesize channelId;
- (BOOL) hasMute {
  return !!hasMute_;
}
- (void) setHasMute:(BOOL) _value_ {
  hasMute_ = !!_value_;
}
- (BOOL) mute {
  return !!mute_;
}
- (void) setMute:(BOOL) _value_ {
  mute_ = !!_value_;
}
- (BOOL) hasDeaf {
  return !!hasDeaf_;
}
- (void) setHasDeaf:(BOOL) _value_ {
  hasDeaf_ = !!_value_;
}
- (BOOL) deaf {
  return !!deaf_;
}
- (void) setDeaf:(BOOL) _value_ {
  deaf_ = !!_value_;
}
- (BOOL) hasSuppress {
  return !!hasSuppress_;
}
- (void) setHasSuppress:(BOOL) _value_ {
  hasSuppress_ = !!_value_;
}
- (BOOL) suppress {
  return !!suppress_;
}
- (void) setSuppress:(BOOL) _value_ {
  suppress_ = !!_value_;
}
- (BOOL) hasSelfMute {
  return !!hasSelfMute_;
}
- (void) setHasSelfMute:(BOOL) _value_ {
  hasSelfMute_ = !!_value_;
}
- (BOOL) selfMute {
  return !!selfMute_;
}
- (void) setSelfMute:(BOOL) _value_ {
  selfMute_ = !!_value_;
}
- (BOOL) hasSelfDeaf {
  return !!hasSelfDeaf_;
}
- (void) setHasSelfDeaf:(BOOL) _value_ {
  hasSelfDeaf_ = !!_value_;
}
- (BOOL) selfDeaf {
  return !!selfDeaf_;
}
- (void) setSelfDeaf:(BOOL) _value_ {
  selfDeaf_ = !!_value_;
}
- (BOOL) hasTexture {
  return !!hasTexture_;
}
- (void) setHasTexture:(BOOL) _value_ {
  hasTexture_ = !!_value_;
}
@synthesize texture;
- (BOOL) hasPluginContext {
  return !!hasPluginContext_;
}
- (void) setHasPluginContext:(BOOL) _value_ {
  hasPluginContext_ = !!_value_;
}
@synthesize pluginContext;
- (BOOL) hasPluginIdentity {
  return !!hasPluginIdentity_;
}
- (void) setHasPluginIdentity:(BOOL) _value_ {
  hasPluginIdentity_ = !!_value_;
}
@synthesize pluginIdentity;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) _value_ {
  hasComment_ = !!_value_;
}
@synthesize comment;
- (BOOL) hasHash {
  return !!hasHash_;
}
- (void) setHasHash:(BOOL) _value_ {
  hasHash_ = !!_value_;
}
@synthesize pb_hash;
- (BOOL) hasCommentHash {
  return !!hasCommentHash_;
}
- (void) setHasCommentHash:(BOOL) _value_ {
  hasCommentHash_ = !!_value_;
}
@synthesize commentHash;
- (BOOL) hasTextureHash {
  return !!hasTextureHash_;
}
- (void) setHasTextureHash:(BOOL) _value_ {
  hasTextureHash_ = !!_value_;
}
@synthesize textureHash;
- (BOOL) hasPrioritySpeaker {
  return !!hasPrioritySpeaker_;
}
- (void) setHasPrioritySpeaker:(BOOL) _value_ {
  hasPrioritySpeaker_ = !!_value_;
}
- (BOOL) prioritySpeaker {
  return !!prioritySpeaker_;
}
- (void) setPrioritySpeaker:(BOOL) _value_ {
  prioritySpeaker_ = !!_value_;
}
- (BOOL) hasRecording {
  return !!hasRecording_;
}
- (void) setHasRecording:(BOOL) _value_ {
  hasRecording_ = !!_value_;
}
- (BOOL) recording {
  return !!recording_;
}
- (void) setRecording:(BOOL) _value_ {
  recording_ = !!_value_;
}
@synthesize temporaryAccessTokensArray;
@dynamic temporaryAccessTokens;
@synthesize listeningChannelAddArray;
@dynamic listeningChannelAdd;
@synthesize listeningChannelRemoveArray;
@dynamic listeningChannelRemove;
- (instancetype) init {
  if ((self = [super init])) {
    self.session = 0;
    self.actor = 0;
    self.name = @"";
    self.userId = 0;
    self.channelId = 0;
    self.mute = NO;
    self.deaf = NO;
    self.suppress = NO;
    self.selfMute = NO;
    self.selfDeaf = NO;
    self.texture = [NSData data];
    self.pluginContext = [NSData data];
    self.pluginIdentity = @"";
    self.comment = @"";
    self.pb_hash = @"";
    self.commentHash = [NSData data];
    self.textureHash = [NSData data];
    self.prioritySpeaker = NO;
    self.recording = NO;
  }
  return self;
}
static MPUserState* defaultMPUserStateInstance = nil;
+ (void) initialize {
  if (self == [MPUserState class]) {
    defaultMPUserStateInstance = [[MPUserState alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPUserStateInstance;
}
- (instancetype) defaultInstance {
  return defaultMPUserStateInstance;
}
- (NSArray *)temporaryAccessTokens {
  return temporaryAccessTokensArray;
}
- (NSString*)temporaryAccessTokensAtIndex:(NSUInteger)index {
  return [temporaryAccessTokensArray objectAtIndex:index];
}
- (PBArray *)listeningChannelAdd {
  return listeningChannelAddArray;
}
- (UInt32)listeningChannelAddAtIndex:(NSUInteger)index {
  return [listeningChannelAddArray uint32AtIndex:index];
}
- (PBArray *)listeningChannelRemove {
  return listeningChannelRemoveArray;
}
- (UInt32)listeningChannelRemoveAtIndex:(NSUInteger)index {
  return [listeningChannelRemoveArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasActor) {
    [output writeUInt32:2 value:self.actor];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasUserId) {
    [output writeUInt32:4 value:self.userId];
  }
  if (self.hasChannelId) {
    [output writeUInt32:5 value:self.channelId];
  }
  if (self.hasMute) {
    [output writeBool:6 value:self.mute];
  }
  if (self.hasDeaf) {
    [output writeBool:7 value:self.deaf];
  }
  if (self.hasSuppress) {
    [output writeBool:8 value:self.suppress];
  }
  if (self.hasSelfMute) {
    [output writeBool:9 value:self.selfMute];
  }
  if (self.hasSelfDeaf) {
    [output writeBool:10 value:self.selfDeaf];
  }
  if (self.hasTexture) {
    [output writeData:11 value:self.texture];
  }
  if (self.hasPluginContext) {
    [output writeData:12 value:self.pluginContext];
  }
  if (self.hasPluginIdentity) {
    [output writeString:13 value:self.pluginIdentity];
  }
  if (self.hasComment) {
    [output writeString:14 value:self.comment];
  }
  if (self.hasHash) {
    [output writeString:15 value:self.pb_hash];
  }
  if (self.hasCommentHash) {
    [output writeData:16 value:self.commentHash];
  }
  if (self.hasTextureHash) {
    [output writeData:17 value:self.textureHash];
  }
  if (self.hasPrioritySpeaker) {
    [output writeBool:18 value:self.prioritySpeaker];
  }
  if (self.hasRecording) {
    [output writeBool:19 value:self.recording];
  }
  [self.temporaryAccessTokensArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:20 value:element];
  }];
  const NSUInteger listeningChannelAddArrayCount = self.listeningChannelAddArray.count;
  if (listeningChannelAddArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.listeningChannelAddArray.data;
    for (NSUInteger i = 0; i < listeningChannelAddArrayCount; ++i) {
      [output writeUInt32:21 value:values[i]];
    }
  }
  const NSUInteger listeningChannelRemoveArrayCount = self.listeningChannelRemoveArray.count;
  if (listeningChannelRemoveArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.listeningChannelRemoveArray.data;
    for (NSUInteger i = 0; i < listeningChannelRemoveArrayCount; ++i) {
      [output writeUInt32:22 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSession) {
    size_ += computeUInt32Size(1, self.session);
  }
  if (self.hasActor) {
    size_ += computeUInt32Size(2, self.actor);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasUserId) {
    size_ += computeUInt32Size(4, self.userId);
  }
  if (self.hasChannelId) {
    size_ += computeUInt32Size(5, self.channelId);
  }
  if (self.hasMute) {
    size_ += computeBoolSize(6, self.mute);
  }
  if (self.hasDeaf) {
    size_ += computeBoolSize(7, self.deaf);
  }
  if (self.hasSuppress) {
    size_ += computeBoolSize(8, self.suppress);
  }
  if (self.hasSelfMute) {
    size_ += computeBoolSize(9, self.selfMute);
  }
  if (self.hasSelfDeaf) {
    size_ += computeBoolSize(10, self.selfDeaf);
  }
  if (self.hasTexture) {
    size_ += computeDataSize(11, self.texture);
  }
  if (self.hasPluginContext) {
    size_ += computeDataSize(12, self.pluginContext);
  }
  if (self.hasPluginIdentity) {
    size_ += computeStringSize(13, self.pluginIdentity);
  }
  if (self.hasComment) {
    size_ += computeStringSize(14, self.comment);
  }
  if (self.hasHash) {
    size_ += computeStringSize(15, self.pb_hash);
  }
  if (self.hasCommentHash) {
    size_ += computeDataSize(16, self.commentHash);
  }
  if (self.hasTextureHash) {
    size_ += computeDataSize(17, self.textureHash);
  }
  if (self.hasPrioritySpeaker) {
    size_ += computeBoolSize(18, self.prioritySpeaker);
  }
  if (self.hasRecording) {
    size_ += computeBoolSize(19, self.recording);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.temporaryAccessTokensArray.count;
    [self.temporaryAccessTokensArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.listeningChannelAddArray.count;
    const UInt32 *values = (const UInt32 *)self.listeningChannelAddArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.listeningChannelRemoveArray.count;
    const UInt32 *values = (const UInt32 *)self.listeningChannelRemoveArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPUserState*) parseFromData:(NSData*) data {
  return (MPUserState*)[[[MPUserState builder] mergeFromData:data] build];
}
+ (MPUserState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserState*)[[[MPUserState builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserState*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserState*)[[[MPUserState builder] mergeFromInputStream:input] build];
}
+ (MPUserState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserState*)[[[MPUserState builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserState*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserState*)[[[MPUserState builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserState*)[[[MPUserState builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserStateBuilder*) builder {
  return [[MPUserStateBuilder alloc] init];
}
+ (MPUserStateBuilder*) builderWithPrototype:(MPUserState*) prototype {
  return [[MPUserState builder] mergeFrom:prototype];
}
- (MPUserStateBuilder*) builder {
  return [MPUserState builder];
}
- (MPUserStateBuilder*) toBuilder {
  return [MPUserState builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInteger:self.session]];
  }
  if (self.hasActor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actor", [NSNumber numberWithInteger:self.actor]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInteger:self.channelId]];
  }
  if (self.hasMute) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mute", [NSNumber numberWithBool:self.mute]];
  }
  if (self.hasDeaf) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deaf", [NSNumber numberWithBool:self.deaf]];
  }
  if (self.hasSuppress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"suppress", [NSNumber numberWithBool:self.suppress]];
  }
  if (self.hasSelfMute) {
    [output appendFormat:@"%@%@: %@\n", indent, @"selfMute", [NSNumber numberWithBool:self.selfMute]];
  }
  if (self.hasSelfDeaf) {
    [output appendFormat:@"%@%@: %@\n", indent, @"selfDeaf", [NSNumber numberWithBool:self.selfDeaf]];
  }
  if (self.hasTexture) {
    [output appendFormat:@"%@%@: %@\n", indent, @"texture", self.texture];
  }
  if (self.hasPluginContext) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pluginContext", self.pluginContext];
  }
  if (self.hasPluginIdentity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pluginIdentity", self.pluginIdentity];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_hash", self.pb_hash];
  }
  if (self.hasCommentHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commentHash", self.commentHash];
  }
  if (self.hasTextureHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textureHash", self.textureHash];
  }
  if (self.hasPrioritySpeaker) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prioritySpeaker", [NSNumber numberWithBool:self.prioritySpeaker]];
  }
  if (self.hasRecording) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recording", [NSNumber numberWithBool:self.recording]];
  }
  [self.temporaryAccessTokensArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temporaryAccessTokens", obj];
  }];
  [self.listeningChannelAddArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"listeningChannelAdd", obj];
  }];
  [self.listeningChannelRemoveArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"listeningChannelRemove", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSession) {
    [dictionary setObject: [NSNumber numberWithInteger:self.session] forKey: @"session"];
  }
  if (self.hasActor) {
    [dictionary setObject: [NSNumber numberWithInteger:self.actor] forKey: @"actor"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasChannelId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.channelId] forKey: @"channelId"];
  }
  if (self.hasMute) {
    [dictionary setObject: [NSNumber numberWithBool:self.mute] forKey: @"mute"];
  }
  if (self.hasDeaf) {
    [dictionary setObject: [NSNumber numberWithBool:self.deaf] forKey: @"deaf"];
  }
  if (self.hasSuppress) {
    [dictionary setObject: [NSNumber numberWithBool:self.suppress] forKey: @"suppress"];
  }
  if (self.hasSelfMute) {
    [dictionary setObject: [NSNumber numberWithBool:self.selfMute] forKey: @"selfMute"];
  }
  if (self.hasSelfDeaf) {
    [dictionary setObject: [NSNumber numberWithBool:self.selfDeaf] forKey: @"selfDeaf"];
  }
  if (self.hasTexture) {
    [dictionary setObject: self.texture forKey: @"texture"];
  }
  if (self.hasPluginContext) {
    [dictionary setObject: self.pluginContext forKey: @"pluginContext"];
  }
  if (self.hasPluginIdentity) {
    [dictionary setObject: self.pluginIdentity forKey: @"pluginIdentity"];
  }
  if (self.hasComment) {
    [dictionary setObject: self.comment forKey: @"comment"];
  }
  if (self.hasHash) {
    [dictionary setObject: self.pb_hash forKey: @"pb_hash"];
  }
  if (self.hasCommentHash) {
    [dictionary setObject: self.commentHash forKey: @"commentHash"];
  }
  if (self.hasTextureHash) {
    [dictionary setObject: self.textureHash forKey: @"textureHash"];
  }
  if (self.hasPrioritySpeaker) {
    [dictionary setObject: [NSNumber numberWithBool:self.prioritySpeaker] forKey: @"prioritySpeaker"];
  }
  if (self.hasRecording) {
    [dictionary setObject: [NSNumber numberWithBool:self.recording] forKey: @"recording"];
  }
  [dictionary setObject:self.temporaryAccessTokens forKey: @"temporaryAccessTokens"];
  NSMutableArray * listeningChannelAddArrayArray = [NSMutableArray new];
  NSUInteger listeningChannelAddArrayCount=self.listeningChannelAddArray.count;
  for(int i=0;i<listeningChannelAddArrayCount;i++){
    [listeningChannelAddArrayArray addObject: @([self.listeningChannelAddArray uint32AtIndex:i])];
  }
  [dictionary setObject: listeningChannelAddArrayArray forKey: @"listeningChannelAdd"];
  NSMutableArray * listeningChannelRemoveArrayArray = [NSMutableArray new];
  NSUInteger listeningChannelRemoveArrayCount=self.listeningChannelRemoveArray.count;
  for(int i=0;i<listeningChannelRemoveArrayCount;i++){
    [listeningChannelRemoveArrayArray addObject: @([self.listeningChannelRemoveArray uint32AtIndex:i])];
  }
  [dictionary setObject: listeningChannelRemoveArrayArray forKey: @"listeningChannelRemove"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserState class]]) {
    return NO;
  }
  MPUserState *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasActor == otherMessage.hasActor &&
      (!self.hasActor || self.actor == otherMessage.actor) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasMute == otherMessage.hasMute &&
      (!self.hasMute || self.mute == otherMessage.mute) &&
      self.hasDeaf == otherMessage.hasDeaf &&
      (!self.hasDeaf || self.deaf == otherMessage.deaf) &&
      self.hasSuppress == otherMessage.hasSuppress &&
      (!self.hasSuppress || self.suppress == otherMessage.suppress) &&
      self.hasSelfMute == otherMessage.hasSelfMute &&
      (!self.hasSelfMute || self.selfMute == otherMessage.selfMute) &&
      self.hasSelfDeaf == otherMessage.hasSelfDeaf &&
      (!self.hasSelfDeaf || self.selfDeaf == otherMessage.selfDeaf) &&
      self.hasTexture == otherMessage.hasTexture &&
      (!self.hasTexture || [self.texture isEqual:otherMessage.texture]) &&
      self.hasPluginContext == otherMessage.hasPluginContext &&
      (!self.hasPluginContext || [self.pluginContext isEqual:otherMessage.pluginContext]) &&
      self.hasPluginIdentity == otherMessage.hasPluginIdentity &&
      (!self.hasPluginIdentity || [self.pluginIdentity isEqual:otherMessage.pluginIdentity]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasHash == otherMessage.hasHash &&
      (!self.hasHash || [self.pb_hash isEqual:otherMessage.pb_hash]) &&
      self.hasCommentHash == otherMessage.hasCommentHash &&
      (!self.hasCommentHash || [self.commentHash isEqual:otherMessage.commentHash]) &&
      self.hasTextureHash == otherMessage.hasTextureHash &&
      (!self.hasTextureHash || [self.textureHash isEqual:otherMessage.textureHash]) &&
      self.hasPrioritySpeaker == otherMessage.hasPrioritySpeaker &&
      (!self.hasPrioritySpeaker || self.prioritySpeaker == otherMessage.prioritySpeaker) &&
      self.hasRecording == otherMessage.hasRecording &&
      (!self.hasRecording || self.recording == otherMessage.recording) &&
      [self.temporaryAccessTokensArray isEqualToArray:otherMessage.temporaryAccessTokensArray] &&
      [self.listeningChannelAddArray isEqualToArray:otherMessage.listeningChannelAddArray] &&
      [self.listeningChannelRemoveArray isEqualToArray:otherMessage.listeningChannelRemoveArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.session] hash];
  }
  if (self.hasActor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.actor] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.channelId] hash];
  }
  if (self.hasMute) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.mute] hash];
  }
  if (self.hasDeaf) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.deaf] hash];
  }
  if (self.hasSuppress) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.suppress] hash];
  }
  if (self.hasSelfMute) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.selfMute] hash];
  }
  if (self.hasSelfDeaf) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.selfDeaf] hash];
  }
  if (self.hasTexture) {
    hashCode = hashCode * 31 + [self.texture hash];
  }
  if (self.hasPluginContext) {
    hashCode = hashCode * 31 + [self.pluginContext hash];
  }
  if (self.hasPluginIdentity) {
    hashCode = hashCode * 31 + [self.pluginIdentity hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasHash) {
    hashCode = hashCode * 31 + [self.pb_hash hash];
  }
  if (self.hasCommentHash) {
    hashCode = hashCode * 31 + [self.commentHash hash];
  }
  if (self.hasTextureHash) {
    hashCode = hashCode * 31 + [self.textureHash hash];
  }
  if (self.hasPrioritySpeaker) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.prioritySpeaker] hash];
  }
  if (self.hasRecording) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.recording] hash];
  }
  [self.temporaryAccessTokensArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.listeningChannelAddArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.listeningChannelRemoveArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserStateBuilder()
@property (strong) MPUserState* resultUserState;
@end

@implementation MPUserStateBuilder
@synthesize resultUserState;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserState = [[MPUserState alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserState;
}
- (MPUserStateBuilder*) clear {
  self.resultUserState = [[MPUserState alloc] init];
  return self;
}
- (MPUserStateBuilder*) clone {
  return [MPUserState builderWithPrototype:resultUserState];
}
- (MPUserState*) defaultInstance {
  return [MPUserState defaultInstance];
}
- (MPUserState*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserState*) buildPartial {
  MPUserState* returnMe = resultUserState;
  self.resultUserState = nil;
  return returnMe;
}
- (MPUserStateBuilder*) mergeFrom:(MPUserState*) other {
  if (other == [MPUserState defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasActor) {
    [self setActor:other.actor];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasMute) {
    [self setMute:other.mute];
  }
  if (other.hasDeaf) {
    [self setDeaf:other.deaf];
  }
  if (other.hasSuppress) {
    [self setSuppress:other.suppress];
  }
  if (other.hasSelfMute) {
    [self setSelfMute:other.selfMute];
  }
  if (other.hasSelfDeaf) {
    [self setSelfDeaf:other.selfDeaf];
  }
  if (other.hasTexture) {
    [self setTexture:other.texture];
  }
  if (other.hasPluginContext) {
    [self setPluginContext:other.pluginContext];
  }
  if (other.hasPluginIdentity) {
    [self setPluginIdentity:other.pluginIdentity];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasHash) {
    [self setHash:other.pb_hash];
  }
  if (other.hasCommentHash) {
    [self setCommentHash:other.commentHash];
  }
  if (other.hasTextureHash) {
    [self setTextureHash:other.textureHash];
  }
  if (other.hasPrioritySpeaker) {
    [self setPrioritySpeaker:other.prioritySpeaker];
  }
  if (other.hasRecording) {
    [self setRecording:other.recording];
  }
  if (other.temporaryAccessTokensArray.count > 0) {
    if (resultUserState.temporaryAccessTokensArray == nil) {
      resultUserState.temporaryAccessTokensArray = [[NSMutableArray alloc] initWithArray:other.temporaryAccessTokensArray];
    } else {
      [resultUserState.temporaryAccessTokensArray addObjectsFromArray:other.temporaryAccessTokensArray];
    }
  }
  if (other.listeningChannelAddArray.count > 0) {
    if (resultUserState.listeningChannelAddArray == nil) {
      resultUserState.listeningChannelAddArray = [other.listeningChannelAddArray copy];
    } else {
      [resultUserState.listeningChannelAddArray appendArray:other.listeningChannelAddArray];
    }
  }
  if (other.listeningChannelRemoveArray.count > 0) {
    if (resultUserState.listeningChannelRemoveArray == nil) {
      resultUserState.listeningChannelRemoveArray = [other.listeningChannelRemoveArray copy];
    } else {
      [resultUserState.listeningChannelRemoveArray appendArray:other.listeningChannelRemoveArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setActor:[input readUInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 40: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 48: {
        [self setMute:[input readBool]];
        break;
      }
      case 56: {
        [self setDeaf:[input readBool]];
        break;
      }
      case 64: {
        [self setSuppress:[input readBool]];
        break;
      }
      case 72: {
        [self setSelfMute:[input readBool]];
        break;
      }
      case 80: {
        [self setSelfDeaf:[input readBool]];
        break;
      }
      case 90: {
        [self setTexture:[input readData]];
        break;
      }
      case 98: {
        [self setPluginContext:[input readData]];
        break;
      }
      case 106: {
        [self setPluginIdentity:[input readString]];
        break;
      }
      case 114: {
        [self setComment:[input readString]];
        break;
      }
      case 122: {
        [self setHash:[input readString]];
        break;
      }
      case 130: {
        [self setCommentHash:[input readData]];
        break;
      }
      case 138: {
        [self setTextureHash:[input readData]];
        break;
      }
      case 144: {
        [self setPrioritySpeaker:[input readBool]];
        break;
      }
      case 152: {
        [self setRecording:[input readBool]];
        break;
      }
      case 162: {
        [self addTemporaryAccessTokens:[input readString]];
        break;
      }
      case 168: {
        [self addListeningChannelAdd:[input readUInt32]];
        break;
      }
      case 176: {
        [self addListeningChannelRemove:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return resultUserState.hasSession;
}
- (UInt32) session {
  return resultUserState.session;
}
- (MPUserStateBuilder*) setSession:(UInt32) value {
  resultUserState.hasSession = YES;
  resultUserState.session = value;
  return self;
}
- (MPUserStateBuilder*) clearSession {
  resultUserState.hasSession = NO;
  resultUserState.session = 0;
  return self;
}
- (BOOL) hasActor {
  return resultUserState.hasActor;
}
- (UInt32) actor {
  return resultUserState.actor;
}
- (MPUserStateBuilder*) setActor:(UInt32) value {
  resultUserState.hasActor = YES;
  resultUserState.actor = value;
  return self;
}
- (MPUserStateBuilder*) clearActor {
  resultUserState.hasActor = NO;
  resultUserState.actor = 0;
  return self;
}
- (BOOL) hasName {
  return resultUserState.hasName;
}
- (NSString*) name {
  return resultUserState.name;
}
- (MPUserStateBuilder*) setName:(NSString*) value {
  resultUserState.hasName = YES;
  resultUserState.name = value;
  return self;
}
- (MPUserStateBuilder*) clearName {
  resultUserState.hasName = NO;
  resultUserState.name = @"";
  return self;
}
- (BOOL) hasUserId {
  return resultUserState.hasUserId;
}
- (UInt32) userId {
  return resultUserState.userId;
}
- (MPUserStateBuilder*) setUserId:(UInt32) value {
  resultUserState.hasUserId = YES;
  resultUserState.userId = value;
  return self;
}
- (MPUserStateBuilder*) clearUserId {
  resultUserState.hasUserId = NO;
  resultUserState.userId = 0;
  return self;
}
- (BOOL) hasChannelId {
  return resultUserState.hasChannelId;
}
- (UInt32) channelId {
  return resultUserState.channelId;
}
- (MPUserStateBuilder*) setChannelId:(UInt32) value {
  resultUserState.hasChannelId = YES;
  resultUserState.channelId = value;
  return self;
}
- (MPUserStateBuilder*) clearChannelId {
  resultUserState.hasChannelId = NO;
  resultUserState.channelId = 0;
  return self;
}
- (BOOL) hasMute {
  return resultUserState.hasMute;
}
- (BOOL) mute {
  return resultUserState.mute;
}
- (MPUserStateBuilder*) setMute:(BOOL) value {
  resultUserState.hasMute = YES;
  resultUserState.mute = value;
  return self;
}
- (MPUserStateBuilder*) clearMute {
  resultUserState.hasMute = NO;
  resultUserState.mute = NO;
  return self;
}
- (BOOL) hasDeaf {
  return resultUserState.hasDeaf;
}
- (BOOL) deaf {
  return resultUserState.deaf;
}
- (MPUserStateBuilder*) setDeaf:(BOOL) value {
  resultUserState.hasDeaf = YES;
  resultUserState.deaf = value;
  return self;
}
- (MPUserStateBuilder*) clearDeaf {
  resultUserState.hasDeaf = NO;
  resultUserState.deaf = NO;
  return self;
}
- (BOOL) hasSuppress {
  return resultUserState.hasSuppress;
}
- (BOOL) suppress {
  return resultUserState.suppress;
}
- (MPUserStateBuilder*) setSuppress:(BOOL) value {
  resultUserState.hasSuppress = YES;
  resultUserState.suppress = value;
  return self;
}
- (MPUserStateBuilder*) clearSuppress {
  resultUserState.hasSuppress = NO;
  resultUserState.suppress = NO;
  return self;
}
- (BOOL) hasSelfMute {
  return resultUserState.hasSelfMute;
}
- (BOOL) selfMute {
  return resultUserState.selfMute;
}
- (MPUserStateBuilder*) setSelfMute:(BOOL) value {
  resultUserState.hasSelfMute = YES;
  resultUserState.selfMute = value;
  return self;
}
- (MPUserStateBuilder*) clearSelfMute {
  resultUserState.hasSelfMute = NO;
  resultUserState.selfMute = NO;
  return self;
}
- (BOOL) hasSelfDeaf {
  return resultUserState.hasSelfDeaf;
}
- (BOOL) selfDeaf {
  return resultUserState.selfDeaf;
}
- (MPUserStateBuilder*) setSelfDeaf:(BOOL) value {
  resultUserState.hasSelfDeaf = YES;
  resultUserState.selfDeaf = value;
  return self;
}
- (MPUserStateBuilder*) clearSelfDeaf {
  resultUserState.hasSelfDeaf = NO;
  resultUserState.selfDeaf = NO;
  return self;
}
- (BOOL) hasTexture {
  return resultUserState.hasTexture;
}
- (NSData*) texture {
  return resultUserState.texture;
}
- (MPUserStateBuilder*) setTexture:(NSData*) value {
  resultUserState.hasTexture = YES;
  resultUserState.texture = value;
  return self;
}
- (MPUserStateBuilder*) clearTexture {
  resultUserState.hasTexture = NO;
  resultUserState.texture = [NSData data];
  return self;
}
- (BOOL) hasPluginContext {
  return resultUserState.hasPluginContext;
}
- (NSData*) pluginContext {
  return resultUserState.pluginContext;
}
- (MPUserStateBuilder*) setPluginContext:(NSData*) value {
  resultUserState.hasPluginContext = YES;
  resultUserState.pluginContext = value;
  return self;
}
- (MPUserStateBuilder*) clearPluginContext {
  resultUserState.hasPluginContext = NO;
  resultUserState.pluginContext = [NSData data];
  return self;
}
- (BOOL) hasPluginIdentity {
  return resultUserState.hasPluginIdentity;
}
- (NSString*) pluginIdentity {
  return resultUserState.pluginIdentity;
}
- (MPUserStateBuilder*) setPluginIdentity:(NSString*) value {
  resultUserState.hasPluginIdentity = YES;
  resultUserState.pluginIdentity = value;
  return self;
}
- (MPUserStateBuilder*) clearPluginIdentity {
  resultUserState.hasPluginIdentity = NO;
  resultUserState.pluginIdentity = @"";
  return self;
}
- (BOOL) hasComment {
  return resultUserState.hasComment;
}
- (NSString*) comment {
  return resultUserState.comment;
}
- (MPUserStateBuilder*) setComment:(NSString*) value {
  resultUserState.hasComment = YES;
  resultUserState.comment = value;
  return self;
}
- (MPUserStateBuilder*) clearComment {
  resultUserState.hasComment = NO;
  resultUserState.comment = @"";
  return self;
}
- (BOOL) hasHash {
  return resultUserState.hasHash;
}
- (NSString*) pb_hash {
  return resultUserState.pb_hash;
}
- (MPUserStateBuilder*) setHash:(NSString*) value {
  resultUserState.hasHash = YES;
  resultUserState.pb_hash = value;
  return self;
}
- (MPUserStateBuilder*) clearHash {
  resultUserState.hasHash = NO;
  resultUserState.pb_hash = @"";
  return self;
}
- (BOOL) hasCommentHash {
  return resultUserState.hasCommentHash;
}
- (NSData*) commentHash {
  return resultUserState.commentHash;
}
- (MPUserStateBuilder*) setCommentHash:(NSData*) value {
  resultUserState.hasCommentHash = YES;
  resultUserState.commentHash = value;
  return self;
}
- (MPUserStateBuilder*) clearCommentHash {
  resultUserState.hasCommentHash = NO;
  resultUserState.commentHash = [NSData data];
  return self;
}
- (BOOL) hasTextureHash {
  return resultUserState.hasTextureHash;
}
- (NSData*) textureHash {
  return resultUserState.textureHash;
}
- (MPUserStateBuilder*) setTextureHash:(NSData*) value {
  resultUserState.hasTextureHash = YES;
  resultUserState.textureHash = value;
  return self;
}
- (MPUserStateBuilder*) clearTextureHash {
  resultUserState.hasTextureHash = NO;
  resultUserState.textureHash = [NSData data];
  return self;
}
- (BOOL) hasPrioritySpeaker {
  return resultUserState.hasPrioritySpeaker;
}
- (BOOL) prioritySpeaker {
  return resultUserState.prioritySpeaker;
}
- (MPUserStateBuilder*) setPrioritySpeaker:(BOOL) value {
  resultUserState.hasPrioritySpeaker = YES;
  resultUserState.prioritySpeaker = value;
  return self;
}
- (MPUserStateBuilder*) clearPrioritySpeaker {
  resultUserState.hasPrioritySpeaker = NO;
  resultUserState.prioritySpeaker = NO;
  return self;
}
- (BOOL) hasRecording {
  return resultUserState.hasRecording;
}
- (BOOL) recording {
  return resultUserState.recording;
}
- (MPUserStateBuilder*) setRecording:(BOOL) value {
  resultUserState.hasRecording = YES;
  resultUserState.recording = value;
  return self;
}
- (MPUserStateBuilder*) clearRecording {
  resultUserState.hasRecording = NO;
  resultUserState.recording = NO;
  return self;
}
- (NSMutableArray *)temporaryAccessTokens {
  return resultUserState.temporaryAccessTokensArray;
}
- (NSString*)temporaryAccessTokensAtIndex:(NSUInteger)index {
  return [resultUserState temporaryAccessTokensAtIndex:index];
}
- (MPUserStateBuilder *)addTemporaryAccessTokens:(NSString*)value {
  if (resultUserState.temporaryAccessTokensArray == nil) {
    resultUserState.temporaryAccessTokensArray = [[NSMutableArray alloc]init];
  }
  [resultUserState.temporaryAccessTokensArray addObject:value];
  return self;
}
- (MPUserStateBuilder *)setTemporaryAccessTokensArray:(NSArray *)array {
  resultUserState.temporaryAccessTokensArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (MPUserStateBuilder *)clearTemporaryAccessTokens {
  resultUserState.temporaryAccessTokensArray = nil;
  return self;
}
- (PBAppendableArray *)listeningChannelAdd {
  return resultUserState.listeningChannelAddArray;
}
- (UInt32)listeningChannelAddAtIndex:(NSUInteger)index {
  return [resultUserState listeningChannelAddAtIndex:index];
}
- (MPUserStateBuilder *)addListeningChannelAdd:(UInt32)value {
  if (resultUserState.listeningChannelAddArray == nil) {
    resultUserState.listeningChannelAddArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultUserState.listeningChannelAddArray addUint32:value];
  return self;
}
- (MPUserStateBuilder *)setListeningChannelAddArray:(NSArray *)array {
  resultUserState.listeningChannelAddArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPUserStateBuilder *)setListeningChannelAddValues:(const UInt32 *)values count:(NSUInteger)count {
  resultUserState.listeningChannelAddArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPUserStateBuilder *)clearListeningChannelAdd {
  resultUserState.listeningChannelAddArray = nil;
  return self;
}
- (PBAppendableArray *)listeningChannelRemove {
  return resultUserState.listeningChannelRemoveArray;
}
- (UInt32)listeningChannelRemoveAtIndex:(NSUInteger)index {
  return [resultUserState listeningChannelRemoveAtIndex:index];
}
- (MPUserStateBuilder *)addListeningChannelRemove:(UInt32)value {
  if (resultUserState.listeningChannelRemoveArray == nil) {
    resultUserState.listeningChannelRemoveArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultUserState.listeningChannelRemoveArray addUint32:value];
  return self;
}
- (MPUserStateBuilder *)setListeningChannelRemoveArray:(NSArray *)array {
  resultUserState.listeningChannelRemoveArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPUserStateBuilder *)setListeningChannelRemoveValues:(const UInt32 *)values count:(NSUInteger)count {
  resultUserState.listeningChannelRemoveArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPUserStateBuilder *)clearListeningChannelRemove {
  resultUserState.listeningChannelRemoveArray = nil;
  return self;
}
@end

@interface MPBanList ()
@property (strong) NSMutableArray<MPBanListBanEntry*> * bansArray;
@property BOOL query;
@end

@implementation MPBanList

@synthesize bansArray;
@dynamic bans;
- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
- (BOOL) query {
  return !!query_;
}
- (void) setQuery:(BOOL) _value_ {
  query_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.query = NO;
  }
  return self;
}
static MPBanList* defaultMPBanListInstance = nil;
+ (void) initialize {
  if (self == [MPBanList class]) {
    defaultMPBanListInstance = [[MPBanList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPBanListInstance;
}
- (instancetype) defaultInstance {
  return defaultMPBanListInstance;
}
- (NSArray<MPBanListBanEntry*> *)bans {
  return bansArray;
}
- (MPBanListBanEntry*)bansAtIndex:(NSUInteger)index {
  return [bansArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitbans = YES;
   [self.bans enumerateObjectsUsingBlock:^(MPBanListBanEntry *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbans = NO;
      *stop = YES;
    }
  }];
  if (!isInitbans) return isInitbans;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.bansArray enumerateObjectsUsingBlock:^(MPBanListBanEntry *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasQuery) {
    [output writeBool:2 value:self.query];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.bansArray enumerateObjectsUsingBlock:^(MPBanListBanEntry *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasQuery) {
    size_ += computeBoolSize(2, self.query);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPBanList*) parseFromData:(NSData*) data {
  return (MPBanList*)[[[MPBanList builder] mergeFromData:data] build];
}
+ (MPBanList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanList*)[[[MPBanList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPBanList*) parseFromInputStream:(NSInputStream*) input {
  return (MPBanList*)[[[MPBanList builder] mergeFromInputStream:input] build];
}
+ (MPBanList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanList*)[[[MPBanList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPBanList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPBanList*)[[[MPBanList builder] mergeFromCodedInputStream:input] build];
}
+ (MPBanList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanList*)[[[MPBanList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPBanListBuilder*) builder {
  return [[MPBanListBuilder alloc] init];
}
+ (MPBanListBuilder*) builderWithPrototype:(MPBanList*) prototype {
  return [[MPBanList builder] mergeFrom:prototype];
}
- (MPBanListBuilder*) builder {
  return [MPBanList builder];
}
- (MPBanListBuilder*) toBuilder {
  return [MPBanList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.bansArray enumerateObjectsUsingBlock:^(MPBanListBanEntry *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bans"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", [NSNumber numberWithBool:self.query]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (MPBanListBanEntry* element in self.bansArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bans"];
  }
  if (self.hasQuery) {
    [dictionary setObject: [NSNumber numberWithBool:self.query] forKey: @"query"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPBanList class]]) {
    return NO;
  }
  MPBanList *otherMessage = other;
  return
      [self.bansArray isEqualToArray:otherMessage.bansArray] &&
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || self.query == otherMessage.query) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.bansArray enumerateObjectsUsingBlock:^(MPBanListBanEntry *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.query] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPBanListBanEntry ()
@property (strong) NSData* address;
@property UInt32 mask;
@property (strong) NSString* name;
@property (strong) NSString* pb_hash;
@property (strong) NSString* reason;
@property (strong) NSString* start;
@property UInt32 duration;
@end

@implementation MPBanListBanEntry

- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) _value_ {
  hasAddress_ = !!_value_;
}
@synthesize address;
- (BOOL) hasMask {
  return !!hasMask_;
}
- (void) setHasMask:(BOOL) _value_ {
  hasMask_ = !!_value_;
}
@synthesize mask;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasHash {
  return !!hasHash_;
}
- (void) setHasHash:(BOOL) _value_ {
  hasHash_ = !!_value_;
}
@synthesize pb_hash;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (BOOL) hasStart {
  return !!hasStart_;
}
- (void) setHasStart:(BOOL) _value_ {
  hasStart_ = !!_value_;
}
@synthesize start;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) _value_ {
  hasDuration_ = !!_value_;
}
@synthesize duration;
- (instancetype) init {
  if ((self = [super init])) {
    self.address = [NSData data];
    self.mask = 0;
    self.name = @"";
    self.pb_hash = @"";
    self.reason = @"";
    self.start = @"";
    self.duration = 0;
  }
  return self;
}
static MPBanListBanEntry* defaultMPBanListBanEntryInstance = nil;
+ (void) initialize {
  if (self == [MPBanListBanEntry class]) {
    defaultMPBanListBanEntryInstance = [[MPBanListBanEntry alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPBanListBanEntryInstance;
}
- (instancetype) defaultInstance {
  return defaultMPBanListBanEntryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAddress) {
    return NO;
  }
  if (!self.hasMask) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAddress) {
    [output writeData:1 value:self.address];
  }
  if (self.hasMask) {
    [output writeUInt32:2 value:self.mask];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasHash) {
    [output writeString:4 value:self.pb_hash];
  }
  if (self.hasReason) {
    [output writeString:5 value:self.reason];
  }
  if (self.hasStart) {
    [output writeString:6 value:self.start];
  }
  if (self.hasDuration) {
    [output writeUInt32:7 value:self.duration];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAddress) {
    size_ += computeDataSize(1, self.address);
  }
  if (self.hasMask) {
    size_ += computeUInt32Size(2, self.mask);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasHash) {
    size_ += computeStringSize(4, self.pb_hash);
  }
  if (self.hasReason) {
    size_ += computeStringSize(5, self.reason);
  }
  if (self.hasStart) {
    size_ += computeStringSize(6, self.start);
  }
  if (self.hasDuration) {
    size_ += computeUInt32Size(7, self.duration);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPBanListBanEntry*) parseFromData:(NSData*) data {
  return (MPBanListBanEntry*)[[[MPBanListBanEntry builder] mergeFromData:data] build];
}
+ (MPBanListBanEntry*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanListBanEntry*)[[[MPBanListBanEntry builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPBanListBanEntry*) parseFromInputStream:(NSInputStream*) input {
  return (MPBanListBanEntry*)[[[MPBanListBanEntry builder] mergeFromInputStream:input] build];
}
+ (MPBanListBanEntry*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanListBanEntry*)[[[MPBanListBanEntry builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPBanListBanEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPBanListBanEntry*)[[[MPBanListBanEntry builder] mergeFromCodedInputStream:input] build];
}
+ (MPBanListBanEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPBanListBanEntry*)[[[MPBanListBanEntry builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPBanListBanEntryBuilder*) builder {
  return [[MPBanListBanEntryBuilder alloc] init];
}
+ (MPBanListBanEntryBuilder*) builderWithPrototype:(MPBanListBanEntry*) prototype {
  return [[MPBanListBanEntry builder] mergeFrom:prototype];
}
- (MPBanListBanEntryBuilder*) builder {
  return [MPBanListBanEntry builder];
}
- (MPBanListBanEntryBuilder*) toBuilder {
  return [MPBanListBanEntry builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  if (self.hasMask) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mask", [NSNumber numberWithInteger:self.mask]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_hash", self.pb_hash];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"start", self.start];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithInteger:self.duration]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAddress) {
    [dictionary setObject: self.address forKey: @"address"];
  }
  if (self.hasMask) {
    [dictionary setObject: [NSNumber numberWithInteger:self.mask] forKey: @"mask"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasHash) {
    [dictionary setObject: self.pb_hash forKey: @"pb_hash"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  if (self.hasStart) {
    [dictionary setObject: self.start forKey: @"start"];
  }
  if (self.hasDuration) {
    [dictionary setObject: [NSNumber numberWithInteger:self.duration] forKey: @"duration"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPBanListBanEntry class]]) {
    return NO;
  }
  MPBanListBanEntry *otherMessage = other;
  return
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      self.hasMask == otherMessage.hasMask &&
      (!self.hasMask || self.mask == otherMessage.mask) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasHash == otherMessage.hasHash &&
      (!self.hasHash || [self.pb_hash isEqual:otherMessage.pb_hash]) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasStart == otherMessage.hasStart &&
      (!self.hasStart || [self.start isEqual:otherMessage.start]) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  if (self.hasMask) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mask] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasHash) {
    hashCode = hashCode * 31 + [self.pb_hash hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasStart) {
    hashCode = hashCode * 31 + [self.start hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.duration] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPBanListBanEntryBuilder()
@property (strong) MPBanListBanEntry* resultBanEntry;
@end

@implementation MPBanListBanEntryBuilder
@synthesize resultBanEntry;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBanEntry = [[MPBanListBanEntry alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBanEntry;
}
- (MPBanListBanEntryBuilder*) clear {
  self.resultBanEntry = [[MPBanListBanEntry alloc] init];
  return self;
}
- (MPBanListBanEntryBuilder*) clone {
  return [MPBanListBanEntry builderWithPrototype:resultBanEntry];
}
- (MPBanListBanEntry*) defaultInstance {
  return [MPBanListBanEntry defaultInstance];
}
- (MPBanListBanEntry*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPBanListBanEntry*) buildPartial {
  MPBanListBanEntry* returnMe = resultBanEntry;
  self.resultBanEntry = nil;
  return returnMe;
}
- (MPBanListBanEntryBuilder*) mergeFrom:(MPBanListBanEntry*) other {
  if (other == [MPBanListBanEntry defaultInstance]) {
    return self;
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasMask) {
    [self setMask:other.mask];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasHash) {
    [self setHash:other.pb_hash];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasStart) {
    [self setStart:other.start];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPBanListBanEntryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPBanListBanEntryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAddress:[input readData]];
        break;
      }
      case 16: {
        [self setMask:[input readUInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setHash:[input readString]];
        break;
      }
      case 42: {
        [self setReason:[input readString]];
        break;
      }
      case 50: {
        [self setStart:[input readString]];
        break;
      }
      case 56: {
        [self setDuration:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAddress {
  return resultBanEntry.hasAddress;
}
- (NSData*) address {
  return resultBanEntry.address;
}
- (MPBanListBanEntryBuilder*) setAddress:(NSData*) value {
  resultBanEntry.hasAddress = YES;
  resultBanEntry.address = value;
  return self;
}
- (MPBanListBanEntryBuilder*) clearAddress {
  resultBanEntry.hasAddress = NO;
  resultBanEntry.address = [NSData data];
  return self;
}
- (BOOL) hasMask {
  return resultBanEntry.hasMask;
}
- (UInt32) mask {
  return resultBanEntry.mask;
}
- (MPBanListBanEntryBuilder*) setMask:(UInt32) value {
  resultBanEntry.hasMask = YES;
  resultBanEntry.mask = value;
  return self;
}
- (MPBanListBanEntryBuilder*) clearMask {
  resultBanEntry.hasMask = NO;
  resultBanEntry.mask = 0;
  return self;
}
- (BOOL) hasName {
  return resultBanEntry.hasName;
}
- (NSString*) name {
  return resultBanEntry.name;
}
- (MPBanListBanEntryBuilder*) setName:(NSString*) value {
  resultBanEntry.hasName = YES;
  resultBanEntry.name = value;
  return self;
}
- (MPBanListBanEntryBuilder*) clearName {
  resultBanEntry.hasName = NO;
  resultBanEntry.name = @"";
  return self;
}
- (BOOL) hasHash {
  return resultBanEntry.hasHash;
}
- (NSString*) pb_hash {
  return resultBanEntry.pb_hash;
}
- (MPBanListBanEntryBuilder*) setHash:(NSString*) value {
  resultBanEntry.hasHash = YES;
  resultBanEntry.pb_hash = value;
  return self;
}
- (MPBanListBanEntryBuilder*) clearHash {
  resultBanEntry.hasHash = NO;
  resultBanEntry.pb_hash = @"";
  return self;
}
- (BOOL) hasReason {
  return resultBanEntry.hasReason;
}
- (NSString*) reason {
  return resultBanEntry.reason;
}
- (MPBanListBanEntryBuilder*) setReason:(NSString*) value {
  resultBanEntry.hasReason = YES;
  resultBanEntry.reason = value;
  return self;
}
- (MPBanListBanEntryBuilder*) clearReason {
  resultBanEntry.hasReason = NO;
  resultBanEntry.reason = @"";
  return self;
}
- (BOOL) hasStart {
  return resultBanEntry.hasStart;
}
- (NSString*) start {
  return resultBanEntry.start;
}
- (MPBanListBanEntryBuilder*) setStart:(NSString*) value {
  resultBanEntry.hasStart = YES;
  resultBanEntry.start = value;
  return self;
}
- (MPBanListBanEntryBuilder*) clearStart {
  resultBanEntry.hasStart = NO;
  resultBanEntry.start = @"";
  return self;
}
- (BOOL) hasDuration {
  return resultBanEntry.hasDuration;
}
- (UInt32) duration {
  return resultBanEntry.duration;
}
- (MPBanListBanEntryBuilder*) setDuration:(UInt32) value {
  resultBanEntry.hasDuration = YES;
  resultBanEntry.duration = value;
  return self;
}
- (MPBanListBanEntryBuilder*) clearDuration {
  resultBanEntry.hasDuration = NO;
  resultBanEntry.duration = 0;
  return self;
}
@end

@interface MPBanListBuilder()
@property (strong) MPBanList* resultBanList;
@end

@implementation MPBanListBuilder
@synthesize resultBanList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBanList = [[MPBanList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBanList;
}
- (MPBanListBuilder*) clear {
  self.resultBanList = [[MPBanList alloc] init];
  return self;
}
- (MPBanListBuilder*) clone {
  return [MPBanList builderWithPrototype:resultBanList];
}
- (MPBanList*) defaultInstance {
  return [MPBanList defaultInstance];
}
- (MPBanList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPBanList*) buildPartial {
  MPBanList* returnMe = resultBanList;
  self.resultBanList = nil;
  return returnMe;
}
- (MPBanListBuilder*) mergeFrom:(MPBanList*) other {
  if (other == [MPBanList defaultInstance]) {
    return self;
  }
  if (other.bansArray.count > 0) {
    if (resultBanList.bansArray == nil) {
      resultBanList.bansArray = [[NSMutableArray alloc] initWithArray:other.bansArray];
    } else {
      [resultBanList.bansArray addObjectsFromArray:other.bansArray];
    }
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPBanListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPBanListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MPBanListBanEntryBuilder* subBuilder = [MPBanListBanEntry builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBans:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setQuery:[input readBool]];
        break;
      }
    }
  }
}
- (NSMutableArray<MPBanListBanEntry*> *)bans {
  return resultBanList.bansArray;
}
- (MPBanListBanEntry*)bansAtIndex:(NSUInteger)index {
  return [resultBanList bansAtIndex:index];
}
- (MPBanListBuilder *)addBans:(MPBanListBanEntry*)value {
  if (resultBanList.bansArray == nil) {
    resultBanList.bansArray = [[NSMutableArray alloc]init];
  }
  [resultBanList.bansArray addObject:value];
  return self;
}
- (MPBanListBuilder *)setBansArray:(NSArray<MPBanListBanEntry*> *)array {
  resultBanList.bansArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MPBanListBuilder *)clearBans {
  resultBanList.bansArray = nil;
  return self;
}
- (BOOL) hasQuery {
  return resultBanList.hasQuery;
}
- (BOOL) query {
  return resultBanList.query;
}
- (MPBanListBuilder*) setQuery:(BOOL) value {
  resultBanList.hasQuery = YES;
  resultBanList.query = value;
  return self;
}
- (MPBanListBuilder*) clearQuery {
  resultBanList.hasQuery = NO;
  resultBanList.query = NO;
  return self;
}
@end

@interface MPTextMessage ()
@property UInt32 actor;
@property (strong) PBAppendableArray * sessionArray;
@property (strong) PBAppendableArray * channelIdArray;
@property (strong) PBAppendableArray * treeIdArray;
@property (strong) NSString* message;
@end

@implementation MPTextMessage

- (BOOL) hasActor {
  return !!hasActor_;
}
- (void) setHasActor:(BOOL) _value_ {
  hasActor_ = !!_value_;
}
@synthesize actor;
@synthesize sessionArray;
@dynamic session;
@synthesize channelIdArray;
@dynamic channelId;
@synthesize treeIdArray;
@dynamic treeId;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (instancetype) init {
  if ((self = [super init])) {
    self.actor = 0;
    self.message = @"";
  }
  return self;
}
static MPTextMessage* defaultMPTextMessageInstance = nil;
+ (void) initialize {
  if (self == [MPTextMessage class]) {
    defaultMPTextMessageInstance = [[MPTextMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPTextMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultMPTextMessageInstance;
}
- (PBArray *)session {
  return sessionArray;
}
- (UInt32)sessionAtIndex:(NSUInteger)index {
  return [sessionArray uint32AtIndex:index];
}
- (PBArray *)channelId {
  return channelIdArray;
}
- (UInt32)channelIdAtIndex:(NSUInteger)index {
  return [channelIdArray uint32AtIndex:index];
}
- (PBArray *)treeId {
  return treeIdArray;
}
- (UInt32)treeIdAtIndex:(NSUInteger)index {
  return [treeIdArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasMessage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasActor) {
    [output writeUInt32:1 value:self.actor];
  }
  const NSUInteger sessionArrayCount = self.sessionArray.count;
  if (sessionArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.sessionArray.data;
    for (NSUInteger i = 0; i < sessionArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  const NSUInteger channelIdArrayCount = self.channelIdArray.count;
  if (channelIdArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.channelIdArray.data;
    for (NSUInteger i = 0; i < channelIdArrayCount; ++i) {
      [output writeUInt32:3 value:values[i]];
    }
  }
  const NSUInteger treeIdArrayCount = self.treeIdArray.count;
  if (treeIdArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.treeIdArray.data;
    for (NSUInteger i = 0; i < treeIdArrayCount; ++i) {
      [output writeUInt32:4 value:values[i]];
    }
  }
  if (self.hasMessage) {
    [output writeString:5 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasActor) {
    size_ += computeUInt32Size(1, self.actor);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionArray.count;
    const UInt32 *values = (const UInt32 *)self.sessionArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.channelIdArray.count;
    const UInt32 *values = (const UInt32 *)self.channelIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.treeIdArray.count;
    const UInt32 *values = (const UInt32 *)self.treeIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(5, self.message);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPTextMessage*) parseFromData:(NSData*) data {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromData:data] build];
}
+ (MPTextMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPTextMessage*) parseFromInputStream:(NSInputStream*) input {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromInputStream:input] build];
}
+ (MPTextMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPTextMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromCodedInputStream:input] build];
}
+ (MPTextMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPTextMessage*)[[[MPTextMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPTextMessageBuilder*) builder {
  return [[MPTextMessageBuilder alloc] init];
}
+ (MPTextMessageBuilder*) builderWithPrototype:(MPTextMessage*) prototype {
  return [[MPTextMessage builder] mergeFrom:prototype];
}
- (MPTextMessageBuilder*) builder {
  return [MPTextMessage builder];
}
- (MPTextMessageBuilder*) toBuilder {
  return [MPTextMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasActor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actor", [NSNumber numberWithInteger:self.actor]];
  }
  [self.sessionArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", obj];
  }];
  [self.channelIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", obj];
  }];
  [self.treeIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"treeId", obj];
  }];
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasActor) {
    [dictionary setObject: [NSNumber numberWithInteger:self.actor] forKey: @"actor"];
  }
  NSMutableArray * sessionArrayArray = [NSMutableArray new];
  NSUInteger sessionArrayCount=self.sessionArray.count;
  for(int i=0;i<sessionArrayCount;i++){
    [sessionArrayArray addObject: @([self.sessionArray uint32AtIndex:i])];
  }
  [dictionary setObject: sessionArrayArray forKey: @"session"];
  NSMutableArray * channelIdArrayArray = [NSMutableArray new];
  NSUInteger channelIdArrayCount=self.channelIdArray.count;
  for(int i=0;i<channelIdArrayCount;i++){
    [channelIdArrayArray addObject: @([self.channelIdArray uint32AtIndex:i])];
  }
  [dictionary setObject: channelIdArrayArray forKey: @"channelId"];
  NSMutableArray * treeIdArrayArray = [NSMutableArray new];
  NSUInteger treeIdArrayCount=self.treeIdArray.count;
  for(int i=0;i<treeIdArrayCount;i++){
    [treeIdArrayArray addObject: @([self.treeIdArray uint32AtIndex:i])];
  }
  [dictionary setObject: treeIdArrayArray forKey: @"treeId"];
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPTextMessage class]]) {
    return NO;
  }
  MPTextMessage *otherMessage = other;
  return
      self.hasActor == otherMessage.hasActor &&
      (!self.hasActor || self.actor == otherMessage.actor) &&
      [self.sessionArray isEqualToArray:otherMessage.sessionArray] &&
      [self.channelIdArray isEqualToArray:otherMessage.channelIdArray] &&
      [self.treeIdArray isEqualToArray:otherMessage.treeIdArray] &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasActor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.actor] hash];
  }
  [self.sessionArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.channelIdArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.treeIdArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPTextMessageBuilder()
@property (strong) MPTextMessage* resultTextMessage;
@end

@implementation MPTextMessageBuilder
@synthesize resultTextMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTextMessage = [[MPTextMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTextMessage;
}
- (MPTextMessageBuilder*) clear {
  self.resultTextMessage = [[MPTextMessage alloc] init];
  return self;
}
- (MPTextMessageBuilder*) clone {
  return [MPTextMessage builderWithPrototype:resultTextMessage];
}
- (MPTextMessage*) defaultInstance {
  return [MPTextMessage defaultInstance];
}
- (MPTextMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPTextMessage*) buildPartial {
  MPTextMessage* returnMe = resultTextMessage;
  self.resultTextMessage = nil;
  return returnMe;
}
- (MPTextMessageBuilder*) mergeFrom:(MPTextMessage*) other {
  if (other == [MPTextMessage defaultInstance]) {
    return self;
  }
  if (other.hasActor) {
    [self setActor:other.actor];
  }
  if (other.sessionArray.count > 0) {
    if (resultTextMessage.sessionArray == nil) {
      resultTextMessage.sessionArray = [other.sessionArray copy];
    } else {
      [resultTextMessage.sessionArray appendArray:other.sessionArray];
    }
  }
  if (other.channelIdArray.count > 0) {
    if (resultTextMessage.channelIdArray == nil) {
      resultTextMessage.channelIdArray = [other.channelIdArray copy];
    } else {
      [resultTextMessage.channelIdArray appendArray:other.channelIdArray];
    }
  }
  if (other.treeIdArray.count > 0) {
    if (resultTextMessage.treeIdArray == nil) {
      resultTextMessage.treeIdArray = [other.treeIdArray copy];
    } else {
      [resultTextMessage.treeIdArray appendArray:other.treeIdArray];
    }
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPTextMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPTextMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setActor:[input readUInt32]];
        break;
      }
      case 16: {
        [self addSession:[input readUInt32]];
        break;
      }
      case 24: {
        [self addChannelId:[input readUInt32]];
        break;
      }
      case 32: {
        [self addTreeId:[input readUInt32]];
        break;
      }
      case 42: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasActor {
  return resultTextMessage.hasActor;
}
- (UInt32) actor {
  return resultTextMessage.actor;
}
- (MPTextMessageBuilder*) setActor:(UInt32) value {
  resultTextMessage.hasActor = YES;
  resultTextMessage.actor = value;
  return self;
}
- (MPTextMessageBuilder*) clearActor {
  resultTextMessage.hasActor = NO;
  resultTextMessage.actor = 0;
  return self;
}
- (PBAppendableArray *)session {
  return resultTextMessage.sessionArray;
}
- (UInt32)sessionAtIndex:(NSUInteger)index {
  return [resultTextMessage sessionAtIndex:index];
}
- (MPTextMessageBuilder *)addSession:(UInt32)value {
  if (resultTextMessage.sessionArray == nil) {
    resultTextMessage.sessionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTextMessage.sessionArray addUint32:value];
  return self;
}
- (MPTextMessageBuilder *)setSessionArray:(NSArray *)array {
  resultTextMessage.sessionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessageBuilder *)setSessionValues:(const UInt32 *)values count:(NSUInteger)count {
  resultTextMessage.sessionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessageBuilder *)clearSession {
  resultTextMessage.sessionArray = nil;
  return self;
}
- (PBAppendableArray *)channelId {
  return resultTextMessage.channelIdArray;
}
- (UInt32)channelIdAtIndex:(NSUInteger)index {
  return [resultTextMessage channelIdAtIndex:index];
}
- (MPTextMessageBuilder *)addChannelId:(UInt32)value {
  if (resultTextMessage.channelIdArray == nil) {
    resultTextMessage.channelIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTextMessage.channelIdArray addUint32:value];
  return self;
}
- (MPTextMessageBuilder *)setChannelIdArray:(NSArray *)array {
  resultTextMessage.channelIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessageBuilder *)setChannelIdValues:(const UInt32 *)values count:(NSUInteger)count {
  resultTextMessage.channelIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessageBuilder *)clearChannelId {
  resultTextMessage.channelIdArray = nil;
  return self;
}
- (PBAppendableArray *)treeId {
  return resultTextMessage.treeIdArray;
}
- (UInt32)treeIdAtIndex:(NSUInteger)index {
  return [resultTextMessage treeIdAtIndex:index];
}
- (MPTextMessageBuilder *)addTreeId:(UInt32)value {
  if (resultTextMessage.treeIdArray == nil) {
    resultTextMessage.treeIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTextMessage.treeIdArray addUint32:value];
  return self;
}
- (MPTextMessageBuilder *)setTreeIdArray:(NSArray *)array {
  resultTextMessage.treeIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessageBuilder *)setTreeIdValues:(const UInt32 *)values count:(NSUInteger)count {
  resultTextMessage.treeIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPTextMessageBuilder *)clearTreeId {
  resultTextMessage.treeIdArray = nil;
  return self;
}
- (BOOL) hasMessage {
  return resultTextMessage.hasMessage;
}
- (NSString*) message {
  return resultTextMessage.message;
}
- (MPTextMessageBuilder*) setMessage:(NSString*) value {
  resultTextMessage.hasMessage = YES;
  resultTextMessage.message = value;
  return self;
}
- (MPTextMessageBuilder*) clearMessage {
  resultTextMessage.hasMessage = NO;
  resultTextMessage.message = @"";
  return self;
}
@end

@interface MPPermissionDenied ()
@property UInt32 permission;
@property UInt32 channelId;
@property UInt32 session;
@property (strong) NSString* reason;
@property MPPermissionDeniedDenyType type;
@property (strong) NSString* name;
@end

@implementation MPPermissionDenied

- (BOOL) hasPermission {
  return !!hasPermission_;
}
- (void) setHasPermission:(BOOL) _value_ {
  hasPermission_ = !!_value_;
}
@synthesize permission;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) _value_ {
  hasChannelId_ = !!_value_;
}
@synthesize channelId;
- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) _value_ {
  hasSession_ = !!_value_;
}
@synthesize session;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (instancetype) init {
  if ((self = [super init])) {
    self.permission = 0;
    self.channelId = 0;
    self.session = 0;
    self.reason = @"";
    self.type = MPPermissionDeniedDenyTypeText;
    self.name = @"";
  }
  return self;
}
static MPPermissionDenied* defaultMPPermissionDeniedInstance = nil;
+ (void) initialize {
  if (self == [MPPermissionDenied class]) {
    defaultMPPermissionDeniedInstance = [[MPPermissionDenied alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPPermissionDeniedInstance;
}
- (instancetype) defaultInstance {
  return defaultMPPermissionDeniedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPermission) {
    [output writeUInt32:1 value:self.permission];
  }
  if (self.hasChannelId) {
    [output writeUInt32:2 value:self.channelId];
  }
  if (self.hasSession) {
    [output writeUInt32:3 value:self.session];
  }
  if (self.hasReason) {
    [output writeString:4 value:self.reason];
  }
  if (self.hasType) {
    [output writeEnum:5 value:self.type];
  }
  if (self.hasName) {
    [output writeString:6 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPermission) {
    size_ += computeUInt32Size(1, self.permission);
  }
  if (self.hasChannelId) {
    size_ += computeUInt32Size(2, self.channelId);
  }
  if (self.hasSession) {
    size_ += computeUInt32Size(3, self.session);
  }
  if (self.hasReason) {
    size_ += computeStringSize(4, self.reason);
  }
  if (self.hasType) {
    size_ += computeEnumSize(5, self.type);
  }
  if (self.hasName) {
    size_ += computeStringSize(6, self.name);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPPermissionDenied*) parseFromData:(NSData*) data {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromData:data] build];
}
+ (MPPermissionDenied*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionDenied*) parseFromInputStream:(NSInputStream*) input {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromInputStream:input] build];
}
+ (MPPermissionDenied*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionDenied*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromCodedInputStream:input] build];
}
+ (MPPermissionDenied*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionDenied*)[[[MPPermissionDenied builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionDeniedBuilder*) builder {
  return [[MPPermissionDeniedBuilder alloc] init];
}
+ (MPPermissionDeniedBuilder*) builderWithPrototype:(MPPermissionDenied*) prototype {
  return [[MPPermissionDenied builder] mergeFrom:prototype];
}
- (MPPermissionDeniedBuilder*) builder {
  return [MPPermissionDenied builder];
}
- (MPPermissionDeniedBuilder*) toBuilder {
  return [MPPermissionDenied builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPermission) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permission", [NSNumber numberWithInteger:self.permission]];
  }
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInteger:self.channelId]];
  }
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInteger:self.session]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromMPPermissionDeniedDenyType(self.type)];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPermission) {
    [dictionary setObject: [NSNumber numberWithInteger:self.permission] forKey: @"permission"];
  }
  if (self.hasChannelId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.channelId] forKey: @"channelId"];
  }
  if (self.hasSession) {
    [dictionary setObject: [NSNumber numberWithInteger:self.session] forKey: @"session"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPPermissionDenied class]]) {
    return NO;
  }
  MPPermissionDenied *otherMessage = other;
  return
      self.hasPermission == otherMessage.hasPermission &&
      (!self.hasPermission || self.permission == otherMessage.permission) &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPermission) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.permission] hash];
  }
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.channelId] hash];
  }
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.session] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL MPPermissionDeniedDenyTypeIsValidValue(MPPermissionDeniedDenyType value) {
  switch (value) {
    case MPPermissionDeniedDenyTypeText:
    case MPPermissionDeniedDenyTypePermission:
    case MPPermissionDeniedDenyTypeSuperUser:
    case MPPermissionDeniedDenyTypeChannelName:
    case MPPermissionDeniedDenyTypeTextTooLong:
    case MPPermissionDeniedDenyTypeH9K:
    case MPPermissionDeniedDenyTypeTemporaryChannel:
    case MPPermissionDeniedDenyTypeMissingCertificate:
    case MPPermissionDeniedDenyTypeUserName:
    case MPPermissionDeniedDenyTypeChannelFull:
    case MPPermissionDeniedDenyTypeNestingLimit:
    case MPPermissionDeniedDenyTypeChannelCountLimit:
    case MPPermissionDeniedDenyTypeChannelListenerLimit:
    case MPPermissionDeniedDenyTypeUserListenerLimit:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromMPPermissionDeniedDenyType(MPPermissionDeniedDenyType value) {
  switch (value) {
    case MPPermissionDeniedDenyTypeText:
      return @"MPPermissionDeniedDenyTypeText";
    case MPPermissionDeniedDenyTypePermission:
      return @"MPPermissionDeniedDenyTypePermission";
    case MPPermissionDeniedDenyTypeSuperUser:
      return @"MPPermissionDeniedDenyTypeSuperUser";
    case MPPermissionDeniedDenyTypeChannelName:
      return @"MPPermissionDeniedDenyTypeChannelName";
    case MPPermissionDeniedDenyTypeTextTooLong:
      return @"MPPermissionDeniedDenyTypeTextTooLong";
    case MPPermissionDeniedDenyTypeH9K:
      return @"MPPermissionDeniedDenyTypeH9K";
    case MPPermissionDeniedDenyTypeTemporaryChannel:
      return @"MPPermissionDeniedDenyTypeTemporaryChannel";
    case MPPermissionDeniedDenyTypeMissingCertificate:
      return @"MPPermissionDeniedDenyTypeMissingCertificate";
    case MPPermissionDeniedDenyTypeUserName:
      return @"MPPermissionDeniedDenyTypeUserName";
    case MPPermissionDeniedDenyTypeChannelFull:
      return @"MPPermissionDeniedDenyTypeChannelFull";
    case MPPermissionDeniedDenyTypeNestingLimit:
      return @"MPPermissionDeniedDenyTypeNestingLimit";
    case MPPermissionDeniedDenyTypeChannelCountLimit:
      return @"MPPermissionDeniedDenyTypeChannelCountLimit";
    case MPPermissionDeniedDenyTypeChannelListenerLimit:
      return @"MPPermissionDeniedDenyTypeChannelListenerLimit";
    case MPPermissionDeniedDenyTypeUserListenerLimit:
      return @"MPPermissionDeniedDenyTypeUserListenerLimit";
    default:
      return nil;
  }
}

@interface MPPermissionDeniedBuilder()
@property (strong) MPPermissionDenied* resultPermissionDenied;
@end

@implementation MPPermissionDeniedBuilder
@synthesize resultPermissionDenied;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPermissionDenied = [[MPPermissionDenied alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPermissionDenied;
}
- (MPPermissionDeniedBuilder*) clear {
  self.resultPermissionDenied = [[MPPermissionDenied alloc] init];
  return self;
}
- (MPPermissionDeniedBuilder*) clone {
  return [MPPermissionDenied builderWithPrototype:resultPermissionDenied];
}
- (MPPermissionDenied*) defaultInstance {
  return [MPPermissionDenied defaultInstance];
}
- (MPPermissionDenied*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPPermissionDenied*) buildPartial {
  MPPermissionDenied* returnMe = resultPermissionDenied;
  self.resultPermissionDenied = nil;
  return returnMe;
}
- (MPPermissionDeniedBuilder*) mergeFrom:(MPPermissionDenied*) other {
  if (other == [MPPermissionDenied defaultInstance]) {
    return self;
  }
  if (other.hasPermission) {
    [self setPermission:other.permission];
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPPermissionDeniedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPPermissionDeniedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPermission:[input readUInt32]];
        break;
      }
      case 16: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 34: {
        [self setReason:[input readString]];
        break;
      }
      case 40: {
        MPPermissionDeniedDenyType value = (MPPermissionDeniedDenyType)[input readEnum];
        if (MPPermissionDeniedDenyTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPermission {
  return resultPermissionDenied.hasPermission;
}
- (UInt32) permission {
  return resultPermissionDenied.permission;
}
- (MPPermissionDeniedBuilder*) setPermission:(UInt32) value {
  resultPermissionDenied.hasPermission = YES;
  resultPermissionDenied.permission = value;
  return self;
}
- (MPPermissionDeniedBuilder*) clearPermission {
  resultPermissionDenied.hasPermission = NO;
  resultPermissionDenied.permission = 0;
  return self;
}
- (BOOL) hasChannelId {
  return resultPermissionDenied.hasChannelId;
}
- (UInt32) channelId {
  return resultPermissionDenied.channelId;
}
- (MPPermissionDeniedBuilder*) setChannelId:(UInt32) value {
  resultPermissionDenied.hasChannelId = YES;
  resultPermissionDenied.channelId = value;
  return self;
}
- (MPPermissionDeniedBuilder*) clearChannelId {
  resultPermissionDenied.hasChannelId = NO;
  resultPermissionDenied.channelId = 0;
  return self;
}
- (BOOL) hasSession {
  return resultPermissionDenied.hasSession;
}
- (UInt32) session {
  return resultPermissionDenied.session;
}
- (MPPermissionDeniedBuilder*) setSession:(UInt32) value {
  resultPermissionDenied.hasSession = YES;
  resultPermissionDenied.session = value;
  return self;
}
- (MPPermissionDeniedBuilder*) clearSession {
  resultPermissionDenied.hasSession = NO;
  resultPermissionDenied.session = 0;
  return self;
}
- (BOOL) hasReason {
  return resultPermissionDenied.hasReason;
}
- (NSString*) reason {
  return resultPermissionDenied.reason;
}
- (MPPermissionDeniedBuilder*) setReason:(NSString*) value {
  resultPermissionDenied.hasReason = YES;
  resultPermissionDenied.reason = value;
  return self;
}
- (MPPermissionDeniedBuilder*) clearReason {
  resultPermissionDenied.hasReason = NO;
  resultPermissionDenied.reason = @"";
  return self;
}
- (BOOL) hasType {
  return resultPermissionDenied.hasType;
}
- (MPPermissionDeniedDenyType) type {
  return resultPermissionDenied.type;
}
- (MPPermissionDeniedBuilder*) setType:(MPPermissionDeniedDenyType) value {
  resultPermissionDenied.hasType = YES;
  resultPermissionDenied.type = value;
  return self;
}
- (MPPermissionDeniedBuilder*) clearType {
  resultPermissionDenied.hasType = NO;
  resultPermissionDenied.type = MPPermissionDeniedDenyTypeText;
  return self;
}
- (BOOL) hasName {
  return resultPermissionDenied.hasName;
}
- (NSString*) name {
  return resultPermissionDenied.name;
}
- (MPPermissionDeniedBuilder*) setName:(NSString*) value {
  resultPermissionDenied.hasName = YES;
  resultPermissionDenied.name = value;
  return self;
}
- (MPPermissionDeniedBuilder*) clearName {
  resultPermissionDenied.hasName = NO;
  resultPermissionDenied.name = @"";
  return self;
}
@end

@interface MPACL ()
@property UInt32 channelId;
@property BOOL inheritAcls;
@property (strong) NSMutableArray<MPACLChanGroup*> * groupsArray;
@property (strong) NSMutableArray<MPACLChanACL*> * aclsArray;
@property BOOL query;
@end

@implementation MPACL

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) _value_ {
  hasChannelId_ = !!_value_;
}
@synthesize channelId;
- (BOOL) hasInheritAcls {
  return !!hasInheritAcls_;
}
- (void) setHasInheritAcls:(BOOL) _value_ {
  hasInheritAcls_ = !!_value_;
}
- (BOOL) inheritAcls {
  return !!inheritAcls_;
}
- (void) setInheritAcls:(BOOL) _value_ {
  inheritAcls_ = !!_value_;
}
@synthesize groupsArray;
@dynamic groups;
@synthesize aclsArray;
@dynamic acls;
- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
- (BOOL) query {
  return !!query_;
}
- (void) setQuery:(BOOL) _value_ {
  query_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.channelId = 0;
    self.inheritAcls = YES;
    self.query = NO;
  }
  return self;
}
static MPACL* defaultMPACLInstance = nil;
+ (void) initialize {
  if (self == [MPACL class]) {
    defaultMPACLInstance = [[MPACL alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPACLInstance;
}
- (instancetype) defaultInstance {
  return defaultMPACLInstance;
}
- (NSArray<MPACLChanGroup*> *)groups {
  return groupsArray;
}
- (MPACLChanGroup*)groupsAtIndex:(NSUInteger)index {
  return [groupsArray objectAtIndex:index];
}
- (NSArray<MPACLChanACL*> *)acls {
  return aclsArray;
}
- (MPACLChanACL*)aclsAtIndex:(NSUInteger)index {
  return [aclsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasChannelId) {
    return NO;
  }
  __block BOOL isInitgroups = YES;
   [self.groups enumerateObjectsUsingBlock:^(MPACLChanGroup *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitgroups = NO;
      *stop = YES;
    }
  }];
  if (!isInitgroups) return isInitgroups;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeUInt32:1 value:self.channelId];
  }
  if (self.hasInheritAcls) {
    [output writeBool:2 value:self.inheritAcls];
  }
  [self.groupsArray enumerateObjectsUsingBlock:^(MPACLChanGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.aclsArray enumerateObjectsUsingBlock:^(MPACLChanACL *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  if (self.hasQuery) {
    [output writeBool:5 value:self.query];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelId) {
    size_ += computeUInt32Size(1, self.channelId);
  }
  if (self.hasInheritAcls) {
    size_ += computeBoolSize(2, self.inheritAcls);
  }
  [self.groupsArray enumerateObjectsUsingBlock:^(MPACLChanGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  [self.aclsArray enumerateObjectsUsingBlock:^(MPACLChanACL *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  if (self.hasQuery) {
    size_ += computeBoolSize(5, self.query);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPACL*) parseFromData:(NSData*) data {
  return (MPACL*)[[[MPACL builder] mergeFromData:data] build];
}
+ (MPACL*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL*)[[[MPACL builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPACL*) parseFromInputStream:(NSInputStream*) input {
  return (MPACL*)[[[MPACL builder] mergeFromInputStream:input] build];
}
+ (MPACL*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL*)[[[MPACL builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACL*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPACL*)[[[MPACL builder] mergeFromCodedInputStream:input] build];
}
+ (MPACL*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACL*)[[[MPACL builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACLBuilder*) builder {
  return [[MPACLBuilder alloc] init];
}
+ (MPACLBuilder*) builderWithPrototype:(MPACL*) prototype {
  return [[MPACL builder] mergeFrom:prototype];
}
- (MPACLBuilder*) builder {
  return [MPACL builder];
}
- (MPACLBuilder*) toBuilder {
  return [MPACL builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInteger:self.channelId]];
  }
  if (self.hasInheritAcls) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inheritAcls", [NSNumber numberWithBool:self.inheritAcls]];
  }
  [self.groupsArray enumerateObjectsUsingBlock:^(MPACLChanGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groups"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.aclsArray enumerateObjectsUsingBlock:^(MPACLChanACL *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"acls"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", [NSNumber numberWithBool:self.query]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChannelId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.channelId] forKey: @"channelId"];
  }
  if (self.hasInheritAcls) {
    [dictionary setObject: [NSNumber numberWithBool:self.inheritAcls] forKey: @"inheritAcls"];
  }
  for (MPACLChanGroup* element in self.groupsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"groups"];
  }
  for (MPACLChanACL* element in self.aclsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"acls"];
  }
  if (self.hasQuery) {
    [dictionary setObject: [NSNumber numberWithBool:self.query] forKey: @"query"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPACL class]]) {
    return NO;
  }
  MPACL *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasInheritAcls == otherMessage.hasInheritAcls &&
      (!self.hasInheritAcls || self.inheritAcls == otherMessage.inheritAcls) &&
      [self.groupsArray isEqualToArray:otherMessage.groupsArray] &&
      [self.aclsArray isEqualToArray:otherMessage.aclsArray] &&
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || self.query == otherMessage.query) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.channelId] hash];
  }
  if (self.hasInheritAcls) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inheritAcls] hash];
  }
  [self.groupsArray enumerateObjectsUsingBlock:^(MPACLChanGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.aclsArray enumerateObjectsUsingBlock:^(MPACLChanACL *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.query] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPACLChanGroup ()
@property (strong) NSString* name;
@property BOOL inherited;
@property BOOL inherit;
@property BOOL inheritable;
@property (strong) PBAppendableArray * addArray;
@property (strong) PBAppendableArray * removeArray;
@property (strong) PBAppendableArray * inheritedMembersArray;
@end

@implementation MPACLChanGroup

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasInherited {
  return !!hasInherited_;
}
- (void) setHasInherited:(BOOL) _value_ {
  hasInherited_ = !!_value_;
}
- (BOOL) inherited {
  return !!inherited_;
}
- (void) setInherited:(BOOL) _value_ {
  inherited_ = !!_value_;
}
- (BOOL) hasInherit {
  return !!hasInherit_;
}
- (void) setHasInherit:(BOOL) _value_ {
  hasInherit_ = !!_value_;
}
- (BOOL) inherit {
  return !!inherit_;
}
- (void) setInherit:(BOOL) _value_ {
  inherit_ = !!_value_;
}
- (BOOL) hasInheritable {
  return !!hasInheritable_;
}
- (void) setHasInheritable:(BOOL) _value_ {
  hasInheritable_ = !!_value_;
}
- (BOOL) inheritable {
  return !!inheritable_;
}
- (void) setInheritable:(BOOL) _value_ {
  inheritable_ = !!_value_;
}
@synthesize addArray;
@dynamic add;
@synthesize removeArray;
@dynamic remove;
@synthesize inheritedMembersArray;
@dynamic inheritedMembers;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.inherited = YES;
    self.inherit = YES;
    self.inheritable = YES;
  }
  return self;
}
static MPACLChanGroup* defaultMPACLChanGroupInstance = nil;
+ (void) initialize {
  if (self == [MPACLChanGroup class]) {
    defaultMPACLChanGroupInstance = [[MPACLChanGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPACLChanGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultMPACLChanGroupInstance;
}
- (PBArray *)add {
  return addArray;
}
- (UInt32)addAtIndex:(NSUInteger)index {
  return [addArray uint32AtIndex:index];
}
- (PBArray *)remove {
  return removeArray;
}
- (UInt32)removeAtIndex:(NSUInteger)index {
  return [removeArray uint32AtIndex:index];
}
- (PBArray *)inheritedMembers {
  return inheritedMembersArray;
}
- (UInt32)inheritedMembersAtIndex:(NSUInteger)index {
  return [inheritedMembersArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasInherited) {
    [output writeBool:2 value:self.inherited];
  }
  if (self.hasInherit) {
    [output writeBool:3 value:self.inherit];
  }
  if (self.hasInheritable) {
    [output writeBool:4 value:self.inheritable];
  }
  const NSUInteger addArrayCount = self.addArray.count;
  if (addArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.addArray.data;
    for (NSUInteger i = 0; i < addArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  const NSUInteger removeArrayCount = self.removeArray.count;
  if (removeArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.removeArray.data;
    for (NSUInteger i = 0; i < removeArrayCount; ++i) {
      [output writeUInt32:6 value:values[i]];
    }
  }
  const NSUInteger inheritedMembersArrayCount = self.inheritedMembersArray.count;
  if (inheritedMembersArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.inheritedMembersArray.data;
    for (NSUInteger i = 0; i < inheritedMembersArrayCount; ++i) {
      [output writeUInt32:7 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasInherited) {
    size_ += computeBoolSize(2, self.inherited);
  }
  if (self.hasInherit) {
    size_ += computeBoolSize(3, self.inherit);
  }
  if (self.hasInheritable) {
    size_ += computeBoolSize(4, self.inheritable);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.addArray.count;
    const UInt32 *values = (const UInt32 *)self.addArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.removeArray.count;
    const UInt32 *values = (const UInt32 *)self.removeArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.inheritedMembersArray.count;
    const UInt32 *values = (const UInt32 *)self.inheritedMembersArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPACLChanGroup*) parseFromData:(NSData*) data {
  return (MPACLChanGroup*)[[[MPACLChanGroup builder] mergeFromData:data] build];
}
+ (MPACLChanGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACLChanGroup*)[[[MPACLChanGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPACLChanGroup*) parseFromInputStream:(NSInputStream*) input {
  return (MPACLChanGroup*)[[[MPACLChanGroup builder] mergeFromInputStream:input] build];
}
+ (MPACLChanGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACLChanGroup*)[[[MPACLChanGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACLChanGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPACLChanGroup*)[[[MPACLChanGroup builder] mergeFromCodedInputStream:input] build];
}
+ (MPACLChanGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACLChanGroup*)[[[MPACLChanGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACLChanGroupBuilder*) builder {
  return [[MPACLChanGroupBuilder alloc] init];
}
+ (MPACLChanGroupBuilder*) builderWithPrototype:(MPACLChanGroup*) prototype {
  return [[MPACLChanGroup builder] mergeFrom:prototype];
}
- (MPACLChanGroupBuilder*) builder {
  return [MPACLChanGroup builder];
}
- (MPACLChanGroupBuilder*) toBuilder {
  return [MPACLChanGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasInherited) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inherited", [NSNumber numberWithBool:self.inherited]];
  }
  if (self.hasInherit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inherit", [NSNumber numberWithBool:self.inherit]];
  }
  if (self.hasInheritable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inheritable", [NSNumber numberWithBool:self.inheritable]];
  }
  [self.addArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"add", obj];
  }];
  [self.removeArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remove", obj];
  }];
  [self.inheritedMembersArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inheritedMembers", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasInherited) {
    [dictionary setObject: [NSNumber numberWithBool:self.inherited] forKey: @"inherited"];
  }
  if (self.hasInherit) {
    [dictionary setObject: [NSNumber numberWithBool:self.inherit] forKey: @"inherit"];
  }
  if (self.hasInheritable) {
    [dictionary setObject: [NSNumber numberWithBool:self.inheritable] forKey: @"inheritable"];
  }
  NSMutableArray * addArrayArray = [NSMutableArray new];
  NSUInteger addArrayCount=self.addArray.count;
  for(int i=0;i<addArrayCount;i++){
    [addArrayArray addObject: @([self.addArray uint32AtIndex:i])];
  }
  [dictionary setObject: addArrayArray forKey: @"add"];
  NSMutableArray * removeArrayArray = [NSMutableArray new];
  NSUInteger removeArrayCount=self.removeArray.count;
  for(int i=0;i<removeArrayCount;i++){
    [removeArrayArray addObject: @([self.removeArray uint32AtIndex:i])];
  }
  [dictionary setObject: removeArrayArray forKey: @"remove"];
  NSMutableArray * inheritedMembersArrayArray = [NSMutableArray new];
  NSUInteger inheritedMembersArrayCount=self.inheritedMembersArray.count;
  for(int i=0;i<inheritedMembersArrayCount;i++){
    [inheritedMembersArrayArray addObject: @([self.inheritedMembersArray uint32AtIndex:i])];
  }
  [dictionary setObject: inheritedMembersArrayArray forKey: @"inheritedMembers"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPACLChanGroup class]]) {
    return NO;
  }
  MPACLChanGroup *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasInherited == otherMessage.hasInherited &&
      (!self.hasInherited || self.inherited == otherMessage.inherited) &&
      self.hasInherit == otherMessage.hasInherit &&
      (!self.hasInherit || self.inherit == otherMessage.inherit) &&
      self.hasInheritable == otherMessage.hasInheritable &&
      (!self.hasInheritable || self.inheritable == otherMessage.inheritable) &&
      [self.addArray isEqualToArray:otherMessage.addArray] &&
      [self.removeArray isEqualToArray:otherMessage.removeArray] &&
      [self.inheritedMembersArray isEqualToArray:otherMessage.inheritedMembersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasInherited) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inherited] hash];
  }
  if (self.hasInherit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inherit] hash];
  }
  if (self.hasInheritable) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inheritable] hash];
  }
  [self.addArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.removeArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.inheritedMembersArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPACLChanGroupBuilder()
@property (strong) MPACLChanGroup* resultChanGroup;
@end

@implementation MPACLChanGroupBuilder
@synthesize resultChanGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChanGroup = [[MPACLChanGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChanGroup;
}
- (MPACLChanGroupBuilder*) clear {
  self.resultChanGroup = [[MPACLChanGroup alloc] init];
  return self;
}
- (MPACLChanGroupBuilder*) clone {
  return [MPACLChanGroup builderWithPrototype:resultChanGroup];
}
- (MPACLChanGroup*) defaultInstance {
  return [MPACLChanGroup defaultInstance];
}
- (MPACLChanGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPACLChanGroup*) buildPartial {
  MPACLChanGroup* returnMe = resultChanGroup;
  self.resultChanGroup = nil;
  return returnMe;
}
- (MPACLChanGroupBuilder*) mergeFrom:(MPACLChanGroup*) other {
  if (other == [MPACLChanGroup defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasInherited) {
    [self setInherited:other.inherited];
  }
  if (other.hasInherit) {
    [self setInherit:other.inherit];
  }
  if (other.hasInheritable) {
    [self setInheritable:other.inheritable];
  }
  if (other.addArray.count > 0) {
    if (resultChanGroup.addArray == nil) {
      resultChanGroup.addArray = [other.addArray copy];
    } else {
      [resultChanGroup.addArray appendArray:other.addArray];
    }
  }
  if (other.removeArray.count > 0) {
    if (resultChanGroup.removeArray == nil) {
      resultChanGroup.removeArray = [other.removeArray copy];
    } else {
      [resultChanGroup.removeArray appendArray:other.removeArray];
    }
  }
  if (other.inheritedMembersArray.count > 0) {
    if (resultChanGroup.inheritedMembersArray == nil) {
      resultChanGroup.inheritedMembersArray = [other.inheritedMembersArray copy];
    } else {
      [resultChanGroup.inheritedMembersArray appendArray:other.inheritedMembersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPACLChanGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPACLChanGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setInherited:[input readBool]];
        break;
      }
      case 24: {
        [self setInherit:[input readBool]];
        break;
      }
      case 32: {
        [self setInheritable:[input readBool]];
        break;
      }
      case 40: {
        [self addAdd:[input readUInt32]];
        break;
      }
      case 48: {
        [self addRemove:[input readUInt32]];
        break;
      }
      case 56: {
        [self addInheritedMembers:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultChanGroup.hasName;
}
- (NSString*) name {
  return resultChanGroup.name;
}
- (MPACLChanGroupBuilder*) setName:(NSString*) value {
  resultChanGroup.hasName = YES;
  resultChanGroup.name = value;
  return self;
}
- (MPACLChanGroupBuilder*) clearName {
  resultChanGroup.hasName = NO;
  resultChanGroup.name = @"";
  return self;
}
- (BOOL) hasInherited {
  return resultChanGroup.hasInherited;
}
- (BOOL) inherited {
  return resultChanGroup.inherited;
}
- (MPACLChanGroupBuilder*) setInherited:(BOOL) value {
  resultChanGroup.hasInherited = YES;
  resultChanGroup.inherited = value;
  return self;
}
- (MPACLChanGroupBuilder*) clearInherited {
  resultChanGroup.hasInherited = NO;
  resultChanGroup.inherited = YES;
  return self;
}
- (BOOL) hasInherit {
  return resultChanGroup.hasInherit;
}
- (BOOL) inherit {
  return resultChanGroup.inherit;
}
- (MPACLChanGroupBuilder*) setInherit:(BOOL) value {
  resultChanGroup.hasInherit = YES;
  resultChanGroup.inherit = value;
  return self;
}
- (MPACLChanGroupBuilder*) clearInherit {
  resultChanGroup.hasInherit = NO;
  resultChanGroup.inherit = YES;
  return self;
}
- (BOOL) hasInheritable {
  return resultChanGroup.hasInheritable;
}
- (BOOL) inheritable {
  return resultChanGroup.inheritable;
}
- (MPACLChanGroupBuilder*) setInheritable:(BOOL) value {
  resultChanGroup.hasInheritable = YES;
  resultChanGroup.inheritable = value;
  return self;
}
- (MPACLChanGroupBuilder*) clearInheritable {
  resultChanGroup.hasInheritable = NO;
  resultChanGroup.inheritable = YES;
  return self;
}
- (PBAppendableArray *)add {
  return resultChanGroup.addArray;
}
- (UInt32)addAtIndex:(NSUInteger)index {
  return [resultChanGroup addAtIndex:index];
}
- (MPACLChanGroupBuilder *)addAdd:(UInt32)value {
  if (resultChanGroup.addArray == nil) {
    resultChanGroup.addArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultChanGroup.addArray addUint32:value];
  return self;
}
- (MPACLChanGroupBuilder *)setAddArray:(NSArray *)array {
  resultChanGroup.addArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACLChanGroupBuilder *)setAddValues:(const UInt32 *)values count:(NSUInteger)count {
  resultChanGroup.addArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACLChanGroupBuilder *)clearAdd {
  resultChanGroup.addArray = nil;
  return self;
}
- (PBAppendableArray *)remove {
  return resultChanGroup.removeArray;
}
- (UInt32)removeAtIndex:(NSUInteger)index {
  return [resultChanGroup removeAtIndex:index];
}
- (MPACLChanGroupBuilder *)addRemove:(UInt32)value {
  if (resultChanGroup.removeArray == nil) {
    resultChanGroup.removeArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultChanGroup.removeArray addUint32:value];
  return self;
}
- (MPACLChanGroupBuilder *)setRemoveArray:(NSArray *)array {
  resultChanGroup.removeArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACLChanGroupBuilder *)setRemoveValues:(const UInt32 *)values count:(NSUInteger)count {
  resultChanGroup.removeArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACLChanGroupBuilder *)clearRemove {
  resultChanGroup.removeArray = nil;
  return self;
}
- (PBAppendableArray *)inheritedMembers {
  return resultChanGroup.inheritedMembersArray;
}
- (UInt32)inheritedMembersAtIndex:(NSUInteger)index {
  return [resultChanGroup inheritedMembersAtIndex:index];
}
- (MPACLChanGroupBuilder *)addInheritedMembers:(UInt32)value {
  if (resultChanGroup.inheritedMembersArray == nil) {
    resultChanGroup.inheritedMembersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultChanGroup.inheritedMembersArray addUint32:value];
  return self;
}
- (MPACLChanGroupBuilder *)setInheritedMembersArray:(NSArray *)array {
  resultChanGroup.inheritedMembersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACLChanGroupBuilder *)setInheritedMembersValues:(const UInt32 *)values count:(NSUInteger)count {
  resultChanGroup.inheritedMembersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPACLChanGroupBuilder *)clearInheritedMembers {
  resultChanGroup.inheritedMembersArray = nil;
  return self;
}
@end

@interface MPACLChanACL ()
@property BOOL applyHere;
@property BOOL applySubs;
@property BOOL inherited;
@property UInt32 userId;
@property (strong) NSString* group;
@property UInt32 grant;
@property UInt32 deny;
@end

@implementation MPACLChanACL

- (BOOL) hasApplyHere {
  return !!hasApplyHere_;
}
- (void) setHasApplyHere:(BOOL) _value_ {
  hasApplyHere_ = !!_value_;
}
- (BOOL) applyHere {
  return !!applyHere_;
}
- (void) setApplyHere:(BOOL) _value_ {
  applyHere_ = !!_value_;
}
- (BOOL) hasApplySubs {
  return !!hasApplySubs_;
}
- (void) setHasApplySubs:(BOOL) _value_ {
  hasApplySubs_ = !!_value_;
}
- (BOOL) applySubs {
  return !!applySubs_;
}
- (void) setApplySubs:(BOOL) _value_ {
  applySubs_ = !!_value_;
}
- (BOOL) hasInherited {
  return !!hasInherited_;
}
- (void) setHasInherited:(BOOL) _value_ {
  hasInherited_ = !!_value_;
}
- (BOOL) inherited {
  return !!inherited_;
}
- (void) setInherited:(BOOL) _value_ {
  inherited_ = !!_value_;
}
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasGroup {
  return !!hasGroup_;
}
- (void) setHasGroup:(BOOL) _value_ {
  hasGroup_ = !!_value_;
}
@synthesize group;
- (BOOL) hasGrant {
  return !!hasGrant_;
}
- (void) setHasGrant:(BOOL) _value_ {
  hasGrant_ = !!_value_;
}
@synthesize grant;
- (BOOL) hasDeny {
  return !!hasDeny_;
}
- (void) setHasDeny:(BOOL) _value_ {
  hasDeny_ = !!_value_;
}
@synthesize deny;
- (instancetype) init {
  if ((self = [super init])) {
    self.applyHere = YES;
    self.applySubs = YES;
    self.inherited = YES;
    self.userId = 0;
    self.group = @"";
    self.grant = 0;
    self.deny = 0;
  }
  return self;
}
static MPACLChanACL* defaultMPACLChanACLInstance = nil;
+ (void) initialize {
  if (self == [MPACLChanACL class]) {
    defaultMPACLChanACLInstance = [[MPACLChanACL alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPACLChanACLInstance;
}
- (instancetype) defaultInstance {
  return defaultMPACLChanACLInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasApplyHere) {
    [output writeBool:1 value:self.applyHere];
  }
  if (self.hasApplySubs) {
    [output writeBool:2 value:self.applySubs];
  }
  if (self.hasInherited) {
    [output writeBool:3 value:self.inherited];
  }
  if (self.hasUserId) {
    [output writeUInt32:4 value:self.userId];
  }
  if (self.hasGroup) {
    [output writeString:5 value:self.group];
  }
  if (self.hasGrant) {
    [output writeUInt32:6 value:self.grant];
  }
  if (self.hasDeny) {
    [output writeUInt32:7 value:self.deny];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasApplyHere) {
    size_ += computeBoolSize(1, self.applyHere);
  }
  if (self.hasApplySubs) {
    size_ += computeBoolSize(2, self.applySubs);
  }
  if (self.hasInherited) {
    size_ += computeBoolSize(3, self.inherited);
  }
  if (self.hasUserId) {
    size_ += computeUInt32Size(4, self.userId);
  }
  if (self.hasGroup) {
    size_ += computeStringSize(5, self.group);
  }
  if (self.hasGrant) {
    size_ += computeUInt32Size(6, self.grant);
  }
  if (self.hasDeny) {
    size_ += computeUInt32Size(7, self.deny);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPACLChanACL*) parseFromData:(NSData*) data {
  return (MPACLChanACL*)[[[MPACLChanACL builder] mergeFromData:data] build];
}
+ (MPACLChanACL*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACLChanACL*)[[[MPACLChanACL builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPACLChanACL*) parseFromInputStream:(NSInputStream*) input {
  return (MPACLChanACL*)[[[MPACLChanACL builder] mergeFromInputStream:input] build];
}
+ (MPACLChanACL*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACLChanACL*)[[[MPACLChanACL builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACLChanACL*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPACLChanACL*)[[[MPACLChanACL builder] mergeFromCodedInputStream:input] build];
}
+ (MPACLChanACL*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPACLChanACL*)[[[MPACLChanACL builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPACLChanACLBuilder*) builder {
  return [[MPACLChanACLBuilder alloc] init];
}
+ (MPACLChanACLBuilder*) builderWithPrototype:(MPACLChanACL*) prototype {
  return [[MPACLChanACL builder] mergeFrom:prototype];
}
- (MPACLChanACLBuilder*) builder {
  return [MPACLChanACL builder];
}
- (MPACLChanACLBuilder*) toBuilder {
  return [MPACLChanACL builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasApplyHere) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyHere", [NSNumber numberWithBool:self.applyHere]];
  }
  if (self.hasApplySubs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applySubs", [NSNumber numberWithBool:self.applySubs]];
  }
  if (self.hasInherited) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inherited", [NSNumber numberWithBool:self.inherited]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"group", self.group];
  }
  if (self.hasGrant) {
    [output appendFormat:@"%@%@: %@\n", indent, @"grant", [NSNumber numberWithInteger:self.grant]];
  }
  if (self.hasDeny) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deny", [NSNumber numberWithInteger:self.deny]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasApplyHere) {
    [dictionary setObject: [NSNumber numberWithBool:self.applyHere] forKey: @"applyHere"];
  }
  if (self.hasApplySubs) {
    [dictionary setObject: [NSNumber numberWithBool:self.applySubs] forKey: @"applySubs"];
  }
  if (self.hasInherited) {
    [dictionary setObject: [NSNumber numberWithBool:self.inherited] forKey: @"inherited"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasGroup) {
    [dictionary setObject: self.group forKey: @"group"];
  }
  if (self.hasGrant) {
    [dictionary setObject: [NSNumber numberWithInteger:self.grant] forKey: @"grant"];
  }
  if (self.hasDeny) {
    [dictionary setObject: [NSNumber numberWithInteger:self.deny] forKey: @"deny"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPACLChanACL class]]) {
    return NO;
  }
  MPACLChanACL *otherMessage = other;
  return
      self.hasApplyHere == otherMessage.hasApplyHere &&
      (!self.hasApplyHere || self.applyHere == otherMessage.applyHere) &&
      self.hasApplySubs == otherMessage.hasApplySubs &&
      (!self.hasApplySubs || self.applySubs == otherMessage.applySubs) &&
      self.hasInherited == otherMessage.hasInherited &&
      (!self.hasInherited || self.inherited == otherMessage.inherited) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasGroup == otherMessage.hasGroup &&
      (!self.hasGroup || [self.group isEqual:otherMessage.group]) &&
      self.hasGrant == otherMessage.hasGrant &&
      (!self.hasGrant || self.grant == otherMessage.grant) &&
      self.hasDeny == otherMessage.hasDeny &&
      (!self.hasDeny || self.deny == otherMessage.deny) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasApplyHere) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.applyHere] hash];
  }
  if (self.hasApplySubs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.applySubs] hash];
  }
  if (self.hasInherited) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.inherited] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasGroup) {
    hashCode = hashCode * 31 + [self.group hash];
  }
  if (self.hasGrant) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.grant] hash];
  }
  if (self.hasDeny) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.deny] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPACLChanACLBuilder()
@property (strong) MPACLChanACL* resultChanAcl;
@end

@implementation MPACLChanACLBuilder
@synthesize resultChanAcl;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChanAcl = [[MPACLChanACL alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChanAcl;
}
- (MPACLChanACLBuilder*) clear {
  self.resultChanAcl = [[MPACLChanACL alloc] init];
  return self;
}
- (MPACLChanACLBuilder*) clone {
  return [MPACLChanACL builderWithPrototype:resultChanAcl];
}
- (MPACLChanACL*) defaultInstance {
  return [MPACLChanACL defaultInstance];
}
- (MPACLChanACL*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPACLChanACL*) buildPartial {
  MPACLChanACL* returnMe = resultChanAcl;
  self.resultChanAcl = nil;
  return returnMe;
}
- (MPACLChanACLBuilder*) mergeFrom:(MPACLChanACL*) other {
  if (other == [MPACLChanACL defaultInstance]) {
    return self;
  }
  if (other.hasApplyHere) {
    [self setApplyHere:other.applyHere];
  }
  if (other.hasApplySubs) {
    [self setApplySubs:other.applySubs];
  }
  if (other.hasInherited) {
    [self setInherited:other.inherited];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasGroup) {
    [self setGroup:other.group];
  }
  if (other.hasGrant) {
    [self setGrant:other.grant];
  }
  if (other.hasDeny) {
    [self setDeny:other.deny];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPACLChanACLBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPACLChanACLBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setApplyHere:[input readBool]];
        break;
      }
      case 16: {
        [self setApplySubs:[input readBool]];
        break;
      }
      case 24: {
        [self setInherited:[input readBool]];
        break;
      }
      case 32: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 42: {
        [self setGroup:[input readString]];
        break;
      }
      case 48: {
        [self setGrant:[input readUInt32]];
        break;
      }
      case 56: {
        [self setDeny:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasApplyHere {
  return resultChanAcl.hasApplyHere;
}
- (BOOL) applyHere {
  return resultChanAcl.applyHere;
}
- (MPACLChanACLBuilder*) setApplyHere:(BOOL) value {
  resultChanAcl.hasApplyHere = YES;
  resultChanAcl.applyHere = value;
  return self;
}
- (MPACLChanACLBuilder*) clearApplyHere {
  resultChanAcl.hasApplyHere = NO;
  resultChanAcl.applyHere = YES;
  return self;
}
- (BOOL) hasApplySubs {
  return resultChanAcl.hasApplySubs;
}
- (BOOL) applySubs {
  return resultChanAcl.applySubs;
}
- (MPACLChanACLBuilder*) setApplySubs:(BOOL) value {
  resultChanAcl.hasApplySubs = YES;
  resultChanAcl.applySubs = value;
  return self;
}
- (MPACLChanACLBuilder*) clearApplySubs {
  resultChanAcl.hasApplySubs = NO;
  resultChanAcl.applySubs = YES;
  return self;
}
- (BOOL) hasInherited {
  return resultChanAcl.hasInherited;
}
- (BOOL) inherited {
  return resultChanAcl.inherited;
}
- (MPACLChanACLBuilder*) setInherited:(BOOL) value {
  resultChanAcl.hasInherited = YES;
  resultChanAcl.inherited = value;
  return self;
}
- (MPACLChanACLBuilder*) clearInherited {
  resultChanAcl.hasInherited = NO;
  resultChanAcl.inherited = YES;
  return self;
}
- (BOOL) hasUserId {
  return resultChanAcl.hasUserId;
}
- (UInt32) userId {
  return resultChanAcl.userId;
}
- (MPACLChanACLBuilder*) setUserId:(UInt32) value {
  resultChanAcl.hasUserId = YES;
  resultChanAcl.userId = value;
  return self;
}
- (MPACLChanACLBuilder*) clearUserId {
  resultChanAcl.hasUserId = NO;
  resultChanAcl.userId = 0;
  return self;
}
- (BOOL) hasGroup {
  return resultChanAcl.hasGroup;
}
- (NSString*) group {
  return resultChanAcl.group;
}
- (MPACLChanACLBuilder*) setGroup:(NSString*) value {
  resultChanAcl.hasGroup = YES;
  resultChanAcl.group = value;
  return self;
}
- (MPACLChanACLBuilder*) clearGroup {
  resultChanAcl.hasGroup = NO;
  resultChanAcl.group = @"";
  return self;
}
- (BOOL) hasGrant {
  return resultChanAcl.hasGrant;
}
- (UInt32) grant {
  return resultChanAcl.grant;
}
- (MPACLChanACLBuilder*) setGrant:(UInt32) value {
  resultChanAcl.hasGrant = YES;
  resultChanAcl.grant = value;
  return self;
}
- (MPACLChanACLBuilder*) clearGrant {
  resultChanAcl.hasGrant = NO;
  resultChanAcl.grant = 0;
  return self;
}
- (BOOL) hasDeny {
  return resultChanAcl.hasDeny;
}
- (UInt32) deny {
  return resultChanAcl.deny;
}
- (MPACLChanACLBuilder*) setDeny:(UInt32) value {
  resultChanAcl.hasDeny = YES;
  resultChanAcl.deny = value;
  return self;
}
- (MPACLChanACLBuilder*) clearDeny {
  resultChanAcl.hasDeny = NO;
  resultChanAcl.deny = 0;
  return self;
}
@end

@interface MPACLBuilder()
@property (strong) MPACL* resultAcl;
@end

@implementation MPACLBuilder
@synthesize resultAcl;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcl = [[MPACL alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcl;
}
- (MPACLBuilder*) clear {
  self.resultAcl = [[MPACL alloc] init];
  return self;
}
- (MPACLBuilder*) clone {
  return [MPACL builderWithPrototype:resultAcl];
}
- (MPACL*) defaultInstance {
  return [MPACL defaultInstance];
}
- (MPACL*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPACL*) buildPartial {
  MPACL* returnMe = resultAcl;
  self.resultAcl = nil;
  return returnMe;
}
- (MPACLBuilder*) mergeFrom:(MPACL*) other {
  if (other == [MPACL defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasInheritAcls) {
    [self setInheritAcls:other.inheritAcls];
  }
  if (other.groupsArray.count > 0) {
    if (resultAcl.groupsArray == nil) {
      resultAcl.groupsArray = [[NSMutableArray alloc] initWithArray:other.groupsArray];
    } else {
      [resultAcl.groupsArray addObjectsFromArray:other.groupsArray];
    }
  }
  if (other.aclsArray.count > 0) {
    if (resultAcl.aclsArray == nil) {
      resultAcl.aclsArray = [[NSMutableArray alloc] initWithArray:other.aclsArray];
    } else {
      [resultAcl.aclsArray addObjectsFromArray:other.aclsArray];
    }
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPACLBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPACLBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setInheritAcls:[input readBool]];
        break;
      }
      case 26: {
        MPACLChanGroupBuilder* subBuilder = [MPACLChanGroup builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGroups:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        MPACLChanACLBuilder* subBuilder = [MPACLChanACL builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAcls:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setQuery:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return resultAcl.hasChannelId;
}
- (UInt32) channelId {
  return resultAcl.channelId;
}
- (MPACLBuilder*) setChannelId:(UInt32) value {
  resultAcl.hasChannelId = YES;
  resultAcl.channelId = value;
  return self;
}
- (MPACLBuilder*) clearChannelId {
  resultAcl.hasChannelId = NO;
  resultAcl.channelId = 0;
  return self;
}
- (BOOL) hasInheritAcls {
  return resultAcl.hasInheritAcls;
}
- (BOOL) inheritAcls {
  return resultAcl.inheritAcls;
}
- (MPACLBuilder*) setInheritAcls:(BOOL) value {
  resultAcl.hasInheritAcls = YES;
  resultAcl.inheritAcls = value;
  return self;
}
- (MPACLBuilder*) clearInheritAcls {
  resultAcl.hasInheritAcls = NO;
  resultAcl.inheritAcls = YES;
  return self;
}
- (NSMutableArray<MPACLChanGroup*> *)groups {
  return resultAcl.groupsArray;
}
- (MPACLChanGroup*)groupsAtIndex:(NSUInteger)index {
  return [resultAcl groupsAtIndex:index];
}
- (MPACLBuilder *)addGroups:(MPACLChanGroup*)value {
  if (resultAcl.groupsArray == nil) {
    resultAcl.groupsArray = [[NSMutableArray alloc]init];
  }
  [resultAcl.groupsArray addObject:value];
  return self;
}
- (MPACLBuilder *)setGroupsArray:(NSArray<MPACLChanGroup*> *)array {
  resultAcl.groupsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MPACLBuilder *)clearGroups {
  resultAcl.groupsArray = nil;
  return self;
}
- (NSMutableArray<MPACLChanACL*> *)acls {
  return resultAcl.aclsArray;
}
- (MPACLChanACL*)aclsAtIndex:(NSUInteger)index {
  return [resultAcl aclsAtIndex:index];
}
- (MPACLBuilder *)addAcls:(MPACLChanACL*)value {
  if (resultAcl.aclsArray == nil) {
    resultAcl.aclsArray = [[NSMutableArray alloc]init];
  }
  [resultAcl.aclsArray addObject:value];
  return self;
}
- (MPACLBuilder *)setAclsArray:(NSArray<MPACLChanACL*> *)array {
  resultAcl.aclsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MPACLBuilder *)clearAcls {
  resultAcl.aclsArray = nil;
  return self;
}
- (BOOL) hasQuery {
  return resultAcl.hasQuery;
}
- (BOOL) query {
  return resultAcl.query;
}
- (MPACLBuilder*) setQuery:(BOOL) value {
  resultAcl.hasQuery = YES;
  resultAcl.query = value;
  return self;
}
- (MPACLBuilder*) clearQuery {
  resultAcl.hasQuery = NO;
  resultAcl.query = NO;
  return self;
}
@end

@interface MPQueryUsers ()
@property (strong) PBAppendableArray * idsArray;
@property (strong) NSMutableArray * namesArray;
@end

@implementation MPQueryUsers

@synthesize idsArray;
@dynamic ids;
@synthesize namesArray;
@dynamic names;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static MPQueryUsers* defaultMPQueryUsersInstance = nil;
+ (void) initialize {
  if (self == [MPQueryUsers class]) {
    defaultMPQueryUsersInstance = [[MPQueryUsers alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPQueryUsersInstance;
}
- (instancetype) defaultInstance {
  return defaultMPQueryUsersInstance;
}
- (PBArray *)ids {
  return idsArray;
}
- (UInt32)idsAtIndex:(NSUInteger)index {
  return [idsArray uint32AtIndex:index];
}
- (NSArray *)names {
  return namesArray;
}
- (NSString*)namesAtIndex:(NSUInteger)index {
  return [namesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger idsArrayCount = self.idsArray.count;
  if (idsArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.idsArray.data;
    for (NSUInteger i = 0; i < idsArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  [self.namesArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.idsArray.count;
    const UInt32 *values = (const UInt32 *)self.idsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.namesArray.count;
    [self.namesArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPQueryUsers*) parseFromData:(NSData*) data {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromData:data] build];
}
+ (MPQueryUsers*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPQueryUsers*) parseFromInputStream:(NSInputStream*) input {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromInputStream:input] build];
}
+ (MPQueryUsers*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPQueryUsers*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromCodedInputStream:input] build];
}
+ (MPQueryUsers*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPQueryUsers*)[[[MPQueryUsers builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPQueryUsersBuilder*) builder {
  return [[MPQueryUsersBuilder alloc] init];
}
+ (MPQueryUsersBuilder*) builderWithPrototype:(MPQueryUsers*) prototype {
  return [[MPQueryUsers builder] mergeFrom:prototype];
}
- (MPQueryUsersBuilder*) builder {
  return [MPQueryUsers builder];
}
- (MPQueryUsersBuilder*) toBuilder {
  return [MPQueryUsers builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.idsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ids", obj];
  }];
  [self.namesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"names", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * idsArrayArray = [NSMutableArray new];
  NSUInteger idsArrayCount=self.idsArray.count;
  for(int i=0;i<idsArrayCount;i++){
    [idsArrayArray addObject: @([self.idsArray uint32AtIndex:i])];
  }
  [dictionary setObject: idsArrayArray forKey: @"ids"];
  [dictionary setObject:self.names forKey: @"names"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPQueryUsers class]]) {
    return NO;
  }
  MPQueryUsers *otherMessage = other;
  return
      [self.idsArray isEqualToArray:otherMessage.idsArray] &&
      [self.namesArray isEqualToArray:otherMessage.namesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.idsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.namesArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPQueryUsersBuilder()
@property (strong) MPQueryUsers* resultQueryUsers;
@end

@implementation MPQueryUsersBuilder
@synthesize resultQueryUsers;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQueryUsers = [[MPQueryUsers alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQueryUsers;
}
- (MPQueryUsersBuilder*) clear {
  self.resultQueryUsers = [[MPQueryUsers alloc] init];
  return self;
}
- (MPQueryUsersBuilder*) clone {
  return [MPQueryUsers builderWithPrototype:resultQueryUsers];
}
- (MPQueryUsers*) defaultInstance {
  return [MPQueryUsers defaultInstance];
}
- (MPQueryUsers*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPQueryUsers*) buildPartial {
  MPQueryUsers* returnMe = resultQueryUsers;
  self.resultQueryUsers = nil;
  return returnMe;
}
- (MPQueryUsersBuilder*) mergeFrom:(MPQueryUsers*) other {
  if (other == [MPQueryUsers defaultInstance]) {
    return self;
  }
  if (other.idsArray.count > 0) {
    if (resultQueryUsers.idsArray == nil) {
      resultQueryUsers.idsArray = [other.idsArray copy];
    } else {
      [resultQueryUsers.idsArray appendArray:other.idsArray];
    }
  }
  if (other.namesArray.count > 0) {
    if (resultQueryUsers.namesArray == nil) {
      resultQueryUsers.namesArray = [[NSMutableArray alloc] initWithArray:other.namesArray];
    } else {
      [resultQueryUsers.namesArray addObjectsFromArray:other.namesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPQueryUsersBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPQueryUsersBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addIds:[input readUInt32]];
        break;
      }
      case 18: {
        [self addNames:[input readString]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)ids {
  return resultQueryUsers.idsArray;
}
- (UInt32)idsAtIndex:(NSUInteger)index {
  return [resultQueryUsers idsAtIndex:index];
}
- (MPQueryUsersBuilder *)addIds:(UInt32)value {
  if (resultQueryUsers.idsArray == nil) {
    resultQueryUsers.idsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultQueryUsers.idsArray addUint32:value];
  return self;
}
- (MPQueryUsersBuilder *)setIdsArray:(NSArray *)array {
  resultQueryUsers.idsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPQueryUsersBuilder *)setIdsValues:(const UInt32 *)values count:(NSUInteger)count {
  resultQueryUsers.idsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPQueryUsersBuilder *)clearIds {
  resultQueryUsers.idsArray = nil;
  return self;
}
- (NSMutableArray *)names {
  return resultQueryUsers.namesArray;
}
- (NSString*)namesAtIndex:(NSUInteger)index {
  return [resultQueryUsers namesAtIndex:index];
}
- (MPQueryUsersBuilder *)addNames:(NSString*)value {
  if (resultQueryUsers.namesArray == nil) {
    resultQueryUsers.namesArray = [[NSMutableArray alloc]init];
  }
  [resultQueryUsers.namesArray addObject:value];
  return self;
}
- (MPQueryUsersBuilder *)setNamesArray:(NSArray *)array {
  resultQueryUsers.namesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (MPQueryUsersBuilder *)clearNames {
  resultQueryUsers.namesArray = nil;
  return self;
}
@end

@interface MPCryptSetup ()
@property (strong) NSData* key;
@property (strong) NSData* clientNonce;
@property (strong) NSData* serverNonce;
@end

@implementation MPCryptSetup

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasClientNonce {
  return !!hasClientNonce_;
}
- (void) setHasClientNonce:(BOOL) _value_ {
  hasClientNonce_ = !!_value_;
}
@synthesize clientNonce;
- (BOOL) hasServerNonce {
  return !!hasServerNonce_;
}
- (void) setHasServerNonce:(BOOL) _value_ {
  hasServerNonce_ = !!_value_;
}
@synthesize serverNonce;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = [NSData data];
    self.clientNonce = [NSData data];
    self.serverNonce = [NSData data];
  }
  return self;
}
static MPCryptSetup* defaultMPCryptSetupInstance = nil;
+ (void) initialize {
  if (self == [MPCryptSetup class]) {
    defaultMPCryptSetupInstance = [[MPCryptSetup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPCryptSetupInstance;
}
- (instancetype) defaultInstance {
  return defaultMPCryptSetupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeData:1 value:self.key];
  }
  if (self.hasClientNonce) {
    [output writeData:2 value:self.clientNonce];
  }
  if (self.hasServerNonce) {
    [output writeData:3 value:self.serverNonce];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeDataSize(1, self.key);
  }
  if (self.hasClientNonce) {
    size_ += computeDataSize(2, self.clientNonce);
  }
  if (self.hasServerNonce) {
    size_ += computeDataSize(3, self.serverNonce);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPCryptSetup*) parseFromData:(NSData*) data {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromData:data] build];
}
+ (MPCryptSetup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPCryptSetup*) parseFromInputStream:(NSInputStream*) input {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromInputStream:input] build];
}
+ (MPCryptSetup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPCryptSetup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromCodedInputStream:input] build];
}
+ (MPCryptSetup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCryptSetup*)[[[MPCryptSetup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPCryptSetupBuilder*) builder {
  return [[MPCryptSetupBuilder alloc] init];
}
+ (MPCryptSetupBuilder*) builderWithPrototype:(MPCryptSetup*) prototype {
  return [[MPCryptSetup builder] mergeFrom:prototype];
}
- (MPCryptSetupBuilder*) builder {
  return [MPCryptSetup builder];
}
- (MPCryptSetupBuilder*) toBuilder {
  return [MPCryptSetup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasClientNonce) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientNonce", self.clientNonce];
  }
  if (self.hasServerNonce) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverNonce", self.serverNonce];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasClientNonce) {
    [dictionary setObject: self.clientNonce forKey: @"clientNonce"];
  }
  if (self.hasServerNonce) {
    [dictionary setObject: self.serverNonce forKey: @"serverNonce"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPCryptSetup class]]) {
    return NO;
  }
  MPCryptSetup *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasClientNonce == otherMessage.hasClientNonce &&
      (!self.hasClientNonce || [self.clientNonce isEqual:otherMessage.clientNonce]) &&
      self.hasServerNonce == otherMessage.hasServerNonce &&
      (!self.hasServerNonce || [self.serverNonce isEqual:otherMessage.serverNonce]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasClientNonce) {
    hashCode = hashCode * 31 + [self.clientNonce hash];
  }
  if (self.hasServerNonce) {
    hashCode = hashCode * 31 + [self.serverNonce hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPCryptSetupBuilder()
@property (strong) MPCryptSetup* resultCryptSetup;
@end

@implementation MPCryptSetupBuilder
@synthesize resultCryptSetup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCryptSetup = [[MPCryptSetup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCryptSetup;
}
- (MPCryptSetupBuilder*) clear {
  self.resultCryptSetup = [[MPCryptSetup alloc] init];
  return self;
}
- (MPCryptSetupBuilder*) clone {
  return [MPCryptSetup builderWithPrototype:resultCryptSetup];
}
- (MPCryptSetup*) defaultInstance {
  return [MPCryptSetup defaultInstance];
}
- (MPCryptSetup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPCryptSetup*) buildPartial {
  MPCryptSetup* returnMe = resultCryptSetup;
  self.resultCryptSetup = nil;
  return returnMe;
}
- (MPCryptSetupBuilder*) mergeFrom:(MPCryptSetup*) other {
  if (other == [MPCryptSetup defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasClientNonce) {
    [self setClientNonce:other.clientNonce];
  }
  if (other.hasServerNonce) {
    [self setServerNonce:other.serverNonce];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPCryptSetupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPCryptSetupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readData]];
        break;
      }
      case 18: {
        [self setClientNonce:[input readData]];
        break;
      }
      case 26: {
        [self setServerNonce:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultCryptSetup.hasKey;
}
- (NSData*) key {
  return resultCryptSetup.key;
}
- (MPCryptSetupBuilder*) setKey:(NSData*) value {
  resultCryptSetup.hasKey = YES;
  resultCryptSetup.key = value;
  return self;
}
- (MPCryptSetupBuilder*) clearKey {
  resultCryptSetup.hasKey = NO;
  resultCryptSetup.key = [NSData data];
  return self;
}
- (BOOL) hasClientNonce {
  return resultCryptSetup.hasClientNonce;
}
- (NSData*) clientNonce {
  return resultCryptSetup.clientNonce;
}
- (MPCryptSetupBuilder*) setClientNonce:(NSData*) value {
  resultCryptSetup.hasClientNonce = YES;
  resultCryptSetup.clientNonce = value;
  return self;
}
- (MPCryptSetupBuilder*) clearClientNonce {
  resultCryptSetup.hasClientNonce = NO;
  resultCryptSetup.clientNonce = [NSData data];
  return self;
}
- (BOOL) hasServerNonce {
  return resultCryptSetup.hasServerNonce;
}
- (NSData*) serverNonce {
  return resultCryptSetup.serverNonce;
}
- (MPCryptSetupBuilder*) setServerNonce:(NSData*) value {
  resultCryptSetup.hasServerNonce = YES;
  resultCryptSetup.serverNonce = value;
  return self;
}
- (MPCryptSetupBuilder*) clearServerNonce {
  resultCryptSetup.hasServerNonce = NO;
  resultCryptSetup.serverNonce = [NSData data];
  return self;
}
@end

@interface MPContextActionModify ()
@property (strong) NSString* action;
@property (strong) NSString* text;
@property UInt32 context;
@property MPContextActionModifyOperation operation;
@end

@implementation MPContextActionModify

- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) _value_ {
  hasAction_ = !!_value_;
}
@synthesize action;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasContext {
  return !!hasContext_;
}
- (void) setHasContext:(BOOL) _value_ {
  hasContext_ = !!_value_;
}
@synthesize context;
- (BOOL) hasOperation {
  return !!hasOperation_;
}
- (void) setHasOperation:(BOOL) _value_ {
  hasOperation_ = !!_value_;
}
@synthesize operation;
- (instancetype) init {
  if ((self = [super init])) {
    self.action = @"";
    self.text = @"";
    self.context = 0;
    self.operation = MPContextActionModifyOperationAdd;
  }
  return self;
}
static MPContextActionModify* defaultMPContextActionModifyInstance = nil;
+ (void) initialize {
  if (self == [MPContextActionModify class]) {
    defaultMPContextActionModifyInstance = [[MPContextActionModify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPContextActionModifyInstance;
}
- (instancetype) defaultInstance {
  return defaultMPContextActionModifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAction) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAction) {
    [output writeString:1 value:self.action];
  }
  if (self.hasText) {
    [output writeString:2 value:self.text];
  }
  if (self.hasContext) {
    [output writeUInt32:3 value:self.context];
  }
  if (self.hasOperation) {
    [output writeEnum:4 value:self.operation];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAction) {
    size_ += computeStringSize(1, self.action);
  }
  if (self.hasText) {
    size_ += computeStringSize(2, self.text);
  }
  if (self.hasContext) {
    size_ += computeUInt32Size(3, self.context);
  }
  if (self.hasOperation) {
    size_ += computeEnumSize(4, self.operation);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPContextActionModify*) parseFromData:(NSData*) data {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromData:data] build];
}
+ (MPContextActionModify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPContextActionModify*) parseFromInputStream:(NSInputStream*) input {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromInputStream:input] build];
}
+ (MPContextActionModify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPContextActionModify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromCodedInputStream:input] build];
}
+ (MPContextActionModify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextActionModify*)[[[MPContextActionModify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPContextActionModifyBuilder*) builder {
  return [[MPContextActionModifyBuilder alloc] init];
}
+ (MPContextActionModifyBuilder*) builderWithPrototype:(MPContextActionModify*) prototype {
  return [[MPContextActionModify builder] mergeFrom:prototype];
}
- (MPContextActionModifyBuilder*) builder {
  return [MPContextActionModify builder];
}
- (MPContextActionModifyBuilder*) toBuilder {
  return [MPContextActionModify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"action", self.action];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasContext) {
    [output appendFormat:@"%@%@: %@\n", indent, @"context", [NSNumber numberWithInteger:self.context]];
  }
  if (self.hasOperation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operation", NSStringFromMPContextActionModifyOperation(self.operation)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAction) {
    [dictionary setObject: self.action forKey: @"action"];
  }
  if (self.hasText) {
    [dictionary setObject: self.text forKey: @"text"];
  }
  if (self.hasContext) {
    [dictionary setObject: [NSNumber numberWithInteger:self.context] forKey: @"context"];
  }
  if (self.hasOperation) {
    [dictionary setObject: @(self.operation) forKey: @"operation"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPContextActionModify class]]) {
    return NO;
  }
  MPContextActionModify *otherMessage = other;
  return
      self.hasAction == otherMessage.hasAction &&
      (!self.hasAction || [self.action isEqual:otherMessage.action]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasContext == otherMessage.hasContext &&
      (!self.hasContext || self.context == otherMessage.context) &&
      self.hasOperation == otherMessage.hasOperation &&
      (!self.hasOperation || self.operation == otherMessage.operation) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAction) {
    hashCode = hashCode * 31 + [self.action hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasContext) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.context] hash];
  }
  if (self.hasOperation) {
    hashCode = hashCode * 31 + self.operation;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL MPContextActionModifyContextIsValidValue(MPContextActionModifyContext value) {
  switch (value) {
    case MPContextActionModifyContextServer:
    case MPContextActionModifyContextChannel:
    case MPContextActionModifyContextUser:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromMPContextActionModifyContext(MPContextActionModifyContext value) {
  switch (value) {
    case MPContextActionModifyContextServer:
      return @"MPContextActionModifyContextServer";
    case MPContextActionModifyContextChannel:
      return @"MPContextActionModifyContextChannel";
    case MPContextActionModifyContextUser:
      return @"MPContextActionModifyContextUser";
    default:
      return nil;
  }
}

BOOL MPContextActionModifyOperationIsValidValue(MPContextActionModifyOperation value) {
  switch (value) {
    case MPContextActionModifyOperationAdd:
    case MPContextActionModifyOperationRemove:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromMPContextActionModifyOperation(MPContextActionModifyOperation value) {
  switch (value) {
    case MPContextActionModifyOperationAdd:
      return @"MPContextActionModifyOperationAdd";
    case MPContextActionModifyOperationRemove:
      return @"MPContextActionModifyOperationRemove";
    default:
      return nil;
  }
}

@interface MPContextActionModifyBuilder()
@property (strong) MPContextActionModify* resultContextActionModify;
@end

@implementation MPContextActionModifyBuilder
@synthesize resultContextActionModify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultContextActionModify = [[MPContextActionModify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultContextActionModify;
}
- (MPContextActionModifyBuilder*) clear {
  self.resultContextActionModify = [[MPContextActionModify alloc] init];
  return self;
}
- (MPContextActionModifyBuilder*) clone {
  return [MPContextActionModify builderWithPrototype:resultContextActionModify];
}
- (MPContextActionModify*) defaultInstance {
  return [MPContextActionModify defaultInstance];
}
- (MPContextActionModify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPContextActionModify*) buildPartial {
  MPContextActionModify* returnMe = resultContextActionModify;
  self.resultContextActionModify = nil;
  return returnMe;
}
- (MPContextActionModifyBuilder*) mergeFrom:(MPContextActionModify*) other {
  if (other == [MPContextActionModify defaultInstance]) {
    return self;
  }
  if (other.hasAction) {
    [self setAction:other.action];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasContext) {
    [self setContext:other.context];
  }
  if (other.hasOperation) {
    [self setOperation:other.operation];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPContextActionModifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPContextActionModifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAction:[input readString]];
        break;
      }
      case 18: {
        [self setText:[input readString]];
        break;
      }
      case 24: {
        [self setContext:[input readUInt32]];
        break;
      }
      case 32: {
        MPContextActionModifyOperation value = (MPContextActionModifyOperation)[input readEnum];
        if (MPContextActionModifyOperationIsValidValue(value)) {
          [self setOperation:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasAction {
  return resultContextActionModify.hasAction;
}
- (NSString*) action {
  return resultContextActionModify.action;
}
- (MPContextActionModifyBuilder*) setAction:(NSString*) value {
  resultContextActionModify.hasAction = YES;
  resultContextActionModify.action = value;
  return self;
}
- (MPContextActionModifyBuilder*) clearAction {
  resultContextActionModify.hasAction = NO;
  resultContextActionModify.action = @"";
  return self;
}
- (BOOL) hasText {
  return resultContextActionModify.hasText;
}
- (NSString*) text {
  return resultContextActionModify.text;
}
- (MPContextActionModifyBuilder*) setText:(NSString*) value {
  resultContextActionModify.hasText = YES;
  resultContextActionModify.text = value;
  return self;
}
- (MPContextActionModifyBuilder*) clearText {
  resultContextActionModify.hasText = NO;
  resultContextActionModify.text = @"";
  return self;
}
- (BOOL) hasContext {
  return resultContextActionModify.hasContext;
}
- (UInt32) context {
  return resultContextActionModify.context;
}
- (MPContextActionModifyBuilder*) setContext:(UInt32) value {
  resultContextActionModify.hasContext = YES;
  resultContextActionModify.context = value;
  return self;
}
- (MPContextActionModifyBuilder*) clearContext {
  resultContextActionModify.hasContext = NO;
  resultContextActionModify.context = 0;
  return self;
}
- (BOOL) hasOperation {
  return resultContextActionModify.hasOperation;
}
- (MPContextActionModifyOperation) operation {
  return resultContextActionModify.operation;
}
- (MPContextActionModifyBuilder*) setOperation:(MPContextActionModifyOperation) value {
  resultContextActionModify.hasOperation = YES;
  resultContextActionModify.operation = value;
  return self;
}
- (MPContextActionModifyBuilder*) clearOperation {
  resultContextActionModify.hasOperation = NO;
  resultContextActionModify.operation = MPContextActionModifyOperationAdd;
  return self;
}
@end

@interface MPContextAction ()
@property UInt32 session;
@property UInt32 channelId;
@property (strong) NSString* action;
@end

@implementation MPContextAction

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) _value_ {
  hasSession_ = !!_value_;
}
@synthesize session;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) _value_ {
  hasChannelId_ = !!_value_;
}
@synthesize channelId;
- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) _value_ {
  hasAction_ = !!_value_;
}
@synthesize action;
- (instancetype) init {
  if ((self = [super init])) {
    self.session = 0;
    self.channelId = 0;
    self.action = @"";
  }
  return self;
}
static MPContextAction* defaultMPContextActionInstance = nil;
+ (void) initialize {
  if (self == [MPContextAction class]) {
    defaultMPContextActionInstance = [[MPContextAction alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPContextActionInstance;
}
- (instancetype) defaultInstance {
  return defaultMPContextActionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAction) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasChannelId) {
    [output writeUInt32:2 value:self.channelId];
  }
  if (self.hasAction) {
    [output writeString:3 value:self.action];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSession) {
    size_ += computeUInt32Size(1, self.session);
  }
  if (self.hasChannelId) {
    size_ += computeUInt32Size(2, self.channelId);
  }
  if (self.hasAction) {
    size_ += computeStringSize(3, self.action);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPContextAction*) parseFromData:(NSData*) data {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromData:data] build];
}
+ (MPContextAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPContextAction*) parseFromInputStream:(NSInputStream*) input {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromInputStream:input] build];
}
+ (MPContextAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPContextAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromCodedInputStream:input] build];
}
+ (MPContextAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPContextAction*)[[[MPContextAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPContextActionBuilder*) builder {
  return [[MPContextActionBuilder alloc] init];
}
+ (MPContextActionBuilder*) builderWithPrototype:(MPContextAction*) prototype {
  return [[MPContextAction builder] mergeFrom:prototype];
}
- (MPContextActionBuilder*) builder {
  return [MPContextAction builder];
}
- (MPContextActionBuilder*) toBuilder {
  return [MPContextAction builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInteger:self.session]];
  }
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInteger:self.channelId]];
  }
  if (self.hasAction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"action", self.action];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSession) {
    [dictionary setObject: [NSNumber numberWithInteger:self.session] forKey: @"session"];
  }
  if (self.hasChannelId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.channelId] forKey: @"channelId"];
  }
  if (self.hasAction) {
    [dictionary setObject: self.action forKey: @"action"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPContextAction class]]) {
    return NO;
  }
  MPContextAction *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasAction == otherMessage.hasAction &&
      (!self.hasAction || [self.action isEqual:otherMessage.action]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.session] hash];
  }
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.channelId] hash];
  }
  if (self.hasAction) {
    hashCode = hashCode * 31 + [self.action hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPContextActionBuilder()
@property (strong) MPContextAction* resultContextAction;
@end

@implementation MPContextActionBuilder
@synthesize resultContextAction;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultContextAction = [[MPContextAction alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultContextAction;
}
- (MPContextActionBuilder*) clear {
  self.resultContextAction = [[MPContextAction alloc] init];
  return self;
}
- (MPContextActionBuilder*) clone {
  return [MPContextAction builderWithPrototype:resultContextAction];
}
- (MPContextAction*) defaultInstance {
  return [MPContextAction defaultInstance];
}
- (MPContextAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPContextAction*) buildPartial {
  MPContextAction* returnMe = resultContextAction;
  self.resultContextAction = nil;
  return returnMe;
}
- (MPContextActionBuilder*) mergeFrom:(MPContextAction*) other {
  if (other == [MPContextAction defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasAction) {
    [self setAction:other.action];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPContextActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPContextActionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setAction:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return resultContextAction.hasSession;
}
- (UInt32) session {
  return resultContextAction.session;
}
- (MPContextActionBuilder*) setSession:(UInt32) value {
  resultContextAction.hasSession = YES;
  resultContextAction.session = value;
  return self;
}
- (MPContextActionBuilder*) clearSession {
  resultContextAction.hasSession = NO;
  resultContextAction.session = 0;
  return self;
}
- (BOOL) hasChannelId {
  return resultContextAction.hasChannelId;
}
- (UInt32) channelId {
  return resultContextAction.channelId;
}
- (MPContextActionBuilder*) setChannelId:(UInt32) value {
  resultContextAction.hasChannelId = YES;
  resultContextAction.channelId = value;
  return self;
}
- (MPContextActionBuilder*) clearChannelId {
  resultContextAction.hasChannelId = NO;
  resultContextAction.channelId = 0;
  return self;
}
- (BOOL) hasAction {
  return resultContextAction.hasAction;
}
- (NSString*) action {
  return resultContextAction.action;
}
- (MPContextActionBuilder*) setAction:(NSString*) value {
  resultContextAction.hasAction = YES;
  resultContextAction.action = value;
  return self;
}
- (MPContextActionBuilder*) clearAction {
  resultContextAction.hasAction = NO;
  resultContextAction.action = @"";
  return self;
}
@end

@interface MPUserList ()
@property (strong) NSMutableArray<MPUserListUser*> * usersArray;
@end

@implementation MPUserList

@synthesize usersArray;
@dynamic users;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static MPUserList* defaultMPUserListInstance = nil;
+ (void) initialize {
  if (self == [MPUserList class]) {
    defaultMPUserListInstance = [[MPUserList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPUserListInstance;
}
- (instancetype) defaultInstance {
  return defaultMPUserListInstance;
}
- (NSArray<MPUserListUser*> *)users {
  return usersArray;
}
- (MPUserListUser*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitusers = YES;
   [self.users enumerateObjectsUsingBlock:^(MPUserListUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitusers = NO;
      *stop = YES;
    }
  }];
  if (!isInitusers) return isInitusers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.usersArray enumerateObjectsUsingBlock:^(MPUserListUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.usersArray enumerateObjectsUsingBlock:^(MPUserListUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPUserList*) parseFromData:(NSData*) data {
  return (MPUserList*)[[[MPUserList builder] mergeFromData:data] build];
}
+ (MPUserList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserList*)[[[MPUserList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserList*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserList*)[[[MPUserList builder] mergeFromInputStream:input] build];
}
+ (MPUserList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserList*)[[[MPUserList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserList*)[[[MPUserList builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserList*)[[[MPUserList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserListBuilder*) builder {
  return [[MPUserListBuilder alloc] init];
}
+ (MPUserListBuilder*) builderWithPrototype:(MPUserList*) prototype {
  return [[MPUserList builder] mergeFrom:prototype];
}
- (MPUserListBuilder*) builder {
  return [MPUserList builder];
}
- (MPUserListBuilder*) toBuilder {
  return [MPUserList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.usersArray enumerateObjectsUsingBlock:^(MPUserListUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (MPUserListUser* element in self.usersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"users"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserList class]]) {
    return NO;
  }
  MPUserList *otherMessage = other;
  return
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.usersArray enumerateObjectsUsingBlock:^(MPUserListUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserListUser ()
@property UInt32 userId;
@property (strong) NSString* name;
@property (strong) NSString* lastSeen;
@property UInt32 lastChannel;
@end

@implementation MPUserListUser

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasLastSeen {
  return !!hasLastSeen_;
}
- (void) setHasLastSeen:(BOOL) _value_ {
  hasLastSeen_ = !!_value_;
}
@synthesize lastSeen;
- (BOOL) hasLastChannel {
  return !!hasLastChannel_;
}
- (void) setHasLastChannel:(BOOL) _value_ {
  hasLastChannel_ = !!_value_;
}
@synthesize lastChannel;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.name = @"";
    self.lastSeen = @"";
    self.lastChannel = 0;
  }
  return self;
}
static MPUserListUser* defaultMPUserListUserInstance = nil;
+ (void) initialize {
  if (self == [MPUserListUser class]) {
    defaultMPUserListUserInstance = [[MPUserListUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPUserListUserInstance;
}
- (instancetype) defaultInstance {
  return defaultMPUserListUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasLastSeen) {
    [output writeString:3 value:self.lastSeen];
  }
  if (self.hasLastChannel) {
    [output writeUInt32:4 value:self.lastChannel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasLastSeen) {
    size_ += computeStringSize(3, self.lastSeen);
  }
  if (self.hasLastChannel) {
    size_ += computeUInt32Size(4, self.lastChannel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPUserListUser*) parseFromData:(NSData*) data {
  return (MPUserListUser*)[[[MPUserListUser builder] mergeFromData:data] build];
}
+ (MPUserListUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserListUser*)[[[MPUserListUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserListUser*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserListUser*)[[[MPUserListUser builder] mergeFromInputStream:input] build];
}
+ (MPUserListUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserListUser*)[[[MPUserListUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserListUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserListUser*)[[[MPUserListUser builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserListUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserListUser*)[[[MPUserListUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserListUserBuilder*) builder {
  return [[MPUserListUserBuilder alloc] init];
}
+ (MPUserListUserBuilder*) builderWithPrototype:(MPUserListUser*) prototype {
  return [[MPUserListUser builder] mergeFrom:prototype];
}
- (MPUserListUserBuilder*) builder {
  return [MPUserListUser builder];
}
- (MPUserListUserBuilder*) toBuilder {
  return [MPUserListUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasLastSeen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastSeen", self.lastSeen];
  }
  if (self.hasLastChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastChannel", [NSNumber numberWithInteger:self.lastChannel]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasLastSeen) {
    [dictionary setObject: self.lastSeen forKey: @"lastSeen"];
  }
  if (self.hasLastChannel) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lastChannel] forKey: @"lastChannel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserListUser class]]) {
    return NO;
  }
  MPUserListUser *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasLastSeen == otherMessage.hasLastSeen &&
      (!self.hasLastSeen || [self.lastSeen isEqual:otherMessage.lastSeen]) &&
      self.hasLastChannel == otherMessage.hasLastChannel &&
      (!self.hasLastChannel || self.lastChannel == otherMessage.lastChannel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasLastSeen) {
    hashCode = hashCode * 31 + [self.lastSeen hash];
  }
  if (self.hasLastChannel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastChannel] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserListUserBuilder()
@property (strong) MPUserListUser* resultUser;
@end

@implementation MPUserListUserBuilder
@synthesize resultUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUser = [[MPUserListUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUser;
}
- (MPUserListUserBuilder*) clear {
  self.resultUser = [[MPUserListUser alloc] init];
  return self;
}
- (MPUserListUserBuilder*) clone {
  return [MPUserListUser builderWithPrototype:resultUser];
}
- (MPUserListUser*) defaultInstance {
  return [MPUserListUser defaultInstance];
}
- (MPUserListUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserListUser*) buildPartial {
  MPUserListUser* returnMe = resultUser;
  self.resultUser = nil;
  return returnMe;
}
- (MPUserListUserBuilder*) mergeFrom:(MPUserListUser*) other {
  if (other == [MPUserListUser defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasLastSeen) {
    [self setLastSeen:other.lastSeen];
  }
  if (other.hasLastChannel) {
    [self setLastChannel:other.lastChannel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserListUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserListUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setLastSeen:[input readString]];
        break;
      }
      case 32: {
        [self setLastChannel:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultUser.hasUserId;
}
- (UInt32) userId {
  return resultUser.userId;
}
- (MPUserListUserBuilder*) setUserId:(UInt32) value {
  resultUser.hasUserId = YES;
  resultUser.userId = value;
  return self;
}
- (MPUserListUserBuilder*) clearUserId {
  resultUser.hasUserId = NO;
  resultUser.userId = 0;
  return self;
}
- (BOOL) hasName {
  return resultUser.hasName;
}
- (NSString*) name {
  return resultUser.name;
}
- (MPUserListUserBuilder*) setName:(NSString*) value {
  resultUser.hasName = YES;
  resultUser.name = value;
  return self;
}
- (MPUserListUserBuilder*) clearName {
  resultUser.hasName = NO;
  resultUser.name = @"";
  return self;
}
- (BOOL) hasLastSeen {
  return resultUser.hasLastSeen;
}
- (NSString*) lastSeen {
  return resultUser.lastSeen;
}
- (MPUserListUserBuilder*) setLastSeen:(NSString*) value {
  resultUser.hasLastSeen = YES;
  resultUser.lastSeen = value;
  return self;
}
- (MPUserListUserBuilder*) clearLastSeen {
  resultUser.hasLastSeen = NO;
  resultUser.lastSeen = @"";
  return self;
}
- (BOOL) hasLastChannel {
  return resultUser.hasLastChannel;
}
- (UInt32) lastChannel {
  return resultUser.lastChannel;
}
- (MPUserListUserBuilder*) setLastChannel:(UInt32) value {
  resultUser.hasLastChannel = YES;
  resultUser.lastChannel = value;
  return self;
}
- (MPUserListUserBuilder*) clearLastChannel {
  resultUser.hasLastChannel = NO;
  resultUser.lastChannel = 0;
  return self;
}
@end

@interface MPUserListBuilder()
@property (strong) MPUserList* resultUserList;
@end

@implementation MPUserListBuilder
@synthesize resultUserList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserList = [[MPUserList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserList;
}
- (MPUserListBuilder*) clear {
  self.resultUserList = [[MPUserList alloc] init];
  return self;
}
- (MPUserListBuilder*) clone {
  return [MPUserList builderWithPrototype:resultUserList];
}
- (MPUserList*) defaultInstance {
  return [MPUserList defaultInstance];
}
- (MPUserList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserList*) buildPartial {
  MPUserList* returnMe = resultUserList;
  self.resultUserList = nil;
  return returnMe;
}
- (MPUserListBuilder*) mergeFrom:(MPUserList*) other {
  if (other == [MPUserList defaultInstance]) {
    return self;
  }
  if (other.usersArray.count > 0) {
    if (resultUserList.usersArray == nil) {
      resultUserList.usersArray = [[NSMutableArray alloc] initWithArray:other.usersArray];
    } else {
      [resultUserList.usersArray addObjectsFromArray:other.usersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MPUserListUserBuilder* subBuilder = [MPUserListUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<MPUserListUser*> *)users {
  return resultUserList.usersArray;
}
- (MPUserListUser*)usersAtIndex:(NSUInteger)index {
  return [resultUserList usersAtIndex:index];
}
- (MPUserListBuilder *)addUsers:(MPUserListUser*)value {
  if (resultUserList.usersArray == nil) {
    resultUserList.usersArray = [[NSMutableArray alloc]init];
  }
  [resultUserList.usersArray addObject:value];
  return self;
}
- (MPUserListBuilder *)setUsersArray:(NSArray<MPUserListUser*> *)array {
  resultUserList.usersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MPUserListBuilder *)clearUsers {
  resultUserList.usersArray = nil;
  return self;
}
@end

@interface MPVoiceTarget ()
@property UInt32 id;
@property (strong) NSMutableArray<MPVoiceTargetTarget*> * targetsArray;
@end

@implementation MPVoiceTarget

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
@synthesize targetsArray;
@dynamic targets;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
  }
  return self;
}
static MPVoiceTarget* defaultMPVoiceTargetInstance = nil;
+ (void) initialize {
  if (self == [MPVoiceTarget class]) {
    defaultMPVoiceTargetInstance = [[MPVoiceTarget alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPVoiceTargetInstance;
}
- (instancetype) defaultInstance {
  return defaultMPVoiceTargetInstance;
}
- (NSArray<MPVoiceTargetTarget*> *)targets {
  return targetsArray;
}
- (MPVoiceTargetTarget*)targetsAtIndex:(NSUInteger)index {
  return [targetsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  [self.targetsArray enumerateObjectsUsingBlock:^(MPVoiceTargetTarget *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  [self.targetsArray enumerateObjectsUsingBlock:^(MPVoiceTargetTarget *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPVoiceTarget*) parseFromData:(NSData*) data {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromData:data] build];
}
+ (MPVoiceTarget*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTarget*) parseFromInputStream:(NSInputStream*) input {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromInputStream:input] build];
}
+ (MPVoiceTarget*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromCodedInputStream:input] build];
}
+ (MPVoiceTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTarget*)[[[MPVoiceTarget builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTargetBuilder*) builder {
  return [[MPVoiceTargetBuilder alloc] init];
}
+ (MPVoiceTargetBuilder*) builderWithPrototype:(MPVoiceTarget*) prototype {
  return [[MPVoiceTarget builder] mergeFrom:prototype];
}
- (MPVoiceTargetBuilder*) builder {
  return [MPVoiceTarget builder];
}
- (MPVoiceTargetBuilder*) toBuilder {
  return [MPVoiceTarget builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  [self.targetsArray enumerateObjectsUsingBlock:^(MPVoiceTargetTarget *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"targets"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  for (MPVoiceTargetTarget* element in self.targetsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"targets"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPVoiceTarget class]]) {
    return NO;
  }
  MPVoiceTarget *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      [self.targetsArray isEqualToArray:otherMessage.targetsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  [self.targetsArray enumerateObjectsUsingBlock:^(MPVoiceTargetTarget *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPVoiceTargetTarget ()
@property (strong) PBAppendableArray * sessionArray;
@property UInt32 channelId;
@property (strong) NSString* group;
@property BOOL links;
@property BOOL children;
@end

@implementation MPVoiceTargetTarget

@synthesize sessionArray;
@dynamic session;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) _value_ {
  hasChannelId_ = !!_value_;
}
@synthesize channelId;
- (BOOL) hasGroup {
  return !!hasGroup_;
}
- (void) setHasGroup:(BOOL) _value_ {
  hasGroup_ = !!_value_;
}
@synthesize group;
- (BOOL) hasLinks {
  return !!hasLinks_;
}
- (void) setHasLinks:(BOOL) _value_ {
  hasLinks_ = !!_value_;
}
- (BOOL) links {
  return !!links_;
}
- (void) setLinks:(BOOL) _value_ {
  links_ = !!_value_;
}
- (BOOL) hasChildren {
  return !!hasChildren_;
}
- (void) setHasChildren:(BOOL) _value_ {
  hasChildren_ = !!_value_;
}
- (BOOL) children {
  return !!children_;
}
- (void) setChildren:(BOOL) _value_ {
  children_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.channelId = 0;
    self.group = @"";
    self.links = NO;
    self.children = NO;
  }
  return self;
}
static MPVoiceTargetTarget* defaultMPVoiceTargetTargetInstance = nil;
+ (void) initialize {
  if (self == [MPVoiceTargetTarget class]) {
    defaultMPVoiceTargetTargetInstance = [[MPVoiceTargetTarget alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPVoiceTargetTargetInstance;
}
- (instancetype) defaultInstance {
  return defaultMPVoiceTargetTargetInstance;
}
- (PBArray *)session {
  return sessionArray;
}
- (UInt32)sessionAtIndex:(NSUInteger)index {
  return [sessionArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger sessionArrayCount = self.sessionArray.count;
  if (sessionArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.sessionArray.data;
    for (NSUInteger i = 0; i < sessionArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  if (self.hasChannelId) {
    [output writeUInt32:2 value:self.channelId];
  }
  if (self.hasGroup) {
    [output writeString:3 value:self.group];
  }
  if (self.hasLinks) {
    [output writeBool:4 value:self.links];
  }
  if (self.hasChildren) {
    [output writeBool:5 value:self.children];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionArray.count;
    const UInt32 *values = (const UInt32 *)self.sessionArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasChannelId) {
    size_ += computeUInt32Size(2, self.channelId);
  }
  if (self.hasGroup) {
    size_ += computeStringSize(3, self.group);
  }
  if (self.hasLinks) {
    size_ += computeBoolSize(4, self.links);
  }
  if (self.hasChildren) {
    size_ += computeBoolSize(5, self.children);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPVoiceTargetTarget*) parseFromData:(NSData*) data {
  return (MPVoiceTargetTarget*)[[[MPVoiceTargetTarget builder] mergeFromData:data] build];
}
+ (MPVoiceTargetTarget*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTargetTarget*)[[[MPVoiceTargetTarget builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTargetTarget*) parseFromInputStream:(NSInputStream*) input {
  return (MPVoiceTargetTarget*)[[[MPVoiceTargetTarget builder] mergeFromInputStream:input] build];
}
+ (MPVoiceTargetTarget*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTargetTarget*)[[[MPVoiceTargetTarget builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTargetTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPVoiceTargetTarget*)[[[MPVoiceTargetTarget builder] mergeFromCodedInputStream:input] build];
}
+ (MPVoiceTargetTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPVoiceTargetTarget*)[[[MPVoiceTargetTarget builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPVoiceTargetTargetBuilder*) builder {
  return [[MPVoiceTargetTargetBuilder alloc] init];
}
+ (MPVoiceTargetTargetBuilder*) builderWithPrototype:(MPVoiceTargetTarget*) prototype {
  return [[MPVoiceTargetTarget builder] mergeFrom:prototype];
}
- (MPVoiceTargetTargetBuilder*) builder {
  return [MPVoiceTargetTarget builder];
}
- (MPVoiceTargetTargetBuilder*) toBuilder {
  return [MPVoiceTargetTarget builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.sessionArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", obj];
  }];
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInteger:self.channelId]];
  }
  if (self.hasGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"group", self.group];
  }
  if (self.hasLinks) {
    [output appendFormat:@"%@%@: %@\n", indent, @"links", [NSNumber numberWithBool:self.links]];
  }
  if (self.hasChildren) {
    [output appendFormat:@"%@%@: %@\n", indent, @"children", [NSNumber numberWithBool:self.children]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * sessionArrayArray = [NSMutableArray new];
  NSUInteger sessionArrayCount=self.sessionArray.count;
  for(int i=0;i<sessionArrayCount;i++){
    [sessionArrayArray addObject: @([self.sessionArray uint32AtIndex:i])];
  }
  [dictionary setObject: sessionArrayArray forKey: @"session"];
  if (self.hasChannelId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.channelId] forKey: @"channelId"];
  }
  if (self.hasGroup) {
    [dictionary setObject: self.group forKey: @"group"];
  }
  if (self.hasLinks) {
    [dictionary setObject: [NSNumber numberWithBool:self.links] forKey: @"links"];
  }
  if (self.hasChildren) {
    [dictionary setObject: [NSNumber numberWithBool:self.children] forKey: @"children"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPVoiceTargetTarget class]]) {
    return NO;
  }
  MPVoiceTargetTarget *otherMessage = other;
  return
      [self.sessionArray isEqualToArray:otherMessage.sessionArray] &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasGroup == otherMessage.hasGroup &&
      (!self.hasGroup || [self.group isEqual:otherMessage.group]) &&
      self.hasLinks == otherMessage.hasLinks &&
      (!self.hasLinks || self.links == otherMessage.links) &&
      self.hasChildren == otherMessage.hasChildren &&
      (!self.hasChildren || self.children == otherMessage.children) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.sessionArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.channelId] hash];
  }
  if (self.hasGroup) {
    hashCode = hashCode * 31 + [self.group hash];
  }
  if (self.hasLinks) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.links] hash];
  }
  if (self.hasChildren) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.children] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPVoiceTargetTargetBuilder()
@property (strong) MPVoiceTargetTarget* resultTarget;
@end

@implementation MPVoiceTargetTargetBuilder
@synthesize resultTarget;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTarget = [[MPVoiceTargetTarget alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTarget;
}
- (MPVoiceTargetTargetBuilder*) clear {
  self.resultTarget = [[MPVoiceTargetTarget alloc] init];
  return self;
}
- (MPVoiceTargetTargetBuilder*) clone {
  return [MPVoiceTargetTarget builderWithPrototype:resultTarget];
}
- (MPVoiceTargetTarget*) defaultInstance {
  return [MPVoiceTargetTarget defaultInstance];
}
- (MPVoiceTargetTarget*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPVoiceTargetTarget*) buildPartial {
  MPVoiceTargetTarget* returnMe = resultTarget;
  self.resultTarget = nil;
  return returnMe;
}
- (MPVoiceTargetTargetBuilder*) mergeFrom:(MPVoiceTargetTarget*) other {
  if (other == [MPVoiceTargetTarget defaultInstance]) {
    return self;
  }
  if (other.sessionArray.count > 0) {
    if (resultTarget.sessionArray == nil) {
      resultTarget.sessionArray = [other.sessionArray copy];
    } else {
      [resultTarget.sessionArray appendArray:other.sessionArray];
    }
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasGroup) {
    [self setGroup:other.group];
  }
  if (other.hasLinks) {
    [self setLinks:other.links];
  }
  if (other.hasChildren) {
    [self setChildren:other.children];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPVoiceTargetTargetBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPVoiceTargetTargetBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setGroup:[input readString]];
        break;
      }
      case 32: {
        [self setLinks:[input readBool]];
        break;
      }
      case 40: {
        [self setChildren:[input readBool]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)session {
  return resultTarget.sessionArray;
}
- (UInt32)sessionAtIndex:(NSUInteger)index {
  return [resultTarget sessionAtIndex:index];
}
- (MPVoiceTargetTargetBuilder *)addSession:(UInt32)value {
  if (resultTarget.sessionArray == nil) {
    resultTarget.sessionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTarget.sessionArray addUint32:value];
  return self;
}
- (MPVoiceTargetTargetBuilder *)setSessionArray:(NSArray *)array {
  resultTarget.sessionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPVoiceTargetTargetBuilder *)setSessionValues:(const UInt32 *)values count:(NSUInteger)count {
  resultTarget.sessionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPVoiceTargetTargetBuilder *)clearSession {
  resultTarget.sessionArray = nil;
  return self;
}
- (BOOL) hasChannelId {
  return resultTarget.hasChannelId;
}
- (UInt32) channelId {
  return resultTarget.channelId;
}
- (MPVoiceTargetTargetBuilder*) setChannelId:(UInt32) value {
  resultTarget.hasChannelId = YES;
  resultTarget.channelId = value;
  return self;
}
- (MPVoiceTargetTargetBuilder*) clearChannelId {
  resultTarget.hasChannelId = NO;
  resultTarget.channelId = 0;
  return self;
}
- (BOOL) hasGroup {
  return resultTarget.hasGroup;
}
- (NSString*) group {
  return resultTarget.group;
}
- (MPVoiceTargetTargetBuilder*) setGroup:(NSString*) value {
  resultTarget.hasGroup = YES;
  resultTarget.group = value;
  return self;
}
- (MPVoiceTargetTargetBuilder*) clearGroup {
  resultTarget.hasGroup = NO;
  resultTarget.group = @"";
  return self;
}
- (BOOL) hasLinks {
  return resultTarget.hasLinks;
}
- (BOOL) links {
  return resultTarget.links;
}
- (MPVoiceTargetTargetBuilder*) setLinks:(BOOL) value {
  resultTarget.hasLinks = YES;
  resultTarget.links = value;
  return self;
}
- (MPVoiceTargetTargetBuilder*) clearLinks {
  resultTarget.hasLinks = NO;
  resultTarget.links = NO;
  return self;
}
- (BOOL) hasChildren {
  return resultTarget.hasChildren;
}
- (BOOL) children {
  return resultTarget.children;
}
- (MPVoiceTargetTargetBuilder*) setChildren:(BOOL) value {
  resultTarget.hasChildren = YES;
  resultTarget.children = value;
  return self;
}
- (MPVoiceTargetTargetBuilder*) clearChildren {
  resultTarget.hasChildren = NO;
  resultTarget.children = NO;
  return self;
}
@end

@interface MPVoiceTargetBuilder()
@property (strong) MPVoiceTarget* resultVoiceTarget;
@end

@implementation MPVoiceTargetBuilder
@synthesize resultVoiceTarget;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultVoiceTarget = [[MPVoiceTarget alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultVoiceTarget;
}
- (MPVoiceTargetBuilder*) clear {
  self.resultVoiceTarget = [[MPVoiceTarget alloc] init];
  return self;
}
- (MPVoiceTargetBuilder*) clone {
  return [MPVoiceTarget builderWithPrototype:resultVoiceTarget];
}
- (MPVoiceTarget*) defaultInstance {
  return [MPVoiceTarget defaultInstance];
}
- (MPVoiceTarget*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPVoiceTarget*) buildPartial {
  MPVoiceTarget* returnMe = resultVoiceTarget;
  self.resultVoiceTarget = nil;
  return returnMe;
}
- (MPVoiceTargetBuilder*) mergeFrom:(MPVoiceTarget*) other {
  if (other == [MPVoiceTarget defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.targetsArray.count > 0) {
    if (resultVoiceTarget.targetsArray == nil) {
      resultVoiceTarget.targetsArray = [[NSMutableArray alloc] initWithArray:other.targetsArray];
    } else {
      [resultVoiceTarget.targetsArray addObjectsFromArray:other.targetsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPVoiceTargetBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPVoiceTargetBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 18: {
        MPVoiceTargetTargetBuilder* subBuilder = [MPVoiceTargetTarget builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTargets:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultVoiceTarget.hasId;
}
- (UInt32) id {
  return resultVoiceTarget.id;
}
- (MPVoiceTargetBuilder*) setId:(UInt32) value {
  resultVoiceTarget.hasId = YES;
  resultVoiceTarget.id = value;
  return self;
}
- (MPVoiceTargetBuilder*) clearId {
  resultVoiceTarget.hasId = NO;
  resultVoiceTarget.id = 0;
  return self;
}
- (NSMutableArray<MPVoiceTargetTarget*> *)targets {
  return resultVoiceTarget.targetsArray;
}
- (MPVoiceTargetTarget*)targetsAtIndex:(NSUInteger)index {
  return [resultVoiceTarget targetsAtIndex:index];
}
- (MPVoiceTargetBuilder *)addTargets:(MPVoiceTargetTarget*)value {
  if (resultVoiceTarget.targetsArray == nil) {
    resultVoiceTarget.targetsArray = [[NSMutableArray alloc]init];
  }
  [resultVoiceTarget.targetsArray addObject:value];
  return self;
}
- (MPVoiceTargetBuilder *)setTargetsArray:(NSArray<MPVoiceTargetTarget*> *)array {
  resultVoiceTarget.targetsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MPVoiceTargetBuilder *)clearTargets {
  resultVoiceTarget.targetsArray = nil;
  return self;
}
@end

@interface MPPermissionQuery ()
@property UInt32 channelId;
@property UInt32 permissions;
@property BOOL flush;
@end

@implementation MPPermissionQuery

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) _value_ {
  hasChannelId_ = !!_value_;
}
@synthesize channelId;
- (BOOL) hasPermissions {
  return !!hasPermissions_;
}
- (void) setHasPermissions:(BOOL) _value_ {
  hasPermissions_ = !!_value_;
}
@synthesize permissions;
- (BOOL) hasFlush {
  return !!hasFlush_;
}
- (void) setHasFlush:(BOOL) _value_ {
  hasFlush_ = !!_value_;
}
- (BOOL) flush {
  return !!flush_;
}
- (void) setFlush:(BOOL) _value_ {
  flush_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.channelId = 0;
    self.permissions = 0;
    self.flush = NO;
  }
  return self;
}
static MPPermissionQuery* defaultMPPermissionQueryInstance = nil;
+ (void) initialize {
  if (self == [MPPermissionQuery class]) {
    defaultMPPermissionQueryInstance = [[MPPermissionQuery alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPPermissionQueryInstance;
}
- (instancetype) defaultInstance {
  return defaultMPPermissionQueryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeUInt32:1 value:self.channelId];
  }
  if (self.hasPermissions) {
    [output writeUInt32:2 value:self.permissions];
  }
  if (self.hasFlush) {
    [output writeBool:3 value:self.flush];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelId) {
    size_ += computeUInt32Size(1, self.channelId);
  }
  if (self.hasPermissions) {
    size_ += computeUInt32Size(2, self.permissions);
  }
  if (self.hasFlush) {
    size_ += computeBoolSize(3, self.flush);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPPermissionQuery*) parseFromData:(NSData*) data {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromData:data] build];
}
+ (MPPermissionQuery*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionQuery*) parseFromInputStream:(NSInputStream*) input {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromInputStream:input] build];
}
+ (MPPermissionQuery*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionQuery*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromCodedInputStream:input] build];
}
+ (MPPermissionQuery*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPermissionQuery*)[[[MPPermissionQuery builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPermissionQueryBuilder*) builder {
  return [[MPPermissionQueryBuilder alloc] init];
}
+ (MPPermissionQueryBuilder*) builderWithPrototype:(MPPermissionQuery*) prototype {
  return [[MPPermissionQuery builder] mergeFrom:prototype];
}
- (MPPermissionQueryBuilder*) builder {
  return [MPPermissionQuery builder];
}
- (MPPermissionQueryBuilder*) toBuilder {
  return [MPPermissionQuery builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithInteger:self.channelId]];
  }
  if (self.hasPermissions) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permissions", [NSNumber numberWithInteger:self.permissions]];
  }
  if (self.hasFlush) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flush", [NSNumber numberWithBool:self.flush]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChannelId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.channelId] forKey: @"channelId"];
  }
  if (self.hasPermissions) {
    [dictionary setObject: [NSNumber numberWithInteger:self.permissions] forKey: @"permissions"];
  }
  if (self.hasFlush) {
    [dictionary setObject: [NSNumber numberWithBool:self.flush] forKey: @"flush"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPPermissionQuery class]]) {
    return NO;
  }
  MPPermissionQuery *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasPermissions == otherMessage.hasPermissions &&
      (!self.hasPermissions || self.permissions == otherMessage.permissions) &&
      self.hasFlush == otherMessage.hasFlush &&
      (!self.hasFlush || self.flush == otherMessage.flush) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.channelId] hash];
  }
  if (self.hasPermissions) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.permissions] hash];
  }
  if (self.hasFlush) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.flush] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPPermissionQueryBuilder()
@property (strong) MPPermissionQuery* resultPermissionQuery;
@end

@implementation MPPermissionQueryBuilder
@synthesize resultPermissionQuery;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPermissionQuery = [[MPPermissionQuery alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPermissionQuery;
}
- (MPPermissionQueryBuilder*) clear {
  self.resultPermissionQuery = [[MPPermissionQuery alloc] init];
  return self;
}
- (MPPermissionQueryBuilder*) clone {
  return [MPPermissionQuery builderWithPrototype:resultPermissionQuery];
}
- (MPPermissionQuery*) defaultInstance {
  return [MPPermissionQuery defaultInstance];
}
- (MPPermissionQuery*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPPermissionQuery*) buildPartial {
  MPPermissionQuery* returnMe = resultPermissionQuery;
  self.resultPermissionQuery = nil;
  return returnMe;
}
- (MPPermissionQueryBuilder*) mergeFrom:(MPPermissionQuery*) other {
  if (other == [MPPermissionQuery defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasPermissions) {
    [self setPermissions:other.permissions];
  }
  if (other.hasFlush) {
    [self setFlush:other.flush];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPPermissionQueryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPPermissionQueryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChannelId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setPermissions:[input readUInt32]];
        break;
      }
      case 24: {
        [self setFlush:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return resultPermissionQuery.hasChannelId;
}
- (UInt32) channelId {
  return resultPermissionQuery.channelId;
}
- (MPPermissionQueryBuilder*) setChannelId:(UInt32) value {
  resultPermissionQuery.hasChannelId = YES;
  resultPermissionQuery.channelId = value;
  return self;
}
- (MPPermissionQueryBuilder*) clearChannelId {
  resultPermissionQuery.hasChannelId = NO;
  resultPermissionQuery.channelId = 0;
  return self;
}
- (BOOL) hasPermissions {
  return resultPermissionQuery.hasPermissions;
}
- (UInt32) permissions {
  return resultPermissionQuery.permissions;
}
- (MPPermissionQueryBuilder*) setPermissions:(UInt32) value {
  resultPermissionQuery.hasPermissions = YES;
  resultPermissionQuery.permissions = value;
  return self;
}
- (MPPermissionQueryBuilder*) clearPermissions {
  resultPermissionQuery.hasPermissions = NO;
  resultPermissionQuery.permissions = 0;
  return self;
}
- (BOOL) hasFlush {
  return resultPermissionQuery.hasFlush;
}
- (BOOL) flush {
  return resultPermissionQuery.flush;
}
- (MPPermissionQueryBuilder*) setFlush:(BOOL) value {
  resultPermissionQuery.hasFlush = YES;
  resultPermissionQuery.flush = value;
  return self;
}
- (MPPermissionQueryBuilder*) clearFlush {
  resultPermissionQuery.hasFlush = NO;
  resultPermissionQuery.flush = NO;
  return self;
}
@end

@interface MPCodecVersion ()
@property SInt32 alpha;
@property SInt32 beta;
@property BOOL preferAlpha;
@property BOOL opus;
@end

@implementation MPCodecVersion

- (BOOL) hasAlpha {
  return !!hasAlpha_;
}
- (void) setHasAlpha:(BOOL) _value_ {
  hasAlpha_ = !!_value_;
}
@synthesize alpha;
- (BOOL) hasBeta {
  return !!hasBeta_;
}
- (void) setHasBeta:(BOOL) _value_ {
  hasBeta_ = !!_value_;
}
@synthesize beta;
- (BOOL) hasPreferAlpha {
  return !!hasPreferAlpha_;
}
- (void) setHasPreferAlpha:(BOOL) _value_ {
  hasPreferAlpha_ = !!_value_;
}
- (BOOL) preferAlpha {
  return !!preferAlpha_;
}
- (void) setPreferAlpha:(BOOL) _value_ {
  preferAlpha_ = !!_value_;
}
- (BOOL) hasOpus {
  return !!hasOpus_;
}
- (void) setHasOpus:(BOOL) _value_ {
  hasOpus_ = !!_value_;
}
- (BOOL) opus {
  return !!opus_;
}
- (void) setOpus:(BOOL) _value_ {
  opus_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.alpha = 0;
    self.beta = 0;
    self.preferAlpha = YES;
    self.opus = NO;
  }
  return self;
}
static MPCodecVersion* defaultMPCodecVersionInstance = nil;
+ (void) initialize {
  if (self == [MPCodecVersion class]) {
    defaultMPCodecVersionInstance = [[MPCodecVersion alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPCodecVersionInstance;
}
- (instancetype) defaultInstance {
  return defaultMPCodecVersionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAlpha) {
    return NO;
  }
  if (!self.hasBeta) {
    return NO;
  }
  if (!self.hasPreferAlpha) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAlpha) {
    [output writeInt32:1 value:self.alpha];
  }
  if (self.hasBeta) {
    [output writeInt32:2 value:self.beta];
  }
  if (self.hasPreferAlpha) {
    [output writeBool:3 value:self.preferAlpha];
  }
  if (self.hasOpus) {
    [output writeBool:4 value:self.opus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAlpha) {
    size_ += computeInt32Size(1, self.alpha);
  }
  if (self.hasBeta) {
    size_ += computeInt32Size(2, self.beta);
  }
  if (self.hasPreferAlpha) {
    size_ += computeBoolSize(3, self.preferAlpha);
  }
  if (self.hasOpus) {
    size_ += computeBoolSize(4, self.opus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPCodecVersion*) parseFromData:(NSData*) data {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromData:data] build];
}
+ (MPCodecVersion*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPCodecVersion*) parseFromInputStream:(NSInputStream*) input {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromInputStream:input] build];
}
+ (MPCodecVersion*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPCodecVersion*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromCodedInputStream:input] build];
}
+ (MPCodecVersion*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPCodecVersion*)[[[MPCodecVersion builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPCodecVersionBuilder*) builder {
  return [[MPCodecVersionBuilder alloc] init];
}
+ (MPCodecVersionBuilder*) builderWithPrototype:(MPCodecVersion*) prototype {
  return [[MPCodecVersion builder] mergeFrom:prototype];
}
- (MPCodecVersionBuilder*) builder {
  return [MPCodecVersion builder];
}
- (MPCodecVersionBuilder*) toBuilder {
  return [MPCodecVersion builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAlpha) {
    [output appendFormat:@"%@%@: %@\n", indent, @"alpha", [NSNumber numberWithInteger:self.alpha]];
  }
  if (self.hasBeta) {
    [output appendFormat:@"%@%@: %@\n", indent, @"beta", [NSNumber numberWithInteger:self.beta]];
  }
  if (self.hasPreferAlpha) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preferAlpha", [NSNumber numberWithBool:self.preferAlpha]];
  }
  if (self.hasOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opus", [NSNumber numberWithBool:self.opus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAlpha) {
    [dictionary setObject: [NSNumber numberWithInteger:self.alpha] forKey: @"alpha"];
  }
  if (self.hasBeta) {
    [dictionary setObject: [NSNumber numberWithInteger:self.beta] forKey: @"beta"];
  }
  if (self.hasPreferAlpha) {
    [dictionary setObject: [NSNumber numberWithBool:self.preferAlpha] forKey: @"preferAlpha"];
  }
  if (self.hasOpus) {
    [dictionary setObject: [NSNumber numberWithBool:self.opus] forKey: @"opus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPCodecVersion class]]) {
    return NO;
  }
  MPCodecVersion *otherMessage = other;
  return
      self.hasAlpha == otherMessage.hasAlpha &&
      (!self.hasAlpha || self.alpha == otherMessage.alpha) &&
      self.hasBeta == otherMessage.hasBeta &&
      (!self.hasBeta || self.beta == otherMessage.beta) &&
      self.hasPreferAlpha == otherMessage.hasPreferAlpha &&
      (!self.hasPreferAlpha || self.preferAlpha == otherMessage.preferAlpha) &&
      self.hasOpus == otherMessage.hasOpus &&
      (!self.hasOpus || self.opus == otherMessage.opus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAlpha) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.alpha] hash];
  }
  if (self.hasBeta) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.beta] hash];
  }
  if (self.hasPreferAlpha) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.preferAlpha] hash];
  }
  if (self.hasOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.opus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPCodecVersionBuilder()
@property (strong) MPCodecVersion* resultCodecVersion;
@end

@implementation MPCodecVersionBuilder
@synthesize resultCodecVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCodecVersion = [[MPCodecVersion alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCodecVersion;
}
- (MPCodecVersionBuilder*) clear {
  self.resultCodecVersion = [[MPCodecVersion alloc] init];
  return self;
}
- (MPCodecVersionBuilder*) clone {
  return [MPCodecVersion builderWithPrototype:resultCodecVersion];
}
- (MPCodecVersion*) defaultInstance {
  return [MPCodecVersion defaultInstance];
}
- (MPCodecVersion*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPCodecVersion*) buildPartial {
  MPCodecVersion* returnMe = resultCodecVersion;
  self.resultCodecVersion = nil;
  return returnMe;
}
- (MPCodecVersionBuilder*) mergeFrom:(MPCodecVersion*) other {
  if (other == [MPCodecVersion defaultInstance]) {
    return self;
  }
  if (other.hasAlpha) {
    [self setAlpha:other.alpha];
  }
  if (other.hasBeta) {
    [self setBeta:other.beta];
  }
  if (other.hasPreferAlpha) {
    [self setPreferAlpha:other.preferAlpha];
  }
  if (other.hasOpus) {
    [self setOpus:other.opus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPCodecVersionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPCodecVersionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAlpha:[input readInt32]];
        break;
      }
      case 16: {
        [self setBeta:[input readInt32]];
        break;
      }
      case 24: {
        [self setPreferAlpha:[input readBool]];
        break;
      }
      case 32: {
        [self setOpus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasAlpha {
  return resultCodecVersion.hasAlpha;
}
- (SInt32) alpha {
  return resultCodecVersion.alpha;
}
- (MPCodecVersionBuilder*) setAlpha:(SInt32) value {
  resultCodecVersion.hasAlpha = YES;
  resultCodecVersion.alpha = value;
  return self;
}
- (MPCodecVersionBuilder*) clearAlpha {
  resultCodecVersion.hasAlpha = NO;
  resultCodecVersion.alpha = 0;
  return self;
}
- (BOOL) hasBeta {
  return resultCodecVersion.hasBeta;
}
- (SInt32) beta {
  return resultCodecVersion.beta;
}
- (MPCodecVersionBuilder*) setBeta:(SInt32) value {
  resultCodecVersion.hasBeta = YES;
  resultCodecVersion.beta = value;
  return self;
}
- (MPCodecVersionBuilder*) clearBeta {
  resultCodecVersion.hasBeta = NO;
  resultCodecVersion.beta = 0;
  return self;
}
- (BOOL) hasPreferAlpha {
  return resultCodecVersion.hasPreferAlpha;
}
- (BOOL) preferAlpha {
  return resultCodecVersion.preferAlpha;
}
- (MPCodecVersionBuilder*) setPreferAlpha:(BOOL) value {
  resultCodecVersion.hasPreferAlpha = YES;
  resultCodecVersion.preferAlpha = value;
  return self;
}
- (MPCodecVersionBuilder*) clearPreferAlpha {
  resultCodecVersion.hasPreferAlpha = NO;
  resultCodecVersion.preferAlpha = YES;
  return self;
}
- (BOOL) hasOpus {
  return resultCodecVersion.hasOpus;
}
- (BOOL) opus {
  return resultCodecVersion.opus;
}
- (MPCodecVersionBuilder*) setOpus:(BOOL) value {
  resultCodecVersion.hasOpus = YES;
  resultCodecVersion.opus = value;
  return self;
}
- (MPCodecVersionBuilder*) clearOpus {
  resultCodecVersion.hasOpus = NO;
  resultCodecVersion.opus = NO;
  return self;
}
@end

@interface MPUserStats ()
@property UInt32 session;
@property BOOL statsOnly;
@property (strong) NSMutableArray * certificatesArray;
@property (strong) MPUserStatsStats* fromClient;
@property (strong) MPUserStatsStats* fromServer;
@property UInt32 udpPackets;
@property UInt32 tcpPackets;
@property Float32 udpPingAvg;
@property Float32 udpPingVar;
@property Float32 tcpPingAvg;
@property Float32 tcpPingVar;
@property (strong) MPVersion* version;
@property (strong) PBAppendableArray * celtVersionsArray;
@property (strong) NSData* address;
@property UInt32 bandwidth;
@property UInt32 onlinesecs;
@property UInt32 idlesecs;
@property BOOL strongCertificate;
@property BOOL opus;
@end

@implementation MPUserStats

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) _value_ {
  hasSession_ = !!_value_;
}
@synthesize session;
- (BOOL) hasStatsOnly {
  return !!hasStatsOnly_;
}
- (void) setHasStatsOnly:(BOOL) _value_ {
  hasStatsOnly_ = !!_value_;
}
- (BOOL) statsOnly {
  return !!statsOnly_;
}
- (void) setStatsOnly:(BOOL) _value_ {
  statsOnly_ = !!_value_;
}
@synthesize certificatesArray;
@dynamic certificates;
- (BOOL) hasFromClient {
  return !!hasFromClient_;
}
- (void) setHasFromClient:(BOOL) _value_ {
  hasFromClient_ = !!_value_;
}
@synthesize fromClient;
- (BOOL) hasFromServer {
  return !!hasFromServer_;
}
- (void) setHasFromServer:(BOOL) _value_ {
  hasFromServer_ = !!_value_;
}
@synthesize fromServer;
- (BOOL) hasUdpPackets {
  return !!hasUdpPackets_;
}
- (void) setHasUdpPackets:(BOOL) _value_ {
  hasUdpPackets_ = !!_value_;
}
@synthesize udpPackets;
- (BOOL) hasTcpPackets {
  return !!hasTcpPackets_;
}
- (void) setHasTcpPackets:(BOOL) _value_ {
  hasTcpPackets_ = !!_value_;
}
@synthesize tcpPackets;
- (BOOL) hasUdpPingAvg {
  return !!hasUdpPingAvg_;
}
- (void) setHasUdpPingAvg:(BOOL) _value_ {
  hasUdpPingAvg_ = !!_value_;
}
@synthesize udpPingAvg;
- (BOOL) hasUdpPingVar {
  return !!hasUdpPingVar_;
}
- (void) setHasUdpPingVar:(BOOL) _value_ {
  hasUdpPingVar_ = !!_value_;
}
@synthesize udpPingVar;
- (BOOL) hasTcpPingAvg {
  return !!hasTcpPingAvg_;
}
- (void) setHasTcpPingAvg:(BOOL) _value_ {
  hasTcpPingAvg_ = !!_value_;
}
@synthesize tcpPingAvg;
- (BOOL) hasTcpPingVar {
  return !!hasTcpPingVar_;
}
- (void) setHasTcpPingVar:(BOOL) _value_ {
  hasTcpPingVar_ = !!_value_;
}
@synthesize tcpPingVar;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
@synthesize celtVersionsArray;
@dynamic celtVersions;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) _value_ {
  hasAddress_ = !!_value_;
}
@synthesize address;
- (BOOL) hasBandwidth {
  return !!hasBandwidth_;
}
- (void) setHasBandwidth:(BOOL) _value_ {
  hasBandwidth_ = !!_value_;
}
@synthesize bandwidth;
- (BOOL) hasOnlinesecs {
  return !!hasOnlinesecs_;
}
- (void) setHasOnlinesecs:(BOOL) _value_ {
  hasOnlinesecs_ = !!_value_;
}
@synthesize onlinesecs;
- (BOOL) hasIdlesecs {
  return !!hasIdlesecs_;
}
- (void) setHasIdlesecs:(BOOL) _value_ {
  hasIdlesecs_ = !!_value_;
}
@synthesize idlesecs;
- (BOOL) hasStrongCertificate {
  return !!hasStrongCertificate_;
}
- (void) setHasStrongCertificate:(BOOL) _value_ {
  hasStrongCertificate_ = !!_value_;
}
- (BOOL) strongCertificate {
  return !!strongCertificate_;
}
- (void) setStrongCertificate:(BOOL) _value_ {
  strongCertificate_ = !!_value_;
}
- (BOOL) hasOpus {
  return !!hasOpus_;
}
- (void) setHasOpus:(BOOL) _value_ {
  hasOpus_ = !!_value_;
}
- (BOOL) opus {
  return !!opus_;
}
- (void) setOpus:(BOOL) _value_ {
  opus_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.session = 0;
    self.statsOnly = NO;
    self.fromClient = [MPUserStatsStats defaultInstance];
    self.fromServer = [MPUserStatsStats defaultInstance];
    self.udpPackets = 0;
    self.tcpPackets = 0;
    self.udpPingAvg = 0;
    self.udpPingVar = 0;
    self.tcpPingAvg = 0;
    self.tcpPingVar = 0;
    self.version = [MPVersion defaultInstance];
    self.address = [NSData data];
    self.bandwidth = 0;
    self.onlinesecs = 0;
    self.idlesecs = 0;
    self.strongCertificate = NO;
    self.opus = NO;
  }
  return self;
}
static MPUserStats* defaultMPUserStatsInstance = nil;
+ (void) initialize {
  if (self == [MPUserStats class]) {
    defaultMPUserStatsInstance = [[MPUserStats alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPUserStatsInstance;
}
- (instancetype) defaultInstance {
  return defaultMPUserStatsInstance;
}
- (NSArray *)certificates {
  return certificatesArray;
}
- (NSData*)certificatesAtIndex:(NSUInteger)index {
  return [certificatesArray objectAtIndex:index];
}
- (PBArray *)celtVersions {
  return celtVersionsArray;
}
- (SInt32)celtVersionsAtIndex:(NSUInteger)index {
  return [celtVersionsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeUInt32:1 value:self.session];
  }
  if (self.hasStatsOnly) {
    [output writeBool:2 value:self.statsOnly];
  }
  [self.certificatesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:3 value:element];
  }];
  if (self.hasFromClient) {
    [output writeMessage:4 value:self.fromClient];
  }
  if (self.hasFromServer) {
    [output writeMessage:5 value:self.fromServer];
  }
  if (self.hasUdpPackets) {
    [output writeUInt32:6 value:self.udpPackets];
  }
  if (self.hasTcpPackets) {
    [output writeUInt32:7 value:self.tcpPackets];
  }
  if (self.hasUdpPingAvg) {
    [output writeFloat:8 value:self.udpPingAvg];
  }
  if (self.hasUdpPingVar) {
    [output writeFloat:9 value:self.udpPingVar];
  }
  if (self.hasTcpPingAvg) {
    [output writeFloat:10 value:self.tcpPingAvg];
  }
  if (self.hasTcpPingVar) {
    [output writeFloat:11 value:self.tcpPingVar];
  }
  if (self.hasVersion) {
    [output writeMessage:12 value:self.version];
  }
  const NSUInteger celtVersionsArrayCount = self.celtVersionsArray.count;
  if (celtVersionsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.celtVersionsArray.data;
    for (NSUInteger i = 0; i < celtVersionsArrayCount; ++i) {
      [output writeInt32:13 value:values[i]];
    }
  }
  if (self.hasAddress) {
    [output writeData:14 value:self.address];
  }
  if (self.hasBandwidth) {
    [output writeUInt32:15 value:self.bandwidth];
  }
  if (self.hasOnlinesecs) {
    [output writeUInt32:16 value:self.onlinesecs];
  }
  if (self.hasIdlesecs) {
    [output writeUInt32:17 value:self.idlesecs];
  }
  if (self.hasStrongCertificate) {
    [output writeBool:18 value:self.strongCertificate];
  }
  if (self.hasOpus) {
    [output writeBool:19 value:self.opus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSession) {
    size_ += computeUInt32Size(1, self.session);
  }
  if (self.hasStatsOnly) {
    size_ += computeBoolSize(2, self.statsOnly);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.certificatesArray.count;
    [self.certificatesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasFromClient) {
    size_ += computeMessageSize(4, self.fromClient);
  }
  if (self.hasFromServer) {
    size_ += computeMessageSize(5, self.fromServer);
  }
  if (self.hasUdpPackets) {
    size_ += computeUInt32Size(6, self.udpPackets);
  }
  if (self.hasTcpPackets) {
    size_ += computeUInt32Size(7, self.tcpPackets);
  }
  if (self.hasUdpPingAvg) {
    size_ += computeFloatSize(8, self.udpPingAvg);
  }
  if (self.hasUdpPingVar) {
    size_ += computeFloatSize(9, self.udpPingVar);
  }
  if (self.hasTcpPingAvg) {
    size_ += computeFloatSize(10, self.tcpPingAvg);
  }
  if (self.hasTcpPingVar) {
    size_ += computeFloatSize(11, self.tcpPingVar);
  }
  if (self.hasVersion) {
    size_ += computeMessageSize(12, self.version);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.celtVersionsArray.count;
    const SInt32 *values = (const SInt32 *)self.celtVersionsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAddress) {
    size_ += computeDataSize(14, self.address);
  }
  if (self.hasBandwidth) {
    size_ += computeUInt32Size(15, self.bandwidth);
  }
  if (self.hasOnlinesecs) {
    size_ += computeUInt32Size(16, self.onlinesecs);
  }
  if (self.hasIdlesecs) {
    size_ += computeUInt32Size(17, self.idlesecs);
  }
  if (self.hasStrongCertificate) {
    size_ += computeBoolSize(18, self.strongCertificate);
  }
  if (self.hasOpus) {
    size_ += computeBoolSize(19, self.opus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPUserStats*) parseFromData:(NSData*) data {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromData:data] build];
}
+ (MPUserStats*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserStats*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromInputStream:input] build];
}
+ (MPUserStats*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserStats*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserStats*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStats*)[[[MPUserStats builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserStatsBuilder*) builder {
  return [[MPUserStatsBuilder alloc] init];
}
+ (MPUserStatsBuilder*) builderWithPrototype:(MPUserStats*) prototype {
  return [[MPUserStats builder] mergeFrom:prototype];
}
- (MPUserStatsBuilder*) builder {
  return [MPUserStats builder];
}
- (MPUserStatsBuilder*) toBuilder {
  return [MPUserStats builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"session", [NSNumber numberWithInteger:self.session]];
  }
  if (self.hasStatsOnly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statsOnly", [NSNumber numberWithBool:self.statsOnly]];
  }
  [self.certificatesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certificates", obj];
  }];
  if (self.hasFromClient) {
    [output appendFormat:@"%@%@ {\n", indent, @"fromClient"];
    [self.fromClient writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFromServer) {
    [output appendFormat:@"%@%@ {\n", indent, @"fromServer"];
    [self.fromServer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUdpPackets) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPackets", [NSNumber numberWithInteger:self.udpPackets]];
  }
  if (self.hasTcpPackets) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPackets", [NSNumber numberWithInteger:self.tcpPackets]];
  }
  if (self.hasUdpPingAvg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPingAvg", [NSNumber numberWithFloat:self.udpPingAvg]];
  }
  if (self.hasUdpPingVar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udpPingVar", [NSNumber numberWithFloat:self.udpPingVar]];
  }
  if (self.hasTcpPingAvg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPingAvg", [NSNumber numberWithFloat:self.tcpPingAvg]];
  }
  if (self.hasTcpPingVar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tcpPingVar", [NSNumber numberWithFloat:self.tcpPingVar]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@ {\n", indent, @"version"];
    [self.version writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.celtVersionsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"celtVersions", obj];
  }];
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  if (self.hasBandwidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bandwidth", [NSNumber numberWithInteger:self.bandwidth]];
  }
  if (self.hasOnlinesecs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlinesecs", [NSNumber numberWithInteger:self.onlinesecs]];
  }
  if (self.hasIdlesecs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idlesecs", [NSNumber numberWithInteger:self.idlesecs]];
  }
  if (self.hasStrongCertificate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strongCertificate", [NSNumber numberWithBool:self.strongCertificate]];
  }
  if (self.hasOpus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opus", [NSNumber numberWithBool:self.opus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSession) {
    [dictionary setObject: [NSNumber numberWithInteger:self.session] forKey: @"session"];
  }
  if (self.hasStatsOnly) {
    [dictionary setObject: [NSNumber numberWithBool:self.statsOnly] forKey: @"statsOnly"];
  }
  [dictionary setObject:self.certificates forKey: @"certificates"];
  if (self.hasFromClient) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fromClient storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fromClient"];
  }
  if (self.hasFromServer) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fromServer storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fromServer"];
  }
  if (self.hasUdpPackets) {
    [dictionary setObject: [NSNumber numberWithInteger:self.udpPackets] forKey: @"udpPackets"];
  }
  if (self.hasTcpPackets) {
    [dictionary setObject: [NSNumber numberWithInteger:self.tcpPackets] forKey: @"tcpPackets"];
  }
  if (self.hasUdpPingAvg) {
    [dictionary setObject: [NSNumber numberWithFloat:self.udpPingAvg] forKey: @"udpPingAvg"];
  }
  if (self.hasUdpPingVar) {
    [dictionary setObject: [NSNumber numberWithFloat:self.udpPingVar] forKey: @"udpPingVar"];
  }
  if (self.hasTcpPingAvg) {
    [dictionary setObject: [NSNumber numberWithFloat:self.tcpPingAvg] forKey: @"tcpPingAvg"];
  }
  if (self.hasTcpPingVar) {
    [dictionary setObject: [NSNumber numberWithFloat:self.tcpPingVar] forKey: @"tcpPingVar"];
  }
  if (self.hasVersion) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.version storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"version"];
  }
  NSMutableArray * celtVersionsArrayArray = [NSMutableArray new];
  NSUInteger celtVersionsArrayCount=self.celtVersionsArray.count;
  for(int i=0;i<celtVersionsArrayCount;i++){
    [celtVersionsArrayArray addObject: @([self.celtVersionsArray int32AtIndex:i])];
  }
  [dictionary setObject: celtVersionsArrayArray forKey: @"celtVersions"];
  if (self.hasAddress) {
    [dictionary setObject: self.address forKey: @"address"];
  }
  if (self.hasBandwidth) {
    [dictionary setObject: [NSNumber numberWithInteger:self.bandwidth] forKey: @"bandwidth"];
  }
  if (self.hasOnlinesecs) {
    [dictionary setObject: [NSNumber numberWithInteger:self.onlinesecs] forKey: @"onlinesecs"];
  }
  if (self.hasIdlesecs) {
    [dictionary setObject: [NSNumber numberWithInteger:self.idlesecs] forKey: @"idlesecs"];
  }
  if (self.hasStrongCertificate) {
    [dictionary setObject: [NSNumber numberWithBool:self.strongCertificate] forKey: @"strongCertificate"];
  }
  if (self.hasOpus) {
    [dictionary setObject: [NSNumber numberWithBool:self.opus] forKey: @"opus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserStats class]]) {
    return NO;
  }
  MPUserStats *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || self.session == otherMessage.session) &&
      self.hasStatsOnly == otherMessage.hasStatsOnly &&
      (!self.hasStatsOnly || self.statsOnly == otherMessage.statsOnly) &&
      [self.certificatesArray isEqualToArray:otherMessage.certificatesArray] &&
      self.hasFromClient == otherMessage.hasFromClient &&
      (!self.hasFromClient || [self.fromClient isEqual:otherMessage.fromClient]) &&
      self.hasFromServer == otherMessage.hasFromServer &&
      (!self.hasFromServer || [self.fromServer isEqual:otherMessage.fromServer]) &&
      self.hasUdpPackets == otherMessage.hasUdpPackets &&
      (!self.hasUdpPackets || self.udpPackets == otherMessage.udpPackets) &&
      self.hasTcpPackets == otherMessage.hasTcpPackets &&
      (!self.hasTcpPackets || self.tcpPackets == otherMessage.tcpPackets) &&
      self.hasUdpPingAvg == otherMessage.hasUdpPingAvg &&
      (!self.hasUdpPingAvg || self.udpPingAvg == otherMessage.udpPingAvg) &&
      self.hasUdpPingVar == otherMessage.hasUdpPingVar &&
      (!self.hasUdpPingVar || self.udpPingVar == otherMessage.udpPingVar) &&
      self.hasTcpPingAvg == otherMessage.hasTcpPingAvg &&
      (!self.hasTcpPingAvg || self.tcpPingAvg == otherMessage.tcpPingAvg) &&
      self.hasTcpPingVar == otherMessage.hasTcpPingVar &&
      (!self.hasTcpPingVar || self.tcpPingVar == otherMessage.tcpPingVar) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      [self.celtVersionsArray isEqualToArray:otherMessage.celtVersionsArray] &&
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      self.hasBandwidth == otherMessage.hasBandwidth &&
      (!self.hasBandwidth || self.bandwidth == otherMessage.bandwidth) &&
      self.hasOnlinesecs == otherMessage.hasOnlinesecs &&
      (!self.hasOnlinesecs || self.onlinesecs == otherMessage.onlinesecs) &&
      self.hasIdlesecs == otherMessage.hasIdlesecs &&
      (!self.hasIdlesecs || self.idlesecs == otherMessage.idlesecs) &&
      self.hasStrongCertificate == otherMessage.hasStrongCertificate &&
      (!self.hasStrongCertificate || self.strongCertificate == otherMessage.strongCertificate) &&
      self.hasOpus == otherMessage.hasOpus &&
      (!self.hasOpus || self.opus == otherMessage.opus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.session] hash];
  }
  if (self.hasStatsOnly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.statsOnly] hash];
  }
  [self.certificatesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasFromClient) {
    hashCode = hashCode * 31 + [self.fromClient hash];
  }
  if (self.hasFromServer) {
    hashCode = hashCode * 31 + [self.fromServer hash];
  }
  if (self.hasUdpPackets) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.udpPackets] hash];
  }
  if (self.hasTcpPackets) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tcpPackets] hash];
  }
  if (self.hasUdpPingAvg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.udpPingAvg] hash];
  }
  if (self.hasUdpPingVar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.udpPingVar] hash];
  }
  if (self.hasTcpPingAvg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.tcpPingAvg] hash];
  }
  if (self.hasTcpPingVar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.tcpPingVar] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  [self.celtVersionsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  if (self.hasBandwidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bandwidth] hash];
  }
  if (self.hasOnlinesecs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.onlinesecs] hash];
  }
  if (self.hasIdlesecs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.idlesecs] hash];
  }
  if (self.hasStrongCertificate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.strongCertificate] hash];
  }
  if (self.hasOpus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.opus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserStatsStats ()
@property UInt32 good;
@property UInt32 late;
@property UInt32 lost;
@property UInt32 resync;
@end

@implementation MPUserStatsStats

- (BOOL) hasGood {
  return !!hasGood_;
}
- (void) setHasGood:(BOOL) _value_ {
  hasGood_ = !!_value_;
}
@synthesize good;
- (BOOL) hasLate {
  return !!hasLate_;
}
- (void) setHasLate:(BOOL) _value_ {
  hasLate_ = !!_value_;
}
@synthesize late;
- (BOOL) hasLost {
  return !!hasLost_;
}
- (void) setHasLost:(BOOL) _value_ {
  hasLost_ = !!_value_;
}
@synthesize lost;
- (BOOL) hasResync {
  return !!hasResync_;
}
- (void) setHasResync:(BOOL) _value_ {
  hasResync_ = !!_value_;
}
@synthesize resync;
- (instancetype) init {
  if ((self = [super init])) {
    self.good = 0;
    self.late = 0;
    self.lost = 0;
    self.resync = 0;
  }
  return self;
}
static MPUserStatsStats* defaultMPUserStatsStatsInstance = nil;
+ (void) initialize {
  if (self == [MPUserStatsStats class]) {
    defaultMPUserStatsStatsInstance = [[MPUserStatsStats alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPUserStatsStatsInstance;
}
- (instancetype) defaultInstance {
  return defaultMPUserStatsStatsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGood) {
    [output writeUInt32:1 value:self.good];
  }
  if (self.hasLate) {
    [output writeUInt32:2 value:self.late];
  }
  if (self.hasLost) {
    [output writeUInt32:3 value:self.lost];
  }
  if (self.hasResync) {
    [output writeUInt32:4 value:self.resync];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGood) {
    size_ += computeUInt32Size(1, self.good);
  }
  if (self.hasLate) {
    size_ += computeUInt32Size(2, self.late);
  }
  if (self.hasLost) {
    size_ += computeUInt32Size(3, self.lost);
  }
  if (self.hasResync) {
    size_ += computeUInt32Size(4, self.resync);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPUserStatsStats*) parseFromData:(NSData*) data {
  return (MPUserStatsStats*)[[[MPUserStatsStats builder] mergeFromData:data] build];
}
+ (MPUserStatsStats*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStatsStats*)[[[MPUserStatsStats builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPUserStatsStats*) parseFromInputStream:(NSInputStream*) input {
  return (MPUserStatsStats*)[[[MPUserStatsStats builder] mergeFromInputStream:input] build];
}
+ (MPUserStatsStats*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStatsStats*)[[[MPUserStatsStats builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserStatsStats*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPUserStatsStats*)[[[MPUserStatsStats builder] mergeFromCodedInputStream:input] build];
}
+ (MPUserStatsStats*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPUserStatsStats*)[[[MPUserStatsStats builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPUserStatsStatsBuilder*) builder {
  return [[MPUserStatsStatsBuilder alloc] init];
}
+ (MPUserStatsStatsBuilder*) builderWithPrototype:(MPUserStatsStats*) prototype {
  return [[MPUserStatsStats builder] mergeFrom:prototype];
}
- (MPUserStatsStatsBuilder*) builder {
  return [MPUserStatsStats builder];
}
- (MPUserStatsStatsBuilder*) toBuilder {
  return [MPUserStatsStats builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGood) {
    [output appendFormat:@"%@%@: %@\n", indent, @"good", [NSNumber numberWithInteger:self.good]];
  }
  if (self.hasLate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"late", [NSNumber numberWithInteger:self.late]];
  }
  if (self.hasLost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lost", [NSNumber numberWithInteger:self.lost]];
  }
  if (self.hasResync) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resync", [NSNumber numberWithInteger:self.resync]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGood) {
    [dictionary setObject: [NSNumber numberWithInteger:self.good] forKey: @"good"];
  }
  if (self.hasLate) {
    [dictionary setObject: [NSNumber numberWithInteger:self.late] forKey: @"late"];
  }
  if (self.hasLost) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lost] forKey: @"lost"];
  }
  if (self.hasResync) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resync] forKey: @"resync"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPUserStatsStats class]]) {
    return NO;
  }
  MPUserStatsStats *otherMessage = other;
  return
      self.hasGood == otherMessage.hasGood &&
      (!self.hasGood || self.good == otherMessage.good) &&
      self.hasLate == otherMessage.hasLate &&
      (!self.hasLate || self.late == otherMessage.late) &&
      self.hasLost == otherMessage.hasLost &&
      (!self.hasLost || self.lost == otherMessage.lost) &&
      self.hasResync == otherMessage.hasResync &&
      (!self.hasResync || self.resync == otherMessage.resync) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGood) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.good] hash];
  }
  if (self.hasLate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.late] hash];
  }
  if (self.hasLost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lost] hash];
  }
  if (self.hasResync) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resync] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPUserStatsStatsBuilder()
@property (strong) MPUserStatsStats* resultStats;
@end

@implementation MPUserStatsStatsBuilder
@synthesize resultStats;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStats = [[MPUserStatsStats alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStats;
}
- (MPUserStatsStatsBuilder*) clear {
  self.resultStats = [[MPUserStatsStats alloc] init];
  return self;
}
- (MPUserStatsStatsBuilder*) clone {
  return [MPUserStatsStats builderWithPrototype:resultStats];
}
- (MPUserStatsStats*) defaultInstance {
  return [MPUserStatsStats defaultInstance];
}
- (MPUserStatsStats*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserStatsStats*) buildPartial {
  MPUserStatsStats* returnMe = resultStats;
  self.resultStats = nil;
  return returnMe;
}
- (MPUserStatsStatsBuilder*) mergeFrom:(MPUserStatsStats*) other {
  if (other == [MPUserStatsStats defaultInstance]) {
    return self;
  }
  if (other.hasGood) {
    [self setGood:other.good];
  }
  if (other.hasLate) {
    [self setLate:other.late];
  }
  if (other.hasLost) {
    [self setLost:other.lost];
  }
  if (other.hasResync) {
    [self setResync:other.resync];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserStatsStatsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserStatsStatsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGood:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLate:[input readUInt32]];
        break;
      }
      case 24: {
        [self setLost:[input readUInt32]];
        break;
      }
      case 32: {
        [self setResync:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasGood {
  return resultStats.hasGood;
}
- (UInt32) good {
  return resultStats.good;
}
- (MPUserStatsStatsBuilder*) setGood:(UInt32) value {
  resultStats.hasGood = YES;
  resultStats.good = value;
  return self;
}
- (MPUserStatsStatsBuilder*) clearGood {
  resultStats.hasGood = NO;
  resultStats.good = 0;
  return self;
}
- (BOOL) hasLate {
  return resultStats.hasLate;
}
- (UInt32) late {
  return resultStats.late;
}
- (MPUserStatsStatsBuilder*) setLate:(UInt32) value {
  resultStats.hasLate = YES;
  resultStats.late = value;
  return self;
}
- (MPUserStatsStatsBuilder*) clearLate {
  resultStats.hasLate = NO;
  resultStats.late = 0;
  return self;
}
- (BOOL) hasLost {
  return resultStats.hasLost;
}
- (UInt32) lost {
  return resultStats.lost;
}
- (MPUserStatsStatsBuilder*) setLost:(UInt32) value {
  resultStats.hasLost = YES;
  resultStats.lost = value;
  return self;
}
- (MPUserStatsStatsBuilder*) clearLost {
  resultStats.hasLost = NO;
  resultStats.lost = 0;
  return self;
}
- (BOOL) hasResync {
  return resultStats.hasResync;
}
- (UInt32) resync {
  return resultStats.resync;
}
- (MPUserStatsStatsBuilder*) setResync:(UInt32) value {
  resultStats.hasResync = YES;
  resultStats.resync = value;
  return self;
}
- (MPUserStatsStatsBuilder*) clearResync {
  resultStats.hasResync = NO;
  resultStats.resync = 0;
  return self;
}
@end

@interface MPUserStatsBuilder()
@property (strong) MPUserStats* resultUserStats;
@end

@implementation MPUserStatsBuilder
@synthesize resultUserStats;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserStats = [[MPUserStats alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserStats;
}
- (MPUserStatsBuilder*) clear {
  self.resultUserStats = [[MPUserStats alloc] init];
  return self;
}
- (MPUserStatsBuilder*) clone {
  return [MPUserStats builderWithPrototype:resultUserStats];
}
- (MPUserStats*) defaultInstance {
  return [MPUserStats defaultInstance];
}
- (MPUserStats*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPUserStats*) buildPartial {
  MPUserStats* returnMe = resultUserStats;
  self.resultUserStats = nil;
  return returnMe;
}
- (MPUserStatsBuilder*) mergeFrom:(MPUserStats*) other {
  if (other == [MPUserStats defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self setSession:other.session];
  }
  if (other.hasStatsOnly) {
    [self setStatsOnly:other.statsOnly];
  }
  if (other.certificatesArray.count > 0) {
    if (resultUserStats.certificatesArray == nil) {
      resultUserStats.certificatesArray = [[NSMutableArray alloc] initWithArray:other.certificatesArray];
    } else {
      [resultUserStats.certificatesArray addObjectsFromArray:other.certificatesArray];
    }
  }
  if (other.hasFromClient) {
    [self mergeFromClient:other.fromClient];
  }
  if (other.hasFromServer) {
    [self mergeFromServer:other.fromServer];
  }
  if (other.hasUdpPackets) {
    [self setUdpPackets:other.udpPackets];
  }
  if (other.hasTcpPackets) {
    [self setTcpPackets:other.tcpPackets];
  }
  if (other.hasUdpPingAvg) {
    [self setUdpPingAvg:other.udpPingAvg];
  }
  if (other.hasUdpPingVar) {
    [self setUdpPingVar:other.udpPingVar];
  }
  if (other.hasTcpPingAvg) {
    [self setTcpPingAvg:other.tcpPingAvg];
  }
  if (other.hasTcpPingVar) {
    [self setTcpPingVar:other.tcpPingVar];
  }
  if (other.hasVersion) {
    [self mergeVersion:other.version];
  }
  if (other.celtVersionsArray.count > 0) {
    if (resultUserStats.celtVersionsArray == nil) {
      resultUserStats.celtVersionsArray = [other.celtVersionsArray copy];
    } else {
      [resultUserStats.celtVersionsArray appendArray:other.celtVersionsArray];
    }
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasBandwidth) {
    [self setBandwidth:other.bandwidth];
  }
  if (other.hasOnlinesecs) {
    [self setOnlinesecs:other.onlinesecs];
  }
  if (other.hasIdlesecs) {
    [self setIdlesecs:other.idlesecs];
  }
  if (other.hasStrongCertificate) {
    [self setStrongCertificate:other.strongCertificate];
  }
  if (other.hasOpus) {
    [self setOpus:other.opus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPUserStatsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPUserStatsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSession:[input readUInt32]];
        break;
      }
      case 16: {
        [self setStatsOnly:[input readBool]];
        break;
      }
      case 26: {
        [self addCertificates:[input readData]];
        break;
      }
      case 34: {
        MPUserStatsStatsBuilder* subBuilder = [MPUserStatsStats builder];
        if (self.hasFromClient) {
          [subBuilder mergeFrom:self.fromClient];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFromClient:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        MPUserStatsStatsBuilder* subBuilder = [MPUserStatsStats builder];
        if (self.hasFromServer) {
          [subBuilder mergeFrom:self.fromServer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFromServer:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setUdpPackets:[input readUInt32]];
        break;
      }
      case 56: {
        [self setTcpPackets:[input readUInt32]];
        break;
      }
      case 69: {
        [self setUdpPingAvg:[input readFloat]];
        break;
      }
      case 77: {
        [self setUdpPingVar:[input readFloat]];
        break;
      }
      case 85: {
        [self setTcpPingAvg:[input readFloat]];
        break;
      }
      case 93: {
        [self setTcpPingVar:[input readFloat]];
        break;
      }
      case 98: {
        MPVersionBuilder* subBuilder = [MPVersion builder];
        if (self.hasVersion) {
          [subBuilder mergeFrom:self.version];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVersion:[subBuilder buildPartial]];
        break;
      }
      case 104: {
        [self addCeltVersions:[input readInt32]];
        break;
      }
      case 114: {
        [self setAddress:[input readData]];
        break;
      }
      case 120: {
        [self setBandwidth:[input readUInt32]];
        break;
      }
      case 128: {
        [self setOnlinesecs:[input readUInt32]];
        break;
      }
      case 136: {
        [self setIdlesecs:[input readUInt32]];
        break;
      }
      case 144: {
        [self setStrongCertificate:[input readBool]];
        break;
      }
      case 152: {
        [self setOpus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return resultUserStats.hasSession;
}
- (UInt32) session {
  return resultUserStats.session;
}
- (MPUserStatsBuilder*) setSession:(UInt32) value {
  resultUserStats.hasSession = YES;
  resultUserStats.session = value;
  return self;
}
- (MPUserStatsBuilder*) clearSession {
  resultUserStats.hasSession = NO;
  resultUserStats.session = 0;
  return self;
}
- (BOOL) hasStatsOnly {
  return resultUserStats.hasStatsOnly;
}
- (BOOL) statsOnly {
  return resultUserStats.statsOnly;
}
- (MPUserStatsBuilder*) setStatsOnly:(BOOL) value {
  resultUserStats.hasStatsOnly = YES;
  resultUserStats.statsOnly = value;
  return self;
}
- (MPUserStatsBuilder*) clearStatsOnly {
  resultUserStats.hasStatsOnly = NO;
  resultUserStats.statsOnly = NO;
  return self;
}
- (NSMutableArray *)certificates {
  return resultUserStats.certificatesArray;
}
- (NSData*)certificatesAtIndex:(NSUInteger)index {
  return [resultUserStats certificatesAtIndex:index];
}
- (MPUserStatsBuilder *)addCertificates:(NSData*)value {
  if (resultUserStats.certificatesArray == nil) {
    resultUserStats.certificatesArray = [[NSMutableArray alloc]init];
  }
  [resultUserStats.certificatesArray addObject:value];
  return self;
}
- (MPUserStatsBuilder *)setCertificatesArray:(NSArray *)array {
  resultUserStats.certificatesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (MPUserStatsBuilder *)clearCertificates {
  resultUserStats.certificatesArray = nil;
  return self;
}
- (BOOL) hasFromClient {
  return resultUserStats.hasFromClient;
}
- (MPUserStatsStats*) fromClient {
  return resultUserStats.fromClient;
}
- (MPUserStatsBuilder*) setFromClient:(MPUserStatsStats*) value {
  resultUserStats.hasFromClient = YES;
  resultUserStats.fromClient = value;
  return self;
}
- (MPUserStatsBuilder*) setFromClientBuilder:(MPUserStatsStatsBuilder*) builderForValue {
  return [self setFromClient:[builderForValue build]];
}
- (MPUserStatsBuilder*) mergeFromClient:(MPUserStatsStats*) value {
  if (resultUserStats.hasFromClient &&
      resultUserStats.fromClient != [MPUserStatsStats defaultInstance]) {
    resultUserStats.fromClient =
      [[[MPUserStatsStats builderWithPrototype:resultUserStats.fromClient] mergeFrom:value] buildPartial];
  } else {
    resultUserStats.fromClient = value;
  }
  resultUserStats.hasFromClient = YES;
  return self;
}
- (MPUserStatsBuilder*) clearFromClient {
  resultUserStats.hasFromClient = NO;
  resultUserStats.fromClient = [MPUserStatsStats defaultInstance];
  return self;
}
- (BOOL) hasFromServer {
  return resultUserStats.hasFromServer;
}
- (MPUserStatsStats*) fromServer {
  return resultUserStats.fromServer;
}
- (MPUserStatsBuilder*) setFromServer:(MPUserStatsStats*) value {
  resultUserStats.hasFromServer = YES;
  resultUserStats.fromServer = value;
  return self;
}
- (MPUserStatsBuilder*) setFromServerBuilder:(MPUserStatsStatsBuilder*) builderForValue {
  return [self setFromServer:[builderForValue build]];
}
- (MPUserStatsBuilder*) mergeFromServer:(MPUserStatsStats*) value {
  if (resultUserStats.hasFromServer &&
      resultUserStats.fromServer != [MPUserStatsStats defaultInstance]) {
    resultUserStats.fromServer =
      [[[MPUserStatsStats builderWithPrototype:resultUserStats.fromServer] mergeFrom:value] buildPartial];
  } else {
    resultUserStats.fromServer = value;
  }
  resultUserStats.hasFromServer = YES;
  return self;
}
- (MPUserStatsBuilder*) clearFromServer {
  resultUserStats.hasFromServer = NO;
  resultUserStats.fromServer = [MPUserStatsStats defaultInstance];
  return self;
}
- (BOOL) hasUdpPackets {
  return resultUserStats.hasUdpPackets;
}
- (UInt32) udpPackets {
  return resultUserStats.udpPackets;
}
- (MPUserStatsBuilder*) setUdpPackets:(UInt32) value {
  resultUserStats.hasUdpPackets = YES;
  resultUserStats.udpPackets = value;
  return self;
}
- (MPUserStatsBuilder*) clearUdpPackets {
  resultUserStats.hasUdpPackets = NO;
  resultUserStats.udpPackets = 0;
  return self;
}
- (BOOL) hasTcpPackets {
  return resultUserStats.hasTcpPackets;
}
- (UInt32) tcpPackets {
  return resultUserStats.tcpPackets;
}
- (MPUserStatsBuilder*) setTcpPackets:(UInt32) value {
  resultUserStats.hasTcpPackets = YES;
  resultUserStats.tcpPackets = value;
  return self;
}
- (MPUserStatsBuilder*) clearTcpPackets {
  resultUserStats.hasTcpPackets = NO;
  resultUserStats.tcpPackets = 0;
  return self;
}
- (BOOL) hasUdpPingAvg {
  return resultUserStats.hasUdpPingAvg;
}
- (Float32) udpPingAvg {
  return resultUserStats.udpPingAvg;
}
- (MPUserStatsBuilder*) setUdpPingAvg:(Float32) value {
  resultUserStats.hasUdpPingAvg = YES;
  resultUserStats.udpPingAvg = value;
  return self;
}
- (MPUserStatsBuilder*) clearUdpPingAvg {
  resultUserStats.hasUdpPingAvg = NO;
  resultUserStats.udpPingAvg = 0;
  return self;
}
- (BOOL) hasUdpPingVar {
  return resultUserStats.hasUdpPingVar;
}
- (Float32) udpPingVar {
  return resultUserStats.udpPingVar;
}
- (MPUserStatsBuilder*) setUdpPingVar:(Float32) value {
  resultUserStats.hasUdpPingVar = YES;
  resultUserStats.udpPingVar = value;
  return self;
}
- (MPUserStatsBuilder*) clearUdpPingVar {
  resultUserStats.hasUdpPingVar = NO;
  resultUserStats.udpPingVar = 0;
  return self;
}
- (BOOL) hasTcpPingAvg {
  return resultUserStats.hasTcpPingAvg;
}
- (Float32) tcpPingAvg {
  return resultUserStats.tcpPingAvg;
}
- (MPUserStatsBuilder*) setTcpPingAvg:(Float32) value {
  resultUserStats.hasTcpPingAvg = YES;
  resultUserStats.tcpPingAvg = value;
  return self;
}
- (MPUserStatsBuilder*) clearTcpPingAvg {
  resultUserStats.hasTcpPingAvg = NO;
  resultUserStats.tcpPingAvg = 0;
  return self;
}
- (BOOL) hasTcpPingVar {
  return resultUserStats.hasTcpPingVar;
}
- (Float32) tcpPingVar {
  return resultUserStats.tcpPingVar;
}
- (MPUserStatsBuilder*) setTcpPingVar:(Float32) value {
  resultUserStats.hasTcpPingVar = YES;
  resultUserStats.tcpPingVar = value;
  return self;
}
- (MPUserStatsBuilder*) clearTcpPingVar {
  resultUserStats.hasTcpPingVar = NO;
  resultUserStats.tcpPingVar = 0;
  return self;
}
- (BOOL) hasVersion {
  return resultUserStats.hasVersion;
}
- (MPVersion*) version {
  return resultUserStats.version;
}
- (MPUserStatsBuilder*) setVersion:(MPVersion*) value {
  resultUserStats.hasVersion = YES;
  resultUserStats.version = value;
  return self;
}
- (MPUserStatsBuilder*) setVersionBuilder:(MPVersionBuilder*) builderForValue {
  return [self setVersion:[builderForValue build]];
}
- (MPUserStatsBuilder*) mergeVersion:(MPVersion*) value {
  if (resultUserStats.hasVersion &&
      resultUserStats.version != [MPVersion defaultInstance]) {
    resultUserStats.version =
      [[[MPVersion builderWithPrototype:resultUserStats.version] mergeFrom:value] buildPartial];
  } else {
    resultUserStats.version = value;
  }
  resultUserStats.hasVersion = YES;
  return self;
}
- (MPUserStatsBuilder*) clearVersion {
  resultUserStats.hasVersion = NO;
  resultUserStats.version = [MPVersion defaultInstance];
  return self;
}
- (PBAppendableArray *)celtVersions {
  return resultUserStats.celtVersionsArray;
}
- (SInt32)celtVersionsAtIndex:(NSUInteger)index {
  return [resultUserStats celtVersionsAtIndex:index];
}
- (MPUserStatsBuilder *)addCeltVersions:(SInt32)value {
  if (resultUserStats.celtVersionsArray == nil) {
    resultUserStats.celtVersionsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultUserStats.celtVersionsArray addInt32:value];
  return self;
}
- (MPUserStatsBuilder *)setCeltVersionsArray:(NSArray *)array {
  resultUserStats.celtVersionsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (MPUserStatsBuilder *)setCeltVersionsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultUserStats.celtVersionsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (MPUserStatsBuilder *)clearCeltVersions {
  resultUserStats.celtVersionsArray = nil;
  return self;
}
- (BOOL) hasAddress {
  return resultUserStats.hasAddress;
}
- (NSData*) address {
  return resultUserStats.address;
}
- (MPUserStatsBuilder*) setAddress:(NSData*) value {
  resultUserStats.hasAddress = YES;
  resultUserStats.address = value;
  return self;
}
- (MPUserStatsBuilder*) clearAddress {
  resultUserStats.hasAddress = NO;
  resultUserStats.address = [NSData data];
  return self;
}
- (BOOL) hasBandwidth {
  return resultUserStats.hasBandwidth;
}
- (UInt32) bandwidth {
  return resultUserStats.bandwidth;
}
- (MPUserStatsBuilder*) setBandwidth:(UInt32) value {
  resultUserStats.hasBandwidth = YES;
  resultUserStats.bandwidth = value;
  return self;
}
- (MPUserStatsBuilder*) clearBandwidth {
  resultUserStats.hasBandwidth = NO;
  resultUserStats.bandwidth = 0;
  return self;
}
- (BOOL) hasOnlinesecs {
  return resultUserStats.hasOnlinesecs;
}
- (UInt32) onlinesecs {
  return resultUserStats.onlinesecs;
}
- (MPUserStatsBuilder*) setOnlinesecs:(UInt32) value {
  resultUserStats.hasOnlinesecs = YES;
  resultUserStats.onlinesecs = value;
  return self;
}
- (MPUserStatsBuilder*) clearOnlinesecs {
  resultUserStats.hasOnlinesecs = NO;
  resultUserStats.onlinesecs = 0;
  return self;
}
- (BOOL) hasIdlesecs {
  return resultUserStats.hasIdlesecs;
}
- (UInt32) idlesecs {
  return resultUserStats.idlesecs;
}
- (MPUserStatsBuilder*) setIdlesecs:(UInt32) value {
  resultUserStats.hasIdlesecs = YES;
  resultUserStats.idlesecs = value;
  return self;
}
- (MPUserStatsBuilder*) clearIdlesecs {
  resultUserStats.hasIdlesecs = NO;
  resultUserStats.idlesecs = 0;
  return self;
}
- (BOOL) hasStrongCertificate {
  return resultUserStats.hasStrongCertificate;
}
- (BOOL) strongCertificate {
  return resultUserStats.strongCertificate;
}
- (MPUserStatsBuilder*) setStrongCertificate:(BOOL) value {
  resultUserStats.hasStrongCertificate = YES;
  resultUserStats.strongCertificate = value;
  return self;
}
- (MPUserStatsBuilder*) clearStrongCertificate {
  resultUserStats.hasStrongCertificate = NO;
  resultUserStats.strongCertificate = NO;
  return self;
}
- (BOOL) hasOpus {
  return resultUserStats.hasOpus;
}
- (BOOL) opus {
  return resultUserStats.opus;
}
- (MPUserStatsBuilder*) setOpus:(BOOL) value {
  resultUserStats.hasOpus = YES;
  resultUserStats.opus = value;
  return self;
}
- (MPUserStatsBuilder*) clearOpus {
  resultUserStats.hasOpus = NO;
  resultUserStats.opus = NO;
  return self;
}
@end

@interface MPRequestBlob ()
@property (strong) PBAppendableArray * sessionTextureArray;
@property (strong) PBAppendableArray * sessionCommentArray;
@property (strong) PBAppendableArray * channelDescriptionArray;
@end

@implementation MPRequestBlob

@synthesize sessionTextureArray;
@dynamic sessionTexture;
@synthesize sessionCommentArray;
@dynamic sessionComment;
@synthesize channelDescriptionArray;
@dynamic channelDescription;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static MPRequestBlob* defaultMPRequestBlobInstance = nil;
+ (void) initialize {
  if (self == [MPRequestBlob class]) {
    defaultMPRequestBlobInstance = [[MPRequestBlob alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPRequestBlobInstance;
}
- (instancetype) defaultInstance {
  return defaultMPRequestBlobInstance;
}
- (PBArray *)sessionTexture {
  return sessionTextureArray;
}
- (UInt32)sessionTextureAtIndex:(NSUInteger)index {
  return [sessionTextureArray uint32AtIndex:index];
}
- (PBArray *)sessionComment {
  return sessionCommentArray;
}
- (UInt32)sessionCommentAtIndex:(NSUInteger)index {
  return [sessionCommentArray uint32AtIndex:index];
}
- (PBArray *)channelDescription {
  return channelDescriptionArray;
}
- (UInt32)channelDescriptionAtIndex:(NSUInteger)index {
  return [channelDescriptionArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger sessionTextureArrayCount = self.sessionTextureArray.count;
  if (sessionTextureArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.sessionTextureArray.data;
    for (NSUInteger i = 0; i < sessionTextureArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  const NSUInteger sessionCommentArrayCount = self.sessionCommentArray.count;
  if (sessionCommentArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.sessionCommentArray.data;
    for (NSUInteger i = 0; i < sessionCommentArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  const NSUInteger channelDescriptionArrayCount = self.channelDescriptionArray.count;
  if (channelDescriptionArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.channelDescriptionArray.data;
    for (NSUInteger i = 0; i < channelDescriptionArrayCount; ++i) {
      [output writeUInt32:3 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionTextureArray.count;
    const UInt32 *values = (const UInt32 *)self.sessionTextureArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionCommentArray.count;
    const UInt32 *values = (const UInt32 *)self.sessionCommentArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.channelDescriptionArray.count;
    const UInt32 *values = (const UInt32 *)self.channelDescriptionArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPRequestBlob*) parseFromData:(NSData*) data {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromData:data] build];
}
+ (MPRequestBlob*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPRequestBlob*) parseFromInputStream:(NSInputStream*) input {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromInputStream:input] build];
}
+ (MPRequestBlob*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPRequestBlob*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromCodedInputStream:input] build];
}
+ (MPRequestBlob*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPRequestBlob*)[[[MPRequestBlob builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPRequestBlobBuilder*) builder {
  return [[MPRequestBlobBuilder alloc] init];
}
+ (MPRequestBlobBuilder*) builderWithPrototype:(MPRequestBlob*) prototype {
  return [[MPRequestBlob builder] mergeFrom:prototype];
}
- (MPRequestBlobBuilder*) builder {
  return [MPRequestBlob builder];
}
- (MPRequestBlobBuilder*) toBuilder {
  return [MPRequestBlob builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.sessionTextureArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionTexture", obj];
  }];
  [self.sessionCommentArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionComment", obj];
  }];
  [self.channelDescriptionArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelDescription", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * sessionTextureArrayArray = [NSMutableArray new];
  NSUInteger sessionTextureArrayCount=self.sessionTextureArray.count;
  for(int i=0;i<sessionTextureArrayCount;i++){
    [sessionTextureArrayArray addObject: @([self.sessionTextureArray uint32AtIndex:i])];
  }
  [dictionary setObject: sessionTextureArrayArray forKey: @"sessionTexture"];
  NSMutableArray * sessionCommentArrayArray = [NSMutableArray new];
  NSUInteger sessionCommentArrayCount=self.sessionCommentArray.count;
  for(int i=0;i<sessionCommentArrayCount;i++){
    [sessionCommentArrayArray addObject: @([self.sessionCommentArray uint32AtIndex:i])];
  }
  [dictionary setObject: sessionCommentArrayArray forKey: @"sessionComment"];
  NSMutableArray * channelDescriptionArrayArray = [NSMutableArray new];
  NSUInteger channelDescriptionArrayCount=self.channelDescriptionArray.count;
  for(int i=0;i<channelDescriptionArrayCount;i++){
    [channelDescriptionArrayArray addObject: @([self.channelDescriptionArray uint32AtIndex:i])];
  }
  [dictionary setObject: channelDescriptionArrayArray forKey: @"channelDescription"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPRequestBlob class]]) {
    return NO;
  }
  MPRequestBlob *otherMessage = other;
  return
      [self.sessionTextureArray isEqualToArray:otherMessage.sessionTextureArray] &&
      [self.sessionCommentArray isEqualToArray:otherMessage.sessionCommentArray] &&
      [self.channelDescriptionArray isEqualToArray:otherMessage.channelDescriptionArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.sessionTextureArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.sessionCommentArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.channelDescriptionArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPRequestBlobBuilder()
@property (strong) MPRequestBlob* resultRequestBlob;
@end

@implementation MPRequestBlobBuilder
@synthesize resultRequestBlob;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestBlob = [[MPRequestBlob alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestBlob;
}
- (MPRequestBlobBuilder*) clear {
  self.resultRequestBlob = [[MPRequestBlob alloc] init];
  return self;
}
- (MPRequestBlobBuilder*) clone {
  return [MPRequestBlob builderWithPrototype:resultRequestBlob];
}
- (MPRequestBlob*) defaultInstance {
  return [MPRequestBlob defaultInstance];
}
- (MPRequestBlob*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPRequestBlob*) buildPartial {
  MPRequestBlob* returnMe = resultRequestBlob;
  self.resultRequestBlob = nil;
  return returnMe;
}
- (MPRequestBlobBuilder*) mergeFrom:(MPRequestBlob*) other {
  if (other == [MPRequestBlob defaultInstance]) {
    return self;
  }
  if (other.sessionTextureArray.count > 0) {
    if (resultRequestBlob.sessionTextureArray == nil) {
      resultRequestBlob.sessionTextureArray = [other.sessionTextureArray copy];
    } else {
      [resultRequestBlob.sessionTextureArray appendArray:other.sessionTextureArray];
    }
  }
  if (other.sessionCommentArray.count > 0) {
    if (resultRequestBlob.sessionCommentArray == nil) {
      resultRequestBlob.sessionCommentArray = [other.sessionCommentArray copy];
    } else {
      [resultRequestBlob.sessionCommentArray appendArray:other.sessionCommentArray];
    }
  }
  if (other.channelDescriptionArray.count > 0) {
    if (resultRequestBlob.channelDescriptionArray == nil) {
      resultRequestBlob.channelDescriptionArray = [other.channelDescriptionArray copy];
    } else {
      [resultRequestBlob.channelDescriptionArray appendArray:other.channelDescriptionArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPRequestBlobBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPRequestBlobBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addSessionTexture:[input readUInt32]];
        break;
      }
      case 16: {
        [self addSessionComment:[input readUInt32]];
        break;
      }
      case 24: {
        [self addChannelDescription:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)sessionTexture {
  return resultRequestBlob.sessionTextureArray;
}
- (UInt32)sessionTextureAtIndex:(NSUInteger)index {
  return [resultRequestBlob sessionTextureAtIndex:index];
}
- (MPRequestBlobBuilder *)addSessionTexture:(UInt32)value {
  if (resultRequestBlob.sessionTextureArray == nil) {
    resultRequestBlob.sessionTextureArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultRequestBlob.sessionTextureArray addUint32:value];
  return self;
}
- (MPRequestBlobBuilder *)setSessionTextureArray:(NSArray *)array {
  resultRequestBlob.sessionTextureArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlobBuilder *)setSessionTextureValues:(const UInt32 *)values count:(NSUInteger)count {
  resultRequestBlob.sessionTextureArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlobBuilder *)clearSessionTexture {
  resultRequestBlob.sessionTextureArray = nil;
  return self;
}
- (PBAppendableArray *)sessionComment {
  return resultRequestBlob.sessionCommentArray;
}
- (UInt32)sessionCommentAtIndex:(NSUInteger)index {
  return [resultRequestBlob sessionCommentAtIndex:index];
}
- (MPRequestBlobBuilder *)addSessionComment:(UInt32)value {
  if (resultRequestBlob.sessionCommentArray == nil) {
    resultRequestBlob.sessionCommentArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultRequestBlob.sessionCommentArray addUint32:value];
  return self;
}
- (MPRequestBlobBuilder *)setSessionCommentArray:(NSArray *)array {
  resultRequestBlob.sessionCommentArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlobBuilder *)setSessionCommentValues:(const UInt32 *)values count:(NSUInteger)count {
  resultRequestBlob.sessionCommentArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlobBuilder *)clearSessionComment {
  resultRequestBlob.sessionCommentArray = nil;
  return self;
}
- (PBAppendableArray *)channelDescription {
  return resultRequestBlob.channelDescriptionArray;
}
- (UInt32)channelDescriptionAtIndex:(NSUInteger)index {
  return [resultRequestBlob channelDescriptionAtIndex:index];
}
- (MPRequestBlobBuilder *)addChannelDescription:(UInt32)value {
  if (resultRequestBlob.channelDescriptionArray == nil) {
    resultRequestBlob.channelDescriptionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultRequestBlob.channelDescriptionArray addUint32:value];
  return self;
}
- (MPRequestBlobBuilder *)setChannelDescriptionArray:(NSArray *)array {
  resultRequestBlob.channelDescriptionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlobBuilder *)setChannelDescriptionValues:(const UInt32 *)values count:(NSUInteger)count {
  resultRequestBlob.channelDescriptionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPRequestBlobBuilder *)clearChannelDescription {
  resultRequestBlob.channelDescriptionArray = nil;
  return self;
}
@end

@interface MPServerConfig ()
@property UInt32 maxBandwidth;
@property (strong) NSString* welcomeText;
@property BOOL allowHtml;
@property UInt32 messageLength;
@property UInt32 imageMessageLength;
@property UInt32 maxUsers;
@end

@implementation MPServerConfig

- (BOOL) hasMaxBandwidth {
  return !!hasMaxBandwidth_;
}
- (void) setHasMaxBandwidth:(BOOL) _value_ {
  hasMaxBandwidth_ = !!_value_;
}
@synthesize maxBandwidth;
- (BOOL) hasWelcomeText {
  return !!hasWelcomeText_;
}
- (void) setHasWelcomeText:(BOOL) _value_ {
  hasWelcomeText_ = !!_value_;
}
@synthesize welcomeText;
- (BOOL) hasAllowHtml {
  return !!hasAllowHtml_;
}
- (void) setHasAllowHtml:(BOOL) _value_ {
  hasAllowHtml_ = !!_value_;
}
- (BOOL) allowHtml {
  return !!allowHtml_;
}
- (void) setAllowHtml:(BOOL) _value_ {
  allowHtml_ = !!_value_;
}
- (BOOL) hasMessageLength {
  return !!hasMessageLength_;
}
- (void) setHasMessageLength:(BOOL) _value_ {
  hasMessageLength_ = !!_value_;
}
@synthesize messageLength;
- (BOOL) hasImageMessageLength {
  return !!hasImageMessageLength_;
}
- (void) setHasImageMessageLength:(BOOL) _value_ {
  hasImageMessageLength_ = !!_value_;
}
@synthesize imageMessageLength;
- (BOOL) hasMaxUsers {
  return !!hasMaxUsers_;
}
- (void) setHasMaxUsers:(BOOL) _value_ {
  hasMaxUsers_ = !!_value_;
}
@synthesize maxUsers;
- (instancetype) init {
  if ((self = [super init])) {
    self.maxBandwidth = 0;
    self.welcomeText = @"";
    self.allowHtml = NO;
    self.messageLength = 0;
    self.imageMessageLength = 0;
    self.maxUsers = 0;
  }
  return self;
}
static MPServerConfig* defaultMPServerConfigInstance = nil;
+ (void) initialize {
  if (self == [MPServerConfig class]) {
    defaultMPServerConfigInstance = [[MPServerConfig alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPServerConfigInstance;
}
- (instancetype) defaultInstance {
  return defaultMPServerConfigInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMaxBandwidth) {
    [output writeUInt32:1 value:self.maxBandwidth];
  }
  if (self.hasWelcomeText) {
    [output writeString:2 value:self.welcomeText];
  }
  if (self.hasAllowHtml) {
    [output writeBool:3 value:self.allowHtml];
  }
  if (self.hasMessageLength) {
    [output writeUInt32:4 value:self.messageLength];
  }
  if (self.hasImageMessageLength) {
    [output writeUInt32:5 value:self.imageMessageLength];
  }
  if (self.hasMaxUsers) {
    [output writeUInt32:6 value:self.maxUsers];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMaxBandwidth) {
    size_ += computeUInt32Size(1, self.maxBandwidth);
  }
  if (self.hasWelcomeText) {
    size_ += computeStringSize(2, self.welcomeText);
  }
  if (self.hasAllowHtml) {
    size_ += computeBoolSize(3, self.allowHtml);
  }
  if (self.hasMessageLength) {
    size_ += computeUInt32Size(4, self.messageLength);
  }
  if (self.hasImageMessageLength) {
    size_ += computeUInt32Size(5, self.imageMessageLength);
  }
  if (self.hasMaxUsers) {
    size_ += computeUInt32Size(6, self.maxUsers);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPServerConfig*) parseFromData:(NSData*) data {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromData:data] build];
}
+ (MPServerConfig*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPServerConfig*) parseFromInputStream:(NSInputStream*) input {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromInputStream:input] build];
}
+ (MPServerConfig*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPServerConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromCodedInputStream:input] build];
}
+ (MPServerConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPServerConfig*)[[[MPServerConfig builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPServerConfigBuilder*) builder {
  return [[MPServerConfigBuilder alloc] init];
}
+ (MPServerConfigBuilder*) builderWithPrototype:(MPServerConfig*) prototype {
  return [[MPServerConfig builder] mergeFrom:prototype];
}
- (MPServerConfigBuilder*) builder {
  return [MPServerConfig builder];
}
- (MPServerConfigBuilder*) toBuilder {
  return [MPServerConfig builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMaxBandwidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxBandwidth", [NSNumber numberWithInteger:self.maxBandwidth]];
  }
  if (self.hasWelcomeText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"welcomeText", self.welcomeText];
  }
  if (self.hasAllowHtml) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowHtml", [NSNumber numberWithBool:self.allowHtml]];
  }
  if (self.hasMessageLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageLength", [NSNumber numberWithInteger:self.messageLength]];
  }
  if (self.hasImageMessageLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageMessageLength", [NSNumber numberWithInteger:self.imageMessageLength]];
  }
  if (self.hasMaxUsers) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxUsers", [NSNumber numberWithInteger:self.maxUsers]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMaxBandwidth) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxBandwidth] forKey: @"maxBandwidth"];
  }
  if (self.hasWelcomeText) {
    [dictionary setObject: self.welcomeText forKey: @"welcomeText"];
  }
  if (self.hasAllowHtml) {
    [dictionary setObject: [NSNumber numberWithBool:self.allowHtml] forKey: @"allowHtml"];
  }
  if (self.hasMessageLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.messageLength] forKey: @"messageLength"];
  }
  if (self.hasImageMessageLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.imageMessageLength] forKey: @"imageMessageLength"];
  }
  if (self.hasMaxUsers) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxUsers] forKey: @"maxUsers"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPServerConfig class]]) {
    return NO;
  }
  MPServerConfig *otherMessage = other;
  return
      self.hasMaxBandwidth == otherMessage.hasMaxBandwidth &&
      (!self.hasMaxBandwidth || self.maxBandwidth == otherMessage.maxBandwidth) &&
      self.hasWelcomeText == otherMessage.hasWelcomeText &&
      (!self.hasWelcomeText || [self.welcomeText isEqual:otherMessage.welcomeText]) &&
      self.hasAllowHtml == otherMessage.hasAllowHtml &&
      (!self.hasAllowHtml || self.allowHtml == otherMessage.allowHtml) &&
      self.hasMessageLength == otherMessage.hasMessageLength &&
      (!self.hasMessageLength || self.messageLength == otherMessage.messageLength) &&
      self.hasImageMessageLength == otherMessage.hasImageMessageLength &&
      (!self.hasImageMessageLength || self.imageMessageLength == otherMessage.imageMessageLength) &&
      self.hasMaxUsers == otherMessage.hasMaxUsers &&
      (!self.hasMaxUsers || self.maxUsers == otherMessage.maxUsers) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMaxBandwidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxBandwidth] hash];
  }
  if (self.hasWelcomeText) {
    hashCode = hashCode * 31 + [self.welcomeText hash];
  }
  if (self.hasAllowHtml) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.allowHtml] hash];
  }
  if (self.hasMessageLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.messageLength] hash];
  }
  if (self.hasImageMessageLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.imageMessageLength] hash];
  }
  if (self.hasMaxUsers) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxUsers] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPServerConfigBuilder()
@property (strong) MPServerConfig* resultServerConfig;
@end

@implementation MPServerConfigBuilder
@synthesize resultServerConfig;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultServerConfig = [[MPServerConfig alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultServerConfig;
}
- (MPServerConfigBuilder*) clear {
  self.resultServerConfig = [[MPServerConfig alloc] init];
  return self;
}
- (MPServerConfigBuilder*) clone {
  return [MPServerConfig builderWithPrototype:resultServerConfig];
}
- (MPServerConfig*) defaultInstance {
  return [MPServerConfig defaultInstance];
}
- (MPServerConfig*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPServerConfig*) buildPartial {
  MPServerConfig* returnMe = resultServerConfig;
  self.resultServerConfig = nil;
  return returnMe;
}
- (MPServerConfigBuilder*) mergeFrom:(MPServerConfig*) other {
  if (other == [MPServerConfig defaultInstance]) {
    return self;
  }
  if (other.hasMaxBandwidth) {
    [self setMaxBandwidth:other.maxBandwidth];
  }
  if (other.hasWelcomeText) {
    [self setWelcomeText:other.welcomeText];
  }
  if (other.hasAllowHtml) {
    [self setAllowHtml:other.allowHtml];
  }
  if (other.hasMessageLength) {
    [self setMessageLength:other.messageLength];
  }
  if (other.hasImageMessageLength) {
    [self setImageMessageLength:other.imageMessageLength];
  }
  if (other.hasMaxUsers) {
    [self setMaxUsers:other.maxUsers];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPServerConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPServerConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMaxBandwidth:[input readUInt32]];
        break;
      }
      case 18: {
        [self setWelcomeText:[input readString]];
        break;
      }
      case 24: {
        [self setAllowHtml:[input readBool]];
        break;
      }
      case 32: {
        [self setMessageLength:[input readUInt32]];
        break;
      }
      case 40: {
        [self setImageMessageLength:[input readUInt32]];
        break;
      }
      case 48: {
        [self setMaxUsers:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMaxBandwidth {
  return resultServerConfig.hasMaxBandwidth;
}
- (UInt32) maxBandwidth {
  return resultServerConfig.maxBandwidth;
}
- (MPServerConfigBuilder*) setMaxBandwidth:(UInt32) value {
  resultServerConfig.hasMaxBandwidth = YES;
  resultServerConfig.maxBandwidth = value;
  return self;
}
- (MPServerConfigBuilder*) clearMaxBandwidth {
  resultServerConfig.hasMaxBandwidth = NO;
  resultServerConfig.maxBandwidth = 0;
  return self;
}
- (BOOL) hasWelcomeText {
  return resultServerConfig.hasWelcomeText;
}
- (NSString*) welcomeText {
  return resultServerConfig.welcomeText;
}
- (MPServerConfigBuilder*) setWelcomeText:(NSString*) value {
  resultServerConfig.hasWelcomeText = YES;
  resultServerConfig.welcomeText = value;
  return self;
}
- (MPServerConfigBuilder*) clearWelcomeText {
  resultServerConfig.hasWelcomeText = NO;
  resultServerConfig.welcomeText = @"";
  return self;
}
- (BOOL) hasAllowHtml {
  return resultServerConfig.hasAllowHtml;
}
- (BOOL) allowHtml {
  return resultServerConfig.allowHtml;
}
- (MPServerConfigBuilder*) setAllowHtml:(BOOL) value {
  resultServerConfig.hasAllowHtml = YES;
  resultServerConfig.allowHtml = value;
  return self;
}
- (MPServerConfigBuilder*) clearAllowHtml {
  resultServerConfig.hasAllowHtml = NO;
  resultServerConfig.allowHtml = NO;
  return self;
}
- (BOOL) hasMessageLength {
  return resultServerConfig.hasMessageLength;
}
- (UInt32) messageLength {
  return resultServerConfig.messageLength;
}
- (MPServerConfigBuilder*) setMessageLength:(UInt32) value {
  resultServerConfig.hasMessageLength = YES;
  resultServerConfig.messageLength = value;
  return self;
}
- (MPServerConfigBuilder*) clearMessageLength {
  resultServerConfig.hasMessageLength = NO;
  resultServerConfig.messageLength = 0;
  return self;
}
- (BOOL) hasImageMessageLength {
  return resultServerConfig.hasImageMessageLength;
}
- (UInt32) imageMessageLength {
  return resultServerConfig.imageMessageLength;
}
- (MPServerConfigBuilder*) setImageMessageLength:(UInt32) value {
  resultServerConfig.hasImageMessageLength = YES;
  resultServerConfig.imageMessageLength = value;
  return self;
}
- (MPServerConfigBuilder*) clearImageMessageLength {
  resultServerConfig.hasImageMessageLength = NO;
  resultServerConfig.imageMessageLength = 0;
  return self;
}
- (BOOL) hasMaxUsers {
  return resultServerConfig.hasMaxUsers;
}
- (UInt32) maxUsers {
  return resultServerConfig.maxUsers;
}
- (MPServerConfigBuilder*) setMaxUsers:(UInt32) value {
  resultServerConfig.hasMaxUsers = YES;
  resultServerConfig.maxUsers = value;
  return self;
}
- (MPServerConfigBuilder*) clearMaxUsers {
  resultServerConfig.hasMaxUsers = NO;
  resultServerConfig.maxUsers = 0;
  return self;
}
@end

@interface MPSuggestConfig ()
@property UInt32 version;
@property BOOL positional;
@property BOOL pushToTalk;
@end

@implementation MPSuggestConfig

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasPositional {
  return !!hasPositional_;
}
- (void) setHasPositional:(BOOL) _value_ {
  hasPositional_ = !!_value_;
}
- (BOOL) positional {
  return !!positional_;
}
- (void) setPositional:(BOOL) _value_ {
  positional_ = !!_value_;
}
- (BOOL) hasPushToTalk {
  return !!hasPushToTalk_;
}
- (void) setHasPushToTalk:(BOOL) _value_ {
  hasPushToTalk_ = !!_value_;
}
- (BOOL) pushToTalk {
  return !!pushToTalk_;
}
- (void) setPushToTalk:(BOOL) _value_ {
  pushToTalk_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.version = 0;
    self.positional = NO;
    self.pushToTalk = NO;
  }
  return self;
}
static MPSuggestConfig* defaultMPSuggestConfigInstance = nil;
+ (void) initialize {
  if (self == [MPSuggestConfig class]) {
    defaultMPSuggestConfigInstance = [[MPSuggestConfig alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPSuggestConfigInstance;
}
- (instancetype) defaultInstance {
  return defaultMPSuggestConfigInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeUInt32:1 value:self.version];
  }
  if (self.hasPositional) {
    [output writeBool:2 value:self.positional];
  }
  if (self.hasPushToTalk) {
    [output writeBool:3 value:self.pushToTalk];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVersion) {
    size_ += computeUInt32Size(1, self.version);
  }
  if (self.hasPositional) {
    size_ += computeBoolSize(2, self.positional);
  }
  if (self.hasPushToTalk) {
    size_ += computeBoolSize(3, self.pushToTalk);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPSuggestConfig*) parseFromData:(NSData*) data {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromData:data] build];
}
+ (MPSuggestConfig*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPSuggestConfig*) parseFromInputStream:(NSInputStream*) input {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromInputStream:input] build];
}
+ (MPSuggestConfig*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPSuggestConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromCodedInputStream:input] build];
}
+ (MPSuggestConfig*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPSuggestConfig*)[[[MPSuggestConfig builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPSuggestConfigBuilder*) builder {
  return [[MPSuggestConfigBuilder alloc] init];
}
+ (MPSuggestConfigBuilder*) builderWithPrototype:(MPSuggestConfig*) prototype {
  return [[MPSuggestConfig builder] mergeFrom:prototype];
}
- (MPSuggestConfigBuilder*) builder {
  return [MPSuggestConfig builder];
}
- (MPSuggestConfigBuilder*) toBuilder {
  return [MPSuggestConfig builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  if (self.hasPositional) {
    [output appendFormat:@"%@%@: %@\n", indent, @"positional", [NSNumber numberWithBool:self.positional]];
  }
  if (self.hasPushToTalk) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pushToTalk", [NSNumber numberWithBool:self.pushToTalk]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.version] forKey: @"version"];
  }
  if (self.hasPositional) {
    [dictionary setObject: [NSNumber numberWithBool:self.positional] forKey: @"positional"];
  }
  if (self.hasPushToTalk) {
    [dictionary setObject: [NSNumber numberWithBool:self.pushToTalk] forKey: @"pushToTalk"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPSuggestConfig class]]) {
    return NO;
  }
  MPSuggestConfig *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasPositional == otherMessage.hasPositional &&
      (!self.hasPositional || self.positional == otherMessage.positional) &&
      self.hasPushToTalk == otherMessage.hasPushToTalk &&
      (!self.hasPushToTalk || self.pushToTalk == otherMessage.pushToTalk) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  if (self.hasPositional) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.positional] hash];
  }
  if (self.hasPushToTalk) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.pushToTalk] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPSuggestConfigBuilder()
@property (strong) MPSuggestConfig* resultSuggestConfig;
@end

@implementation MPSuggestConfigBuilder
@synthesize resultSuggestConfig;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSuggestConfig = [[MPSuggestConfig alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSuggestConfig;
}
- (MPSuggestConfigBuilder*) clear {
  self.resultSuggestConfig = [[MPSuggestConfig alloc] init];
  return self;
}
- (MPSuggestConfigBuilder*) clone {
  return [MPSuggestConfig builderWithPrototype:resultSuggestConfig];
}
- (MPSuggestConfig*) defaultInstance {
  return [MPSuggestConfig defaultInstance];
}
- (MPSuggestConfig*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPSuggestConfig*) buildPartial {
  MPSuggestConfig* returnMe = resultSuggestConfig;
  self.resultSuggestConfig = nil;
  return returnMe;
}
- (MPSuggestConfigBuilder*) mergeFrom:(MPSuggestConfig*) other {
  if (other == [MPSuggestConfig defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasPositional) {
    [self setPositional:other.positional];
  }
  if (other.hasPushToTalk) {
    [self setPushToTalk:other.pushToTalk];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPSuggestConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPSuggestConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVersion:[input readUInt32]];
        break;
      }
      case 16: {
        [self setPositional:[input readBool]];
        break;
      }
      case 24: {
        [self setPushToTalk:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return resultSuggestConfig.hasVersion;
}
- (UInt32) version {
  return resultSuggestConfig.version;
}
- (MPSuggestConfigBuilder*) setVersion:(UInt32) value {
  resultSuggestConfig.hasVersion = YES;
  resultSuggestConfig.version = value;
  return self;
}
- (MPSuggestConfigBuilder*) clearVersion {
  resultSuggestConfig.hasVersion = NO;
  resultSuggestConfig.version = 0;
  return self;
}
- (BOOL) hasPositional {
  return resultSuggestConfig.hasPositional;
}
- (BOOL) positional {
  return resultSuggestConfig.positional;
}
- (MPSuggestConfigBuilder*) setPositional:(BOOL) value {
  resultSuggestConfig.hasPositional = YES;
  resultSuggestConfig.positional = value;
  return self;
}
- (MPSuggestConfigBuilder*) clearPositional {
  resultSuggestConfig.hasPositional = NO;
  resultSuggestConfig.positional = NO;
  return self;
}
- (BOOL) hasPushToTalk {
  return resultSuggestConfig.hasPushToTalk;
}
- (BOOL) pushToTalk {
  return resultSuggestConfig.pushToTalk;
}
- (MPSuggestConfigBuilder*) setPushToTalk:(BOOL) value {
  resultSuggestConfig.hasPushToTalk = YES;
  resultSuggestConfig.pushToTalk = value;
  return self;
}
- (MPSuggestConfigBuilder*) clearPushToTalk {
  resultSuggestConfig.hasPushToTalk = NO;
  resultSuggestConfig.pushToTalk = NO;
  return self;
}
@end

@interface MPPluginDataTransmission ()
@property UInt32 senderSession;
@property (strong) PBAppendableArray * receiverSessionsArray;
@property (strong) NSData* data;
@property (strong) NSString* dataId;
@end

@implementation MPPluginDataTransmission

- (BOOL) hasSenderSession {
  return !!hasSenderSession_;
}
- (void) setHasSenderSession:(BOOL) _value_ {
  hasSenderSession_ = !!_value_;
}
@synthesize senderSession;
@synthesize receiverSessionsArray;
@dynamic receiverSessions;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (BOOL) hasDataId {
  return !!hasDataId_;
}
- (void) setHasDataId:(BOOL) _value_ {
  hasDataId_ = !!_value_;
}
@synthesize dataId;
- (instancetype) init {
  if ((self = [super init])) {
    self.senderSession = 0;
    self.data = [NSData data];
    self.dataId = @"";
  }
  return self;
}
static MPPluginDataTransmission* defaultMPPluginDataTransmissionInstance = nil;
+ (void) initialize {
  if (self == [MPPluginDataTransmission class]) {
    defaultMPPluginDataTransmissionInstance = [[MPPluginDataTransmission alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMPPluginDataTransmissionInstance;
}
- (instancetype) defaultInstance {
  return defaultMPPluginDataTransmissionInstance;
}
- (PBArray *)receiverSessions {
  return receiverSessionsArray;
}
- (UInt32)receiverSessionsAtIndex:(NSUInteger)index {
  return [receiverSessionsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSenderSession) {
    [output writeUInt32:1 value:self.senderSession];
  }
  const NSUInteger receiverSessionsArrayCount = self.receiverSessionsArray.count;
  if (receiverSessionsArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.receiverSessionsArray.data;
    [output writeRawVarint32:18];
    [output writeRawVarint32:receiverSessionsMemoizedSerializedSize];
    for (NSUInteger i = 0; i < receiverSessionsArrayCount; ++i) {
      [output writeUInt32NoTag:values[i]];
    }
  }
  if (self.hasData) {
    [output writeData:3 value:self.data];
  }
  if (self.hasDataId) {
    [output writeString:4 value:self.dataId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSenderSession) {
    size_ += computeUInt32Size(1, self.senderSession);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.receiverSessionsArray.count;
    const UInt32 *values = (const UInt32 *)self.receiverSessionsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 1;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    receiverSessionsMemoizedSerializedSize = dataSize;
  }
  if (self.hasData) {
    size_ += computeDataSize(3, self.data);
  }
  if (self.hasDataId) {
    size_ += computeStringSize(4, self.dataId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MPPluginDataTransmission*) parseFromData:(NSData*) data {
  return (MPPluginDataTransmission*)[[[MPPluginDataTransmission builder] mergeFromData:data] build];
}
+ (MPPluginDataTransmission*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPluginDataTransmission*)[[[MPPluginDataTransmission builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MPPluginDataTransmission*) parseFromInputStream:(NSInputStream*) input {
  return (MPPluginDataTransmission*)[[[MPPluginDataTransmission builder] mergeFromInputStream:input] build];
}
+ (MPPluginDataTransmission*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPluginDataTransmission*)[[[MPPluginDataTransmission builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPluginDataTransmission*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MPPluginDataTransmission*)[[[MPPluginDataTransmission builder] mergeFromCodedInputStream:input] build];
}
+ (MPPluginDataTransmission*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MPPluginDataTransmission*)[[[MPPluginDataTransmission builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MPPluginDataTransmissionBuilder*) builder {
  return [[MPPluginDataTransmissionBuilder alloc] init];
}
+ (MPPluginDataTransmissionBuilder*) builderWithPrototype:(MPPluginDataTransmission*) prototype {
  return [[MPPluginDataTransmission builder] mergeFrom:prototype];
}
- (MPPluginDataTransmissionBuilder*) builder {
  return [MPPluginDataTransmission builder];
}
- (MPPluginDataTransmissionBuilder*) toBuilder {
  return [MPPluginDataTransmission builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSenderSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderSession", [NSNumber numberWithInteger:self.senderSession]];
  }
  [self.receiverSessionsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receiverSessions", obj];
  }];
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  if (self.hasDataId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dataId", self.dataId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSenderSession) {
    [dictionary setObject: [NSNumber numberWithInteger:self.senderSession] forKey: @"senderSession"];
  }
  NSMutableArray * receiverSessionsArrayArray = [NSMutableArray new];
  NSUInteger receiverSessionsArrayCount=self.receiverSessionsArray.count;
  for(int i=0;i<receiverSessionsArrayCount;i++){
    [receiverSessionsArrayArray addObject: @([self.receiverSessionsArray uint32AtIndex:i])];
  }
  [dictionary setObject: receiverSessionsArrayArray forKey: @"receiverSessions"];
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  if (self.hasDataId) {
    [dictionary setObject: self.dataId forKey: @"dataId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MPPluginDataTransmission class]]) {
    return NO;
  }
  MPPluginDataTransmission *otherMessage = other;
  return
      self.hasSenderSession == otherMessage.hasSenderSession &&
      (!self.hasSenderSession || self.senderSession == otherMessage.senderSession) &&
      [self.receiverSessionsArray isEqualToArray:otherMessage.receiverSessionsArray] &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      self.hasDataId == otherMessage.hasDataId &&
      (!self.hasDataId || [self.dataId isEqual:otherMessage.dataId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSenderSession) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.senderSession] hash];
  }
  [self.receiverSessionsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  if (self.hasDataId) {
    hashCode = hashCode * 31 + [self.dataId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MPPluginDataTransmissionBuilder()
@property (strong) MPPluginDataTransmission* resultPluginDataTransmission;
@end

@implementation MPPluginDataTransmissionBuilder
@synthesize resultPluginDataTransmission;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPluginDataTransmission = [[MPPluginDataTransmission alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPluginDataTransmission;
}
- (MPPluginDataTransmissionBuilder*) clear {
  self.resultPluginDataTransmission = [[MPPluginDataTransmission alloc] init];
  return self;
}
- (MPPluginDataTransmissionBuilder*) clone {
  return [MPPluginDataTransmission builderWithPrototype:resultPluginDataTransmission];
}
- (MPPluginDataTransmission*) defaultInstance {
  return [MPPluginDataTransmission defaultInstance];
}
- (MPPluginDataTransmission*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MPPluginDataTransmission*) buildPartial {
  MPPluginDataTransmission* returnMe = resultPluginDataTransmission;
  self.resultPluginDataTransmission = nil;
  return returnMe;
}
- (MPPluginDataTransmissionBuilder*) mergeFrom:(MPPluginDataTransmission*) other {
  if (other == [MPPluginDataTransmission defaultInstance]) {
    return self;
  }
  if (other.hasSenderSession) {
    [self setSenderSession:other.senderSession];
  }
  if (other.receiverSessionsArray.count > 0) {
    if (resultPluginDataTransmission.receiverSessionsArray == nil) {
      resultPluginDataTransmission.receiverSessionsArray = [other.receiverSessionsArray copy];
    } else {
      [resultPluginDataTransmission.receiverSessionsArray appendArray:other.receiverSessionsArray];
    }
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.hasDataId) {
    [self setDataId:other.dataId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MPPluginDataTransmissionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MPPluginDataTransmissionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSenderSession:[input readUInt32]];
        break;
      }
      case 18: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultPluginDataTransmission.receiverSessionsArray == nil) {
          resultPluginDataTransmission.receiverSessionsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultPluginDataTransmission.receiverSessionsArray addUint32:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 26: {
        [self setData:[input readData]];
        break;
      }
      case 34: {
        [self setDataId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSenderSession {
  return resultPluginDataTransmission.hasSenderSession;
}
- (UInt32) senderSession {
  return resultPluginDataTransmission.senderSession;
}
- (MPPluginDataTransmissionBuilder*) setSenderSession:(UInt32) value {
  resultPluginDataTransmission.hasSenderSession = YES;
  resultPluginDataTransmission.senderSession = value;
  return self;
}
- (MPPluginDataTransmissionBuilder*) clearSenderSession {
  resultPluginDataTransmission.hasSenderSession = NO;
  resultPluginDataTransmission.senderSession = 0;
  return self;
}
- (PBAppendableArray *)receiverSessions {
  return resultPluginDataTransmission.receiverSessionsArray;
}
- (UInt32)receiverSessionsAtIndex:(NSUInteger)index {
  return [resultPluginDataTransmission receiverSessionsAtIndex:index];
}
- (MPPluginDataTransmissionBuilder *)addReceiverSessions:(UInt32)value {
  if (resultPluginDataTransmission.receiverSessionsArray == nil) {
    resultPluginDataTransmission.receiverSessionsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPluginDataTransmission.receiverSessionsArray addUint32:value];
  return self;
}
- (MPPluginDataTransmissionBuilder *)setReceiverSessionsArray:(NSArray *)array {
  resultPluginDataTransmission.receiverSessionsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPPluginDataTransmissionBuilder *)setReceiverSessionsValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPluginDataTransmission.receiverSessionsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (MPPluginDataTransmissionBuilder *)clearReceiverSessions {
  resultPluginDataTransmission.receiverSessionsArray = nil;
  return self;
}
- (BOOL) hasData {
  return resultPluginDataTransmission.hasData;
}
- (NSData*) data {
  return resultPluginDataTransmission.data;
}
- (MPPluginDataTransmissionBuilder*) setData:(NSData*) value {
  resultPluginDataTransmission.hasData = YES;
  resultPluginDataTransmission.data = value;
  return self;
}
- (MPPluginDataTransmissionBuilder*) clearData {
  resultPluginDataTransmission.hasData = NO;
  resultPluginDataTransmission.data = [NSData data];
  return self;
}
- (BOOL) hasDataId {
  return resultPluginDataTransmission.hasDataId;
}
- (NSString*) dataId {
  return resultPluginDataTransmission.dataId;
}
- (MPPluginDataTransmissionBuilder*) setDataId:(NSString*) value {
  resultPluginDataTransmission.hasDataId = YES;
  resultPluginDataTransmission.dataId = value;
  return self;
}
- (MPPluginDataTransmissionBuilder*) clearDataId {
  resultPluginDataTransmission.hasDataId = NO;
  resultPluginDataTransmission.dataId = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
